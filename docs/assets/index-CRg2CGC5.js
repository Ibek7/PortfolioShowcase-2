var wP=Object.defineProperty;var gm=t=>{throw TypeError(t)};var bP=(t,e,n)=>e in t?wP(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n;var C=(t,e,n)=>bP(t,typeof e!="symbol"?e+"":e,n),kc=(t,e,n)=>e.has(t)||gm("Cannot "+n);var N=(t,e,n)=>(kc(t,e,"read from private field"),n?n.call(t):e.get(t)),xe=(t,e,n)=>e.has(t)?gm("Cannot add the same private member more than once"):e instanceof WeakSet?e.add(t):e.set(t,n),ae=(t,e,n,i)=>(kc(t,e,"write to private field"),i?i.call(t,n):e.set(t,n),n),dt=(t,e,n)=>(kc(t,e,"access private method"),n);var Ga=(t,e,n,i)=>({set _(r){ae(t,e,r,n)},get _(){return N(t,e,i)}});function SP(t,e){for(var n=0;n<e.length;n++){const i=e[n];if(typeof i!="string"&&!Array.isArray(i)){for(const r in i)if(r!=="default"&&!(r in t)){const s=Object.getOwnPropertyDescriptor(i,r);s&&Object.defineProperty(t,r,s.get?s:{enumerable:!0,get:()=>i[r]})}}}return Object.freeze(Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}))}(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))i(r);new MutationObserver(r=>{for(const s of r)if(s.type==="childList")for(const o of s.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&i(o)}).observe(document,{childList:!0,subtree:!0});function n(r){const s={};return r.integrity&&(s.integrity=r.integrity),r.referrerPolicy&&(s.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?s.credentials="include":r.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function i(r){if(r.ep)return;r.ep=!0;const s=n(r);fetch(r.href,s)}})();function A1(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var R1={exports:{}},Bu={},F1={exports:{}},fe={};/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Ra=Symbol.for("react.element"),_P=Symbol.for("react.portal"),kP=Symbol.for("react.fragment"),CP=Symbol.for("react.strict_mode"),TP=Symbol.for("react.profiler"),PP=Symbol.for("react.provider"),EP=Symbol.for("react.context"),MP=Symbol.for("react.forward_ref"),DP=Symbol.for("react.suspense"),NP=Symbol.for("react.memo"),AP=Symbol.for("react.lazy"),ym=Symbol.iterator;function RP(t){return t===null||typeof t!="object"?null:(t=ym&&t[ym]||t["@@iterator"],typeof t=="function"?t:null)}var I1={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},O1=Object.assign,j1={};function eo(t,e,n){this.props=t,this.context=e,this.refs=j1,this.updater=n||I1}eo.prototype.isReactComponent={};eo.prototype.setState=function(t,e){if(typeof t!="object"&&typeof t!="function"&&t!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,t,e,"setState")};eo.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")};function L1(){}L1.prototype=eo.prototype;function hh(t,e,n){this.props=t,this.context=e,this.refs=j1,this.updater=n||I1}var ph=hh.prototype=new L1;ph.constructor=hh;O1(ph,eo.prototype);ph.isPureReactComponent=!0;var vm=Array.isArray,z1=Object.prototype.hasOwnProperty,mh={current:null},V1={key:!0,ref:!0,__self:!0,__source:!0};function B1(t,e,n){var i,r={},s=null,o=null;if(e!=null)for(i in e.ref!==void 0&&(o=e.ref),e.key!==void 0&&(s=""+e.key),e)z1.call(e,i)&&!V1.hasOwnProperty(i)&&(r[i]=e[i]);var a=arguments.length-2;if(a===1)r.children=n;else if(1<a){for(var l=Array(a),u=0;u<a;u++)l[u]=arguments[u+2];r.children=l}if(t&&t.defaultProps)for(i in a=t.defaultProps,a)r[i]===void 0&&(r[i]=a[i]);return{$$typeof:Ra,type:t,key:s,ref:o,props:r,_owner:mh.current}}function FP(t,e){return{$$typeof:Ra,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}function gh(t){return typeof t=="object"&&t!==null&&t.$$typeof===Ra}function IP(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,function(n){return e[n]})}var xm=/\/+/g;function Cc(t,e){return typeof t=="object"&&t!==null&&t.key!=null?IP(""+t.key):e.toString(36)}function xl(t,e,n,i,r){var s=typeof t;(s==="undefined"||s==="boolean")&&(t=null);var o=!1;if(t===null)o=!0;else switch(s){case"string":case"number":o=!0;break;case"object":switch(t.$$typeof){case Ra:case _P:o=!0}}if(o)return o=t,r=r(o),t=i===""?"."+Cc(o,0):i,vm(r)?(n="",t!=null&&(n=t.replace(xm,"$&/")+"/"),xl(r,e,n,"",function(u){return u})):r!=null&&(gh(r)&&(r=FP(r,n+(!r.key||o&&o.key===r.key?"":(""+r.key).replace(xm,"$&/")+"/")+t)),e.push(r)),1;if(o=0,i=i===""?".":i+":",vm(t))for(var a=0;a<t.length;a++){s=t[a];var l=i+Cc(s,a);o+=xl(s,e,n,l,r)}else if(l=RP(t),typeof l=="function")for(t=l.call(t),a=0;!(s=t.next()).done;)s=s.value,l=i+Cc(s,a++),o+=xl(s,e,n,l,r);else if(s==="object")throw e=String(t),Error("Objects are not valid as a React child (found: "+(e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e)+"). If you meant to render a collection of children, use an array instead.");return o}function Qa(t,e,n){if(t==null)return t;var i=[],r=0;return xl(t,i,"","",function(s){return e.call(n,s,r++)}),i}function OP(t){if(t._status===-1){var e=t._result;e=e(),e.then(function(n){(t._status===0||t._status===-1)&&(t._status=1,t._result=n)},function(n){(t._status===0||t._status===-1)&&(t._status=2,t._result=n)}),t._status===-1&&(t._status=0,t._result=e)}if(t._status===1)return t._result.default;throw t._result}var At={current:null},wl={transition:null},jP={ReactCurrentDispatcher:At,ReactCurrentBatchConfig:wl,ReactCurrentOwner:mh};function U1(){throw Error("act(...) is not supported in production builds of React.")}fe.Children={map:Qa,forEach:function(t,e,n){Qa(t,function(){e.apply(this,arguments)},n)},count:function(t){var e=0;return Qa(t,function(){e++}),e},toArray:function(t){return Qa(t,function(e){return e})||[]},only:function(t){if(!gh(t))throw Error("React.Children.only expected to receive a single React element child.");return t}};fe.Component=eo;fe.Fragment=kP;fe.Profiler=TP;fe.PureComponent=hh;fe.StrictMode=CP;fe.Suspense=DP;fe.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=jP;fe.act=U1;fe.cloneElement=function(t,e,n){if(t==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+t+".");var i=O1({},t.props),r=t.key,s=t.ref,o=t._owner;if(e!=null){if(e.ref!==void 0&&(s=e.ref,o=mh.current),e.key!==void 0&&(r=""+e.key),t.type&&t.type.defaultProps)var a=t.type.defaultProps;for(l in e)z1.call(e,l)&&!V1.hasOwnProperty(l)&&(i[l]=e[l]===void 0&&a!==void 0?a[l]:e[l])}var l=arguments.length-2;if(l===1)i.children=n;else if(1<l){a=Array(l);for(var u=0;u<l;u++)a[u]=arguments[u+2];i.children=a}return{$$typeof:Ra,type:t.type,key:r,ref:s,props:i,_owner:o}};fe.createContext=function(t){return t={$$typeof:EP,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},t.Provider={$$typeof:PP,_context:t},t.Consumer=t};fe.createElement=B1;fe.createFactory=function(t){var e=B1.bind(null,t);return e.type=t,e};fe.createRef=function(){return{current:null}};fe.forwardRef=function(t){return{$$typeof:MP,render:t}};fe.isValidElement=gh;fe.lazy=function(t){return{$$typeof:AP,_payload:{_status:-1,_result:t},_init:OP}};fe.memo=function(t,e){return{$$typeof:NP,type:t,compare:e===void 0?null:e}};fe.startTransition=function(t){var e=wl.transition;wl.transition={};try{t()}finally{wl.transition=e}};fe.unstable_act=U1;fe.useCallback=function(t,e){return At.current.useCallback(t,e)};fe.useContext=function(t){return At.current.useContext(t)};fe.useDebugValue=function(){};fe.useDeferredValue=function(t){return At.current.useDeferredValue(t)};fe.useEffect=function(t,e){return At.current.useEffect(t,e)};fe.useId=function(){return At.current.useId()};fe.useImperativeHandle=function(t,e,n){return At.current.useImperativeHandle(t,e,n)};fe.useInsertionEffect=function(t,e){return At.current.useInsertionEffect(t,e)};fe.useLayoutEffect=function(t,e){return At.current.useLayoutEffect(t,e)};fe.useMemo=function(t,e){return At.current.useMemo(t,e)};fe.useReducer=function(t,e,n){return At.current.useReducer(t,e,n)};fe.useRef=function(t){return At.current.useRef(t)};fe.useState=function(t){return At.current.useState(t)};fe.useSyncExternalStore=function(t,e,n){return At.current.useSyncExternalStore(t,e,n)};fe.useTransition=function(){return At.current.useTransition()};fe.version="18.3.1";F1.exports=fe;var S=F1.exports;const Me=A1(S),LP=SP({__proto__:null,default:Me},[S]);/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var zP=S,VP=Symbol.for("react.element"),BP=Symbol.for("react.fragment"),UP=Object.prototype.hasOwnProperty,$P=zP.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,WP={key:!0,ref:!0,__self:!0,__source:!0};function $1(t,e,n){var i,r={},s=null,o=null;n!==void 0&&(s=""+n),e.key!==void 0&&(s=""+e.key),e.ref!==void 0&&(o=e.ref);for(i in e)UP.call(e,i)&&!WP.hasOwnProperty(i)&&(r[i]=e[i]);if(t&&t.defaultProps)for(i in e=t.defaultProps,e)r[i]===void 0&&(r[i]=e[i]);return{$$typeof:VP,type:t,key:s,ref:o,props:r,_owner:$P.current}}Bu.Fragment=BP;Bu.jsx=$1;Bu.jsxs=$1;R1.exports=Bu;var p=R1.exports,W1={exports:{}},Jt={},H1={exports:{}},q1={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(t){function e(I,G){var K=I.length;I.push(G);e:for(;0<K;){var he=K-1>>>1,ke=I[he];if(0<r(ke,G))I[he]=G,I[K]=ke,K=he;else break e}}function n(I){return I.length===0?null:I[0]}function i(I){if(I.length===0)return null;var G=I[0],K=I.pop();if(K!==G){I[0]=K;e:for(var he=0,ke=I.length,gn=ke>>>1;he<gn;){var Bt=2*(he+1)-1,oo=I[Bt],yn=Bt+1,fr=I[yn];if(0>r(oo,K))yn<ke&&0>r(fr,oo)?(I[he]=fr,I[yn]=K,he=yn):(I[he]=oo,I[Bt]=K,he=Bt);else if(yn<ke&&0>r(fr,K))I[he]=fr,I[yn]=K,he=yn;else break e}}return G}function r(I,G){var K=I.sortIndex-G.sortIndex;return K!==0?K:I.id-G.id}if(typeof performance=="object"&&typeof performance.now=="function"){var s=performance;t.unstable_now=function(){return s.now()}}else{var o=Date,a=o.now();t.unstable_now=function(){return o.now()-a}}var l=[],u=[],c=1,d=null,f=3,h=!1,v=!1,y=!1,w=typeof setTimeout=="function"?setTimeout:null,g=typeof clearTimeout=="function"?clearTimeout:null,m=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function x(I){for(var G=n(u);G!==null;){if(G.callback===null)i(u);else if(G.startTime<=I)i(u),G.sortIndex=G.expirationTime,e(l,G);else break;G=n(u)}}function b(I){if(y=!1,x(I),!v)if(n(l)!==null)v=!0,ve(k);else{var G=n(u);G!==null&&se(b,G.startTime-I)}}function k(I,G){v=!1,y&&(y=!1,g(P),P=-1),h=!0;var K=f;try{for(x(G),d=n(l);d!==null&&(!(d.expirationTime>G)||I&&!ce());){var he=d.callback;if(typeof he=="function"){d.callback=null,f=d.priorityLevel;var ke=he(d.expirationTime<=G);G=t.unstable_now(),typeof ke=="function"?d.callback=ke:d===n(l)&&i(l),x(G)}else i(l);d=n(l)}if(d!==null)var gn=!0;else{var Bt=n(u);Bt!==null&&se(b,Bt.startTime-G),gn=!1}return gn}finally{d=null,f=K,h=!1}}var E=!1,M=null,P=-1,L=5,z=-1;function ce(){return!(t.unstable_now()-z<L)}function j(){if(M!==null){var I=t.unstable_now();z=I;var G=!0;try{G=M(!0,I)}finally{G?ee():(E=!1,M=null)}}else E=!1}var ee;if(typeof m=="function")ee=function(){m(j)};else if(typeof MessageChannel<"u"){var H=new MessageChannel,pe=H.port2;H.port1.onmessage=j,ee=function(){pe.postMessage(null)}}else ee=function(){w(j,0)};function ve(I){M=I,E||(E=!0,ee())}function se(I,G){P=w(function(){I(t.unstable_now())},G)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(I){I.callback=null},t.unstable_continueExecution=function(){v||h||(v=!0,ve(k))},t.unstable_forceFrameRate=function(I){0>I||125<I?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):L=0<I?Math.floor(1e3/I):5},t.unstable_getCurrentPriorityLevel=function(){return f},t.unstable_getFirstCallbackNode=function(){return n(l)},t.unstable_next=function(I){switch(f){case 1:case 2:case 3:var G=3;break;default:G=f}var K=f;f=G;try{return I()}finally{f=K}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(I,G){switch(I){case 1:case 2:case 3:case 4:case 5:break;default:I=3}var K=f;f=I;try{return G()}finally{f=K}},t.unstable_scheduleCallback=function(I,G,K){var he=t.unstable_now();switch(typeof K=="object"&&K!==null?(K=K.delay,K=typeof K=="number"&&0<K?he+K:he):K=he,I){case 1:var ke=-1;break;case 2:ke=250;break;case 5:ke=1073741823;break;case 4:ke=1e4;break;default:ke=5e3}return ke=K+ke,I={id:c++,callback:G,priorityLevel:I,startTime:K,expirationTime:ke,sortIndex:-1},K>he?(I.sortIndex=K,e(u,I),n(l)===null&&I===n(u)&&(y?(g(P),P=-1):y=!0,se(b,K-he))):(I.sortIndex=ke,e(l,I),v||h||(v=!0,ve(k))),I},t.unstable_shouldYield=ce,t.unstable_wrapCallback=function(I){var G=f;return function(){var K=f;f=G;try{return I.apply(this,arguments)}finally{f=K}}}})(q1);H1.exports=q1;var HP=H1.exports;/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var qP=S,Xt=HP;function R(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,n=1;n<arguments.length;n++)e+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var G1=new Set,Ho={};function Hr(t,e){js(t,e),js(t+"Capture",e)}function js(t,e){for(Ho[t]=e,t=0;t<e.length;t++)G1.add(e[t])}var mi=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),zd=Object.prototype.hasOwnProperty,GP=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,wm={},bm={};function QP(t){return zd.call(bm,t)?!0:zd.call(wm,t)?!1:GP.test(t)?bm[t]=!0:(wm[t]=!0,!1)}function KP(t,e,n,i){if(n!==null&&n.type===0)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return i?!1:n!==null?!n.acceptsBooleans:(t=t.toLowerCase().slice(0,5),t!=="data-"&&t!=="aria-");default:return!1}}function ZP(t,e,n,i){if(e===null||typeof e>"u"||KP(t,e,n,i))return!0;if(i)return!1;if(n!==null)switch(n.type){case 3:return!e;case 4:return e===!1;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}function Rt(t,e,n,i,r,s,o){this.acceptsBooleans=e===2||e===3||e===4,this.attributeName=i,this.attributeNamespace=r,this.mustUseProperty=n,this.propertyName=t,this.type=e,this.sanitizeURL=s,this.removeEmptyString=o}var ut={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(t){ut[t]=new Rt(t,0,!1,t,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(t){var e=t[0];ut[e]=new Rt(e,1,!1,t[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(t){ut[t]=new Rt(t,2,!1,t.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(t){ut[t]=new Rt(t,2,!1,t,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(t){ut[t]=new Rt(t,3,!1,t.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(t){ut[t]=new Rt(t,3,!0,t,null,!1,!1)});["capture","download"].forEach(function(t){ut[t]=new Rt(t,4,!1,t,null,!1,!1)});["cols","rows","size","span"].forEach(function(t){ut[t]=new Rt(t,6,!1,t,null,!1,!1)});["rowSpan","start"].forEach(function(t){ut[t]=new Rt(t,5,!1,t.toLowerCase(),null,!1,!1)});var yh=/[\-:]([a-z])/g;function vh(t){return t[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(t){var e=t.replace(yh,vh);ut[e]=new Rt(e,1,!1,t,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(t){var e=t.replace(yh,vh);ut[e]=new Rt(e,1,!1,t,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(t){var e=t.replace(yh,vh);ut[e]=new Rt(e,1,!1,t,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(t){ut[t]=new Rt(t,1,!1,t.toLowerCase(),null,!1,!1)});ut.xlinkHref=new Rt("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(t){ut[t]=new Rt(t,1,!1,t.toLowerCase(),null,!0,!0)});function xh(t,e,n,i){var r=ut.hasOwnProperty(e)?ut[e]:null;(r!==null?r.type!==0:i||!(2<e.length)||e[0]!=="o"&&e[0]!=="O"||e[1]!=="n"&&e[1]!=="N")&&(ZP(e,n,r,i)&&(n=null),i||r===null?QP(e)&&(n===null?t.removeAttribute(e):t.setAttribute(e,""+n)):r.mustUseProperty?t[r.propertyName]=n===null?r.type===3?!1:"":n:(e=r.attributeName,i=r.attributeNamespace,n===null?t.removeAttribute(e):(r=r.type,n=r===3||r===4&&n===!0?"":""+n,i?t.setAttributeNS(i,e,n):t.setAttribute(e,n))))}var Si=qP.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Ka=Symbol.for("react.element"),Yr=Symbol.for("react.portal"),Jr=Symbol.for("react.fragment"),wh=Symbol.for("react.strict_mode"),Vd=Symbol.for("react.profiler"),Q1=Symbol.for("react.provider"),K1=Symbol.for("react.context"),bh=Symbol.for("react.forward_ref"),Bd=Symbol.for("react.suspense"),Ud=Symbol.for("react.suspense_list"),Sh=Symbol.for("react.memo"),Ei=Symbol.for("react.lazy"),Z1=Symbol.for("react.offscreen"),Sm=Symbol.iterator;function ao(t){return t===null||typeof t!="object"?null:(t=Sm&&t[Sm]||t["@@iterator"],typeof t=="function"?t:null)}var je=Object.assign,Tc;function bo(t){if(Tc===void 0)try{throw Error()}catch(n){var e=n.stack.trim().match(/\n( *(at )?)/);Tc=e&&e[1]||""}return`
`+Tc+t}var Pc=!1;function Ec(t,e){if(!t||Pc)return"";Pc=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(e)if(e=function(){throw Error()},Object.defineProperty(e.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(e,[])}catch(u){var i=u}Reflect.construct(t,[],e)}else{try{e.call()}catch(u){i=u}t.call(e.prototype)}else{try{throw Error()}catch(u){i=u}t()}}catch(u){if(u&&i&&typeof u.stack=="string"){for(var r=u.stack.split(`
`),s=i.stack.split(`
`),o=r.length-1,a=s.length-1;1<=o&&0<=a&&r[o]!==s[a];)a--;for(;1<=o&&0<=a;o--,a--)if(r[o]!==s[a]){if(o!==1||a!==1)do if(o--,a--,0>a||r[o]!==s[a]){var l=`
`+r[o].replace(" at new "," at ");return t.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",t.displayName)),l}while(1<=o&&0<=a);break}}}finally{Pc=!1,Error.prepareStackTrace=n}return(t=t?t.displayName||t.name:"")?bo(t):""}function XP(t){switch(t.tag){case 5:return bo(t.type);case 16:return bo("Lazy");case 13:return bo("Suspense");case 19:return bo("SuspenseList");case 0:case 2:case 15:return t=Ec(t.type,!1),t;case 11:return t=Ec(t.type.render,!1),t;case 1:return t=Ec(t.type,!0),t;default:return""}}function $d(t){if(t==null)return null;if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t;switch(t){case Jr:return"Fragment";case Yr:return"Portal";case Vd:return"Profiler";case wh:return"StrictMode";case Bd:return"Suspense";case Ud:return"SuspenseList"}if(typeof t=="object")switch(t.$$typeof){case K1:return(t.displayName||"Context")+".Consumer";case Q1:return(t._context.displayName||"Context")+".Provider";case bh:var e=t.render;return t=t.displayName,t||(t=e.displayName||e.name||"",t=t!==""?"ForwardRef("+t+")":"ForwardRef"),t;case Sh:return e=t.displayName||null,e!==null?e:$d(t.type)||"Memo";case Ei:e=t._payload,t=t._init;try{return $d(t(e))}catch{}}return null}function YP(t){var e=t.type;switch(t.tag){case 24:return"Cache";case 9:return(e.displayName||"Context")+".Consumer";case 10:return(e._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return t=e.render,t=t.displayName||t.name||"",e.displayName||(t!==""?"ForwardRef("+t+")":"ForwardRef");case 7:return"Fragment";case 5:return e;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return $d(e);case 8:return e===wh?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e}return null}function Ji(t){switch(typeof t){case"boolean":case"number":case"string":case"undefined":return t;case"object":return t;default:return""}}function X1(t){var e=t.type;return(t=t.nodeName)&&t.toLowerCase()==="input"&&(e==="checkbox"||e==="radio")}function JP(t){var e=X1(t)?"checked":"value",n=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),i=""+t[e];if(!t.hasOwnProperty(e)&&typeof n<"u"&&typeof n.get=="function"&&typeof n.set=="function"){var r=n.get,s=n.set;return Object.defineProperty(t,e,{configurable:!0,get:function(){return r.call(this)},set:function(o){i=""+o,s.call(this,o)}}),Object.defineProperty(t,e,{enumerable:n.enumerable}),{getValue:function(){return i},setValue:function(o){i=""+o},stopTracking:function(){t._valueTracker=null,delete t[e]}}}}function Za(t){t._valueTracker||(t._valueTracker=JP(t))}function Y1(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var n=e.getValue(),i="";return t&&(i=X1(t)?t.checked?"true":"false":t.value),t=i,t!==n?(e.setValue(t),!0):!1}function Vl(t){if(t=t||(typeof document<"u"?document:void 0),typeof t>"u")return null;try{return t.activeElement||t.body}catch{return t.body}}function Wd(t,e){var n=e.checked;return je({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:n??t._wrapperState.initialChecked})}function _m(t,e){var n=e.defaultValue==null?"":e.defaultValue,i=e.checked!=null?e.checked:e.defaultChecked;n=Ji(e.value!=null?e.value:n),t._wrapperState={initialChecked:i,initialValue:n,controlled:e.type==="checkbox"||e.type==="radio"?e.checked!=null:e.value!=null}}function J1(t,e){e=e.checked,e!=null&&xh(t,"checked",e,!1)}function Hd(t,e){J1(t,e);var n=Ji(e.value),i=e.type;if(n!=null)i==="number"?(n===0&&t.value===""||t.value!=n)&&(t.value=""+n):t.value!==""+n&&(t.value=""+n);else if(i==="submit"||i==="reset"){t.removeAttribute("value");return}e.hasOwnProperty("value")?qd(t,e.type,n):e.hasOwnProperty("defaultValue")&&qd(t,e.type,Ji(e.defaultValue)),e.checked==null&&e.defaultChecked!=null&&(t.defaultChecked=!!e.defaultChecked)}function km(t,e,n){if(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue")){var i=e.type;if(!(i!=="submit"&&i!=="reset"||e.value!==void 0&&e.value!==null))return;e=""+t._wrapperState.initialValue,n||e===t.value||(t.value=e),t.defaultValue=e}n=t.name,n!==""&&(t.name=""),t.defaultChecked=!!t._wrapperState.initialChecked,n!==""&&(t.name=n)}function qd(t,e,n){(e!=="number"||Vl(t.ownerDocument)!==t)&&(n==null?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+n&&(t.defaultValue=""+n))}var So=Array.isArray;function vs(t,e,n,i){if(t=t.options,e){e={};for(var r=0;r<n.length;r++)e["$"+n[r]]=!0;for(n=0;n<t.length;n++)r=e.hasOwnProperty("$"+t[n].value),t[n].selected!==r&&(t[n].selected=r),r&&i&&(t[n].defaultSelected=!0)}else{for(n=""+Ji(n),e=null,r=0;r<t.length;r++){if(t[r].value===n){t[r].selected=!0,i&&(t[r].defaultSelected=!0);return}e!==null||t[r].disabled||(e=t[r])}e!==null&&(e.selected=!0)}}function Gd(t,e){if(e.dangerouslySetInnerHTML!=null)throw Error(R(91));return je({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function Cm(t,e){var n=e.value;if(n==null){if(n=e.children,e=e.defaultValue,n!=null){if(e!=null)throw Error(R(92));if(So(n)){if(1<n.length)throw Error(R(93));n=n[0]}e=n}e==null&&(e=""),n=e}t._wrapperState={initialValue:Ji(n)}}function eb(t,e){var n=Ji(e.value),i=Ji(e.defaultValue);n!=null&&(n=""+n,n!==t.value&&(t.value=n),e.defaultValue==null&&t.defaultValue!==n&&(t.defaultValue=n)),i!=null&&(t.defaultValue=""+i)}function Tm(t){var e=t.textContent;e===t._wrapperState.initialValue&&e!==""&&e!==null&&(t.value=e)}function tb(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Qd(t,e){return t==null||t==="http://www.w3.org/1999/xhtml"?tb(e):t==="http://www.w3.org/2000/svg"&&e==="foreignObject"?"http://www.w3.org/1999/xhtml":t}var Xa,nb=function(t){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(e,n,i,r){MSApp.execUnsafeLocalFunction(function(){return t(e,n,i,r)})}:t}(function(t,e){if(t.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in t)t.innerHTML=e;else{for(Xa=Xa||document.createElement("div"),Xa.innerHTML="<svg>"+e.valueOf().toString()+"</svg>",e=Xa.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}});function qo(t,e){if(e){var n=t.firstChild;if(n&&n===t.lastChild&&n.nodeType===3){n.nodeValue=e;return}}t.textContent=e}var Mo={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},eE=["Webkit","ms","Moz","O"];Object.keys(Mo).forEach(function(t){eE.forEach(function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),Mo[e]=Mo[t]})});function ib(t,e,n){return e==null||typeof e=="boolean"||e===""?"":n||typeof e!="number"||e===0||Mo.hasOwnProperty(t)&&Mo[t]?(""+e).trim():e+"px"}function rb(t,e){t=t.style;for(var n in e)if(e.hasOwnProperty(n)){var i=n.indexOf("--")===0,r=ib(n,e[n],i);n==="float"&&(n="cssFloat"),i?t.setProperty(n,r):t[n]=r}}var tE=je({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Kd(t,e){if(e){if(tE[t]&&(e.children!=null||e.dangerouslySetInnerHTML!=null))throw Error(R(137,t));if(e.dangerouslySetInnerHTML!=null){if(e.children!=null)throw Error(R(60));if(typeof e.dangerouslySetInnerHTML!="object"||!("__html"in e.dangerouslySetInnerHTML))throw Error(R(61))}if(e.style!=null&&typeof e.style!="object")throw Error(R(62))}}function Zd(t,e){if(t.indexOf("-")===-1)return typeof e.is=="string";switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Xd=null;function _h(t){return t=t.target||t.srcElement||window,t.correspondingUseElement&&(t=t.correspondingUseElement),t.nodeType===3?t.parentNode:t}var Yd=null,xs=null,ws=null;function Pm(t){if(t=Oa(t)){if(typeof Yd!="function")throw Error(R(280));var e=t.stateNode;e&&(e=qu(e),Yd(t.stateNode,t.type,e))}}function sb(t){xs?ws?ws.push(t):ws=[t]:xs=t}function ob(){if(xs){var t=xs,e=ws;if(ws=xs=null,Pm(t),e)for(t=0;t<e.length;t++)Pm(e[t])}}function ab(t,e){return t(e)}function lb(){}var Mc=!1;function ub(t,e,n){if(Mc)return t(e,n);Mc=!0;try{return ab(t,e,n)}finally{Mc=!1,(xs!==null||ws!==null)&&(lb(),ob())}}function Go(t,e){var n=t.stateNode;if(n===null)return null;var i=qu(n);if(i===null)return null;n=i[e];e:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(i=!i.disabled)||(t=t.type,i=!(t==="button"||t==="input"||t==="select"||t==="textarea")),t=!i;break e;default:t=!1}if(t)return null;if(n&&typeof n!="function")throw Error(R(231,e,typeof n));return n}var Jd=!1;if(mi)try{var lo={};Object.defineProperty(lo,"passive",{get:function(){Jd=!0}}),window.addEventListener("test",lo,lo),window.removeEventListener("test",lo,lo)}catch{Jd=!1}function nE(t,e,n,i,r,s,o,a,l){var u=Array.prototype.slice.call(arguments,3);try{e.apply(n,u)}catch(c){this.onError(c)}}var Do=!1,Bl=null,Ul=!1,ef=null,iE={onError:function(t){Do=!0,Bl=t}};function rE(t,e,n,i,r,s,o,a,l){Do=!1,Bl=null,nE.apply(iE,arguments)}function sE(t,e,n,i,r,s,o,a,l){if(rE.apply(this,arguments),Do){if(Do){var u=Bl;Do=!1,Bl=null}else throw Error(R(198));Ul||(Ul=!0,ef=u)}}function qr(t){var e=t,n=t;if(t.alternate)for(;e.return;)e=e.return;else{t=e;do e=t,e.flags&4098&&(n=e.return),t=e.return;while(t)}return e.tag===3?n:null}function cb(t){if(t.tag===13){var e=t.memoizedState;if(e===null&&(t=t.alternate,t!==null&&(e=t.memoizedState)),e!==null)return e.dehydrated}return null}function Em(t){if(qr(t)!==t)throw Error(R(188))}function oE(t){var e=t.alternate;if(!e){if(e=qr(t),e===null)throw Error(R(188));return e!==t?null:t}for(var n=t,i=e;;){var r=n.return;if(r===null)break;var s=r.alternate;if(s===null){if(i=r.return,i!==null){n=i;continue}break}if(r.child===s.child){for(s=r.child;s;){if(s===n)return Em(r),t;if(s===i)return Em(r),e;s=s.sibling}throw Error(R(188))}if(n.return!==i.return)n=r,i=s;else{for(var o=!1,a=r.child;a;){if(a===n){o=!0,n=r,i=s;break}if(a===i){o=!0,i=r,n=s;break}a=a.sibling}if(!o){for(a=s.child;a;){if(a===n){o=!0,n=s,i=r;break}if(a===i){o=!0,i=s,n=r;break}a=a.sibling}if(!o)throw Error(R(189))}}if(n.alternate!==i)throw Error(R(190))}if(n.tag!==3)throw Error(R(188));return n.stateNode.current===n?t:e}function db(t){return t=oE(t),t!==null?fb(t):null}function fb(t){if(t.tag===5||t.tag===6)return t;for(t=t.child;t!==null;){var e=fb(t);if(e!==null)return e;t=t.sibling}return null}var hb=Xt.unstable_scheduleCallback,Mm=Xt.unstable_cancelCallback,aE=Xt.unstable_shouldYield,lE=Xt.unstable_requestPaint,We=Xt.unstable_now,uE=Xt.unstable_getCurrentPriorityLevel,kh=Xt.unstable_ImmediatePriority,pb=Xt.unstable_UserBlockingPriority,$l=Xt.unstable_NormalPriority,cE=Xt.unstable_LowPriority,mb=Xt.unstable_IdlePriority,Uu=null,Hn=null;function dE(t){if(Hn&&typeof Hn.onCommitFiberRoot=="function")try{Hn.onCommitFiberRoot(Uu,t,void 0,(t.current.flags&128)===128)}catch{}}var Pn=Math.clz32?Math.clz32:pE,fE=Math.log,hE=Math.LN2;function pE(t){return t>>>=0,t===0?32:31-(fE(t)/hE|0)|0}var Ya=64,Ja=4194304;function _o(t){switch(t&-t){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return t&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return t}}function Wl(t,e){var n=t.pendingLanes;if(n===0)return 0;var i=0,r=t.suspendedLanes,s=t.pingedLanes,o=n&268435455;if(o!==0){var a=o&~r;a!==0?i=_o(a):(s&=o,s!==0&&(i=_o(s)))}else o=n&~r,o!==0?i=_o(o):s!==0&&(i=_o(s));if(i===0)return 0;if(e!==0&&e!==i&&!(e&r)&&(r=i&-i,s=e&-e,r>=s||r===16&&(s&4194240)!==0))return e;if(i&4&&(i|=n&16),e=t.entangledLanes,e!==0)for(t=t.entanglements,e&=i;0<e;)n=31-Pn(e),r=1<<n,i|=t[n],e&=~r;return i}function mE(t,e){switch(t){case 1:case 2:case 4:return e+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function gE(t,e){for(var n=t.suspendedLanes,i=t.pingedLanes,r=t.expirationTimes,s=t.pendingLanes;0<s;){var o=31-Pn(s),a=1<<o,l=r[o];l===-1?(!(a&n)||a&i)&&(r[o]=mE(a,e)):l<=e&&(t.expiredLanes|=a),s&=~a}}function tf(t){return t=t.pendingLanes&-1073741825,t!==0?t:t&1073741824?1073741824:0}function gb(){var t=Ya;return Ya<<=1,!(Ya&4194240)&&(Ya=64),t}function Dc(t){for(var e=[],n=0;31>n;n++)e.push(t);return e}function Fa(t,e,n){t.pendingLanes|=e,e!==536870912&&(t.suspendedLanes=0,t.pingedLanes=0),t=t.eventTimes,e=31-Pn(e),t[e]=n}function yE(t,e){var n=t.pendingLanes&~e;t.pendingLanes=e,t.suspendedLanes=0,t.pingedLanes=0,t.expiredLanes&=e,t.mutableReadLanes&=e,t.entangledLanes&=e,e=t.entanglements;var i=t.eventTimes;for(t=t.expirationTimes;0<n;){var r=31-Pn(n),s=1<<r;e[r]=0,i[r]=-1,t[r]=-1,n&=~s}}function Ch(t,e){var n=t.entangledLanes|=e;for(t=t.entanglements;n;){var i=31-Pn(n),r=1<<i;r&e|t[i]&e&&(t[i]|=e),n&=~r}}var we=0;function yb(t){return t&=-t,1<t?4<t?t&268435455?16:536870912:4:1}var vb,Th,xb,wb,bb,nf=!1,el=[],Ui=null,$i=null,Wi=null,Qo=new Map,Ko=new Map,Di=[],vE="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Dm(t,e){switch(t){case"focusin":case"focusout":Ui=null;break;case"dragenter":case"dragleave":$i=null;break;case"mouseover":case"mouseout":Wi=null;break;case"pointerover":case"pointerout":Qo.delete(e.pointerId);break;case"gotpointercapture":case"lostpointercapture":Ko.delete(e.pointerId)}}function uo(t,e,n,i,r,s){return t===null||t.nativeEvent!==s?(t={blockedOn:e,domEventName:n,eventSystemFlags:i,nativeEvent:s,targetContainers:[r]},e!==null&&(e=Oa(e),e!==null&&Th(e)),t):(t.eventSystemFlags|=i,e=t.targetContainers,r!==null&&e.indexOf(r)===-1&&e.push(r),t)}function xE(t,e,n,i,r){switch(e){case"focusin":return Ui=uo(Ui,t,e,n,i,r),!0;case"dragenter":return $i=uo($i,t,e,n,i,r),!0;case"mouseover":return Wi=uo(Wi,t,e,n,i,r),!0;case"pointerover":var s=r.pointerId;return Qo.set(s,uo(Qo.get(s)||null,t,e,n,i,r)),!0;case"gotpointercapture":return s=r.pointerId,Ko.set(s,uo(Ko.get(s)||null,t,e,n,i,r)),!0}return!1}function Sb(t){var e=wr(t.target);if(e!==null){var n=qr(e);if(n!==null){if(e=n.tag,e===13){if(e=cb(n),e!==null){t.blockedOn=e,bb(t.priority,function(){xb(n)});return}}else if(e===3&&n.stateNode.current.memoizedState.isDehydrated){t.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}t.blockedOn=null}function bl(t){if(t.blockedOn!==null)return!1;for(var e=t.targetContainers;0<e.length;){var n=rf(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(n===null){n=t.nativeEvent;var i=new n.constructor(n.type,n);Xd=i,n.target.dispatchEvent(i),Xd=null}else return e=Oa(n),e!==null&&Th(e),t.blockedOn=n,!1;e.shift()}return!0}function Nm(t,e,n){bl(t)&&n.delete(e)}function wE(){nf=!1,Ui!==null&&bl(Ui)&&(Ui=null),$i!==null&&bl($i)&&($i=null),Wi!==null&&bl(Wi)&&(Wi=null),Qo.forEach(Nm),Ko.forEach(Nm)}function co(t,e){t.blockedOn===e&&(t.blockedOn=null,nf||(nf=!0,Xt.unstable_scheduleCallback(Xt.unstable_NormalPriority,wE)))}function Zo(t){function e(r){return co(r,t)}if(0<el.length){co(el[0],t);for(var n=1;n<el.length;n++){var i=el[n];i.blockedOn===t&&(i.blockedOn=null)}}for(Ui!==null&&co(Ui,t),$i!==null&&co($i,t),Wi!==null&&co(Wi,t),Qo.forEach(e),Ko.forEach(e),n=0;n<Di.length;n++)i=Di[n],i.blockedOn===t&&(i.blockedOn=null);for(;0<Di.length&&(n=Di[0],n.blockedOn===null);)Sb(n),n.blockedOn===null&&Di.shift()}var bs=Si.ReactCurrentBatchConfig,Hl=!0;function bE(t,e,n,i){var r=we,s=bs.transition;bs.transition=null;try{we=1,Ph(t,e,n,i)}finally{we=r,bs.transition=s}}function SE(t,e,n,i){var r=we,s=bs.transition;bs.transition=null;try{we=4,Ph(t,e,n,i)}finally{we=r,bs.transition=s}}function Ph(t,e,n,i){if(Hl){var r=rf(t,e,n,i);if(r===null)Vc(t,e,i,ql,n),Dm(t,i);else if(xE(r,t,e,n,i))i.stopPropagation();else if(Dm(t,i),e&4&&-1<vE.indexOf(t)){for(;r!==null;){var s=Oa(r);if(s!==null&&vb(s),s=rf(t,e,n,i),s===null&&Vc(t,e,i,ql,n),s===r)break;r=s}r!==null&&i.stopPropagation()}else Vc(t,e,i,null,n)}}var ql=null;function rf(t,e,n,i){if(ql=null,t=_h(i),t=wr(t),t!==null)if(e=qr(t),e===null)t=null;else if(n=e.tag,n===13){if(t=cb(e),t!==null)return t;t=null}else if(n===3){if(e.stateNode.current.memoizedState.isDehydrated)return e.tag===3?e.stateNode.containerInfo:null;t=null}else e!==t&&(t=null);return ql=t,null}function _b(t){switch(t){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(uE()){case kh:return 1;case pb:return 4;case $l:case cE:return 16;case mb:return 536870912;default:return 16}default:return 16}}var zi=null,Eh=null,Sl=null;function kb(){if(Sl)return Sl;var t,e=Eh,n=e.length,i,r="value"in zi?zi.value:zi.textContent,s=r.length;for(t=0;t<n&&e[t]===r[t];t++);var o=n-t;for(i=1;i<=o&&e[n-i]===r[s-i];i++);return Sl=r.slice(t,1<i?1-i:void 0)}function _l(t){var e=t.keyCode;return"charCode"in t?(t=t.charCode,t===0&&e===13&&(t=13)):t=e,t===10&&(t=13),32<=t||t===13?t:0}function tl(){return!0}function Am(){return!1}function en(t){function e(n,i,r,s,o){this._reactName=n,this._targetInst=r,this.type=i,this.nativeEvent=s,this.target=o,this.currentTarget=null;for(var a in t)t.hasOwnProperty(a)&&(n=t[a],this[a]=n?n(s):s[a]);return this.isDefaultPrevented=(s.defaultPrevented!=null?s.defaultPrevented:s.returnValue===!1)?tl:Am,this.isPropagationStopped=Am,this}return je(e.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!="unknown"&&(n.returnValue=!1),this.isDefaultPrevented=tl)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!="unknown"&&(n.cancelBubble=!0),this.isPropagationStopped=tl)},persist:function(){},isPersistent:tl}),e}var to={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Mh=en(to),Ia=je({},to,{view:0,detail:0}),_E=en(Ia),Nc,Ac,fo,$u=je({},Ia,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Dh,button:0,buttons:0,relatedTarget:function(t){return t.relatedTarget===void 0?t.fromElement===t.srcElement?t.toElement:t.fromElement:t.relatedTarget},movementX:function(t){return"movementX"in t?t.movementX:(t!==fo&&(fo&&t.type==="mousemove"?(Nc=t.screenX-fo.screenX,Ac=t.screenY-fo.screenY):Ac=Nc=0,fo=t),Nc)},movementY:function(t){return"movementY"in t?t.movementY:Ac}}),Rm=en($u),kE=je({},$u,{dataTransfer:0}),CE=en(kE),TE=je({},Ia,{relatedTarget:0}),Rc=en(TE),PE=je({},to,{animationName:0,elapsedTime:0,pseudoElement:0}),EE=en(PE),ME=je({},to,{clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}}),DE=en(ME),NE=je({},to,{data:0}),Fm=en(NE),AE={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},RE={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},FE={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function IE(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):(t=FE[t])?!!e[t]:!1}function Dh(){return IE}var OE=je({},Ia,{key:function(t){if(t.key){var e=AE[t.key]||t.key;if(e!=="Unidentified")return e}return t.type==="keypress"?(t=_l(t),t===13?"Enter":String.fromCharCode(t)):t.type==="keydown"||t.type==="keyup"?RE[t.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Dh,charCode:function(t){return t.type==="keypress"?_l(t):0},keyCode:function(t){return t.type==="keydown"||t.type==="keyup"?t.keyCode:0},which:function(t){return t.type==="keypress"?_l(t):t.type==="keydown"||t.type==="keyup"?t.keyCode:0}}),jE=en(OE),LE=je({},$u,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Im=en(LE),zE=je({},Ia,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Dh}),VE=en(zE),BE=je({},to,{propertyName:0,elapsedTime:0,pseudoElement:0}),UE=en(BE),$E=je({},$u,{deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:0,deltaMode:0}),WE=en($E),HE=[9,13,27,32],Nh=mi&&"CompositionEvent"in window,No=null;mi&&"documentMode"in document&&(No=document.documentMode);var qE=mi&&"TextEvent"in window&&!No,Cb=mi&&(!Nh||No&&8<No&&11>=No),Om=" ",jm=!1;function Tb(t,e){switch(t){case"keyup":return HE.indexOf(e.keyCode)!==-1;case"keydown":return e.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Pb(t){return t=t.detail,typeof t=="object"&&"data"in t?t.data:null}var es=!1;function GE(t,e){switch(t){case"compositionend":return Pb(e);case"keypress":return e.which!==32?null:(jm=!0,Om);case"textInput":return t=e.data,t===Om&&jm?null:t;default:return null}}function QE(t,e){if(es)return t==="compositionend"||!Nh&&Tb(t,e)?(t=kb(),Sl=Eh=zi=null,es=!1,t):null;switch(t){case"paste":return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return Cb&&e.locale!=="ko"?null:e.data;default:return null}}var KE={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Lm(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e==="input"?!!KE[t.type]:e==="textarea"}function Eb(t,e,n,i){sb(i),e=Gl(e,"onChange"),0<e.length&&(n=new Mh("onChange","change",null,n,i),t.push({event:n,listeners:e}))}var Ao=null,Xo=null;function ZE(t){zb(t,0)}function Wu(t){var e=is(t);if(Y1(e))return t}function XE(t,e){if(t==="change")return e}var Mb=!1;if(mi){var Fc;if(mi){var Ic="oninput"in document;if(!Ic){var zm=document.createElement("div");zm.setAttribute("oninput","return;"),Ic=typeof zm.oninput=="function"}Fc=Ic}else Fc=!1;Mb=Fc&&(!document.documentMode||9<document.documentMode)}function Vm(){Ao&&(Ao.detachEvent("onpropertychange",Db),Xo=Ao=null)}function Db(t){if(t.propertyName==="value"&&Wu(Xo)){var e=[];Eb(e,Xo,t,_h(t)),ub(ZE,e)}}function YE(t,e,n){t==="focusin"?(Vm(),Ao=e,Xo=n,Ao.attachEvent("onpropertychange",Db)):t==="focusout"&&Vm()}function JE(t){if(t==="selectionchange"||t==="keyup"||t==="keydown")return Wu(Xo)}function eM(t,e){if(t==="click")return Wu(e)}function tM(t,e){if(t==="input"||t==="change")return Wu(e)}function nM(t,e){return t===e&&(t!==0||1/t===1/e)||t!==t&&e!==e}var Rn=typeof Object.is=="function"?Object.is:nM;function Yo(t,e){if(Rn(t,e))return!0;if(typeof t!="object"||t===null||typeof e!="object"||e===null)return!1;var n=Object.keys(t),i=Object.keys(e);if(n.length!==i.length)return!1;for(i=0;i<n.length;i++){var r=n[i];if(!zd.call(e,r)||!Rn(t[r],e[r]))return!1}return!0}function Bm(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function Um(t,e){var n=Bm(t);t=0;for(var i;n;){if(n.nodeType===3){if(i=t+n.textContent.length,t<=e&&i>=e)return{node:n,offset:e-t};t=i}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=Bm(n)}}function Nb(t,e){return t&&e?t===e?!0:t&&t.nodeType===3?!1:e&&e.nodeType===3?Nb(t,e.parentNode):"contains"in t?t.contains(e):t.compareDocumentPosition?!!(t.compareDocumentPosition(e)&16):!1:!1}function Ab(){for(var t=window,e=Vl();e instanceof t.HTMLIFrameElement;){try{var n=typeof e.contentWindow.location.href=="string"}catch{n=!1}if(n)t=e.contentWindow;else break;e=Vl(t.document)}return e}function Ah(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&(e==="input"&&(t.type==="text"||t.type==="search"||t.type==="tel"||t.type==="url"||t.type==="password")||e==="textarea"||t.contentEditable==="true")}function iM(t){var e=Ab(),n=t.focusedElem,i=t.selectionRange;if(e!==n&&n&&n.ownerDocument&&Nb(n.ownerDocument.documentElement,n)){if(i!==null&&Ah(n)){if(e=i.start,t=i.end,t===void 0&&(t=e),"selectionStart"in n)n.selectionStart=e,n.selectionEnd=Math.min(t,n.value.length);else if(t=(e=n.ownerDocument||document)&&e.defaultView||window,t.getSelection){t=t.getSelection();var r=n.textContent.length,s=Math.min(i.start,r);i=i.end===void 0?s:Math.min(i.end,r),!t.extend&&s>i&&(r=i,i=s,s=r),r=Um(n,s);var o=Um(n,i);r&&o&&(t.rangeCount!==1||t.anchorNode!==r.node||t.anchorOffset!==r.offset||t.focusNode!==o.node||t.focusOffset!==o.offset)&&(e=e.createRange(),e.setStart(r.node,r.offset),t.removeAllRanges(),s>i?(t.addRange(e),t.extend(o.node,o.offset)):(e.setEnd(o.node,o.offset),t.addRange(e)))}}for(e=[],t=n;t=t.parentNode;)t.nodeType===1&&e.push({element:t,left:t.scrollLeft,top:t.scrollTop});for(typeof n.focus=="function"&&n.focus(),n=0;n<e.length;n++)t=e[n],t.element.scrollLeft=t.left,t.element.scrollTop=t.top}}var rM=mi&&"documentMode"in document&&11>=document.documentMode,ts=null,sf=null,Ro=null,of=!1;function $m(t,e,n){var i=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;of||ts==null||ts!==Vl(i)||(i=ts,"selectionStart"in i&&Ah(i)?i={start:i.selectionStart,end:i.selectionEnd}:(i=(i.ownerDocument&&i.ownerDocument.defaultView||window).getSelection(),i={anchorNode:i.anchorNode,anchorOffset:i.anchorOffset,focusNode:i.focusNode,focusOffset:i.focusOffset}),Ro&&Yo(Ro,i)||(Ro=i,i=Gl(sf,"onSelect"),0<i.length&&(e=new Mh("onSelect","select",null,e,n),t.push({event:e,listeners:i}),e.target=ts)))}function nl(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit"+t]="webkit"+e,n["Moz"+t]="moz"+e,n}var ns={animationend:nl("Animation","AnimationEnd"),animationiteration:nl("Animation","AnimationIteration"),animationstart:nl("Animation","AnimationStart"),transitionend:nl("Transition","TransitionEnd")},Oc={},Rb={};mi&&(Rb=document.createElement("div").style,"AnimationEvent"in window||(delete ns.animationend.animation,delete ns.animationiteration.animation,delete ns.animationstart.animation),"TransitionEvent"in window||delete ns.transitionend.transition);function Hu(t){if(Oc[t])return Oc[t];if(!ns[t])return t;var e=ns[t],n;for(n in e)if(e.hasOwnProperty(n)&&n in Rb)return Oc[t]=e[n];return t}var Fb=Hu("animationend"),Ib=Hu("animationiteration"),Ob=Hu("animationstart"),jb=Hu("transitionend"),Lb=new Map,Wm="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function ar(t,e){Lb.set(t,e),Hr(e,[t])}for(var jc=0;jc<Wm.length;jc++){var Lc=Wm[jc],sM=Lc.toLowerCase(),oM=Lc[0].toUpperCase()+Lc.slice(1);ar(sM,"on"+oM)}ar(Fb,"onAnimationEnd");ar(Ib,"onAnimationIteration");ar(Ob,"onAnimationStart");ar("dblclick","onDoubleClick");ar("focusin","onFocus");ar("focusout","onBlur");ar(jb,"onTransitionEnd");js("onMouseEnter",["mouseout","mouseover"]);js("onMouseLeave",["mouseout","mouseover"]);js("onPointerEnter",["pointerout","pointerover"]);js("onPointerLeave",["pointerout","pointerover"]);Hr("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));Hr("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));Hr("onBeforeInput",["compositionend","keypress","textInput","paste"]);Hr("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));Hr("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));Hr("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var ko="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),aM=new Set("cancel close invalid load scroll toggle".split(" ").concat(ko));function Hm(t,e,n){var i=t.type||"unknown-event";t.currentTarget=n,sE(i,e,void 0,t),t.currentTarget=null}function zb(t,e){e=(e&4)!==0;for(var n=0;n<t.length;n++){var i=t[n],r=i.event;i=i.listeners;e:{var s=void 0;if(e)for(var o=i.length-1;0<=o;o--){var a=i[o],l=a.instance,u=a.currentTarget;if(a=a.listener,l!==s&&r.isPropagationStopped())break e;Hm(r,a,u),s=l}else for(o=0;o<i.length;o++){if(a=i[o],l=a.instance,u=a.currentTarget,a=a.listener,l!==s&&r.isPropagationStopped())break e;Hm(r,a,u),s=l}}}if(Ul)throw t=ef,Ul=!1,ef=null,t}function Te(t,e){var n=e[df];n===void 0&&(n=e[df]=new Set);var i=t+"__bubble";n.has(i)||(Vb(e,t,2,!1),n.add(i))}function zc(t,e,n){var i=0;e&&(i|=4),Vb(n,t,i,e)}var il="_reactListening"+Math.random().toString(36).slice(2);function Jo(t){if(!t[il]){t[il]=!0,G1.forEach(function(n){n!=="selectionchange"&&(aM.has(n)||zc(n,!1,t),zc(n,!0,t))});var e=t.nodeType===9?t:t.ownerDocument;e===null||e[il]||(e[il]=!0,zc("selectionchange",!1,e))}}function Vb(t,e,n,i){switch(_b(e)){case 1:var r=bE;break;case 4:r=SE;break;default:r=Ph}n=r.bind(null,e,n,t),r=void 0,!Jd||e!=="touchstart"&&e!=="touchmove"&&e!=="wheel"||(r=!0),i?r!==void 0?t.addEventListener(e,n,{capture:!0,passive:r}):t.addEventListener(e,n,!0):r!==void 0?t.addEventListener(e,n,{passive:r}):t.addEventListener(e,n,!1)}function Vc(t,e,n,i,r){var s=i;if(!(e&1)&&!(e&2)&&i!==null)e:for(;;){if(i===null)return;var o=i.tag;if(o===3||o===4){var a=i.stateNode.containerInfo;if(a===r||a.nodeType===8&&a.parentNode===r)break;if(o===4)for(o=i.return;o!==null;){var l=o.tag;if((l===3||l===4)&&(l=o.stateNode.containerInfo,l===r||l.nodeType===8&&l.parentNode===r))return;o=o.return}for(;a!==null;){if(o=wr(a),o===null)return;if(l=o.tag,l===5||l===6){i=s=o;continue e}a=a.parentNode}}i=i.return}ub(function(){var u=s,c=_h(n),d=[];e:{var f=Lb.get(t);if(f!==void 0){var h=Mh,v=t;switch(t){case"keypress":if(_l(n)===0)break e;case"keydown":case"keyup":h=jE;break;case"focusin":v="focus",h=Rc;break;case"focusout":v="blur",h=Rc;break;case"beforeblur":case"afterblur":h=Rc;break;case"click":if(n.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":h=Rm;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":h=CE;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":h=VE;break;case Fb:case Ib:case Ob:h=EE;break;case jb:h=UE;break;case"scroll":h=_E;break;case"wheel":h=WE;break;case"copy":case"cut":case"paste":h=DE;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":h=Im}var y=(e&4)!==0,w=!y&&t==="scroll",g=y?f!==null?f+"Capture":null:f;y=[];for(var m=u,x;m!==null;){x=m;var b=x.stateNode;if(x.tag===5&&b!==null&&(x=b,g!==null&&(b=Go(m,g),b!=null&&y.push(ea(m,b,x)))),w)break;m=m.return}0<y.length&&(f=new h(f,v,null,n,c),d.push({event:f,listeners:y}))}}if(!(e&7)){e:{if(f=t==="mouseover"||t==="pointerover",h=t==="mouseout"||t==="pointerout",f&&n!==Xd&&(v=n.relatedTarget||n.fromElement)&&(wr(v)||v[gi]))break e;if((h||f)&&(f=c.window===c?c:(f=c.ownerDocument)?f.defaultView||f.parentWindow:window,h?(v=n.relatedTarget||n.toElement,h=u,v=v?wr(v):null,v!==null&&(w=qr(v),v!==w||v.tag!==5&&v.tag!==6)&&(v=null)):(h=null,v=u),h!==v)){if(y=Rm,b="onMouseLeave",g="onMouseEnter",m="mouse",(t==="pointerout"||t==="pointerover")&&(y=Im,b="onPointerLeave",g="onPointerEnter",m="pointer"),w=h==null?f:is(h),x=v==null?f:is(v),f=new y(b,m+"leave",h,n,c),f.target=w,f.relatedTarget=x,b=null,wr(c)===u&&(y=new y(g,m+"enter",v,n,c),y.target=x,y.relatedTarget=w,b=y),w=b,h&&v)t:{for(y=h,g=v,m=0,x=y;x;x=Qr(x))m++;for(x=0,b=g;b;b=Qr(b))x++;for(;0<m-x;)y=Qr(y),m--;for(;0<x-m;)g=Qr(g),x--;for(;m--;){if(y===g||g!==null&&y===g.alternate)break t;y=Qr(y),g=Qr(g)}y=null}else y=null;h!==null&&qm(d,f,h,y,!1),v!==null&&w!==null&&qm(d,w,v,y,!0)}}e:{if(f=u?is(u):window,h=f.nodeName&&f.nodeName.toLowerCase(),h==="select"||h==="input"&&f.type==="file")var k=XE;else if(Lm(f))if(Mb)k=tM;else{k=JE;var E=YE}else(h=f.nodeName)&&h.toLowerCase()==="input"&&(f.type==="checkbox"||f.type==="radio")&&(k=eM);if(k&&(k=k(t,u))){Eb(d,k,n,c);break e}E&&E(t,f,u),t==="focusout"&&(E=f._wrapperState)&&E.controlled&&f.type==="number"&&qd(f,"number",f.value)}switch(E=u?is(u):window,t){case"focusin":(Lm(E)||E.contentEditable==="true")&&(ts=E,sf=u,Ro=null);break;case"focusout":Ro=sf=ts=null;break;case"mousedown":of=!0;break;case"contextmenu":case"mouseup":case"dragend":of=!1,$m(d,n,c);break;case"selectionchange":if(rM)break;case"keydown":case"keyup":$m(d,n,c)}var M;if(Nh)e:{switch(t){case"compositionstart":var P="onCompositionStart";break e;case"compositionend":P="onCompositionEnd";break e;case"compositionupdate":P="onCompositionUpdate";break e}P=void 0}else es?Tb(t,n)&&(P="onCompositionEnd"):t==="keydown"&&n.keyCode===229&&(P="onCompositionStart");P&&(Cb&&n.locale!=="ko"&&(es||P!=="onCompositionStart"?P==="onCompositionEnd"&&es&&(M=kb()):(zi=c,Eh="value"in zi?zi.value:zi.textContent,es=!0)),E=Gl(u,P),0<E.length&&(P=new Fm(P,t,null,n,c),d.push({event:P,listeners:E}),M?P.data=M:(M=Pb(n),M!==null&&(P.data=M)))),(M=qE?GE(t,n):QE(t,n))&&(u=Gl(u,"onBeforeInput"),0<u.length&&(c=new Fm("onBeforeInput","beforeinput",null,n,c),d.push({event:c,listeners:u}),c.data=M))}zb(d,e)})}function ea(t,e,n){return{instance:t,listener:e,currentTarget:n}}function Gl(t,e){for(var n=e+"Capture",i=[];t!==null;){var r=t,s=r.stateNode;r.tag===5&&s!==null&&(r=s,s=Go(t,n),s!=null&&i.unshift(ea(t,s,r)),s=Go(t,e),s!=null&&i.push(ea(t,s,r))),t=t.return}return i}function Qr(t){if(t===null)return null;do t=t.return;while(t&&t.tag!==5);return t||null}function qm(t,e,n,i,r){for(var s=e._reactName,o=[];n!==null&&n!==i;){var a=n,l=a.alternate,u=a.stateNode;if(l!==null&&l===i)break;a.tag===5&&u!==null&&(a=u,r?(l=Go(n,s),l!=null&&o.unshift(ea(n,l,a))):r||(l=Go(n,s),l!=null&&o.push(ea(n,l,a)))),n=n.return}o.length!==0&&t.push({event:e,listeners:o})}var lM=/\r\n?/g,uM=/\u0000|\uFFFD/g;function Gm(t){return(typeof t=="string"?t:""+t).replace(lM,`
`).replace(uM,"")}function rl(t,e,n){if(e=Gm(e),Gm(t)!==e&&n)throw Error(R(425))}function Ql(){}var af=null,lf=null;function uf(t,e){return t==="textarea"||t==="noscript"||typeof e.children=="string"||typeof e.children=="number"||typeof e.dangerouslySetInnerHTML=="object"&&e.dangerouslySetInnerHTML!==null&&e.dangerouslySetInnerHTML.__html!=null}var cf=typeof setTimeout=="function"?setTimeout:void 0,cM=typeof clearTimeout=="function"?clearTimeout:void 0,Qm=typeof Promise=="function"?Promise:void 0,dM=typeof queueMicrotask=="function"?queueMicrotask:typeof Qm<"u"?function(t){return Qm.resolve(null).then(t).catch(fM)}:cf;function fM(t){setTimeout(function(){throw t})}function Bc(t,e){var n=e,i=0;do{var r=n.nextSibling;if(t.removeChild(n),r&&r.nodeType===8)if(n=r.data,n==="/$"){if(i===0){t.removeChild(r),Zo(e);return}i--}else n!=="$"&&n!=="$?"&&n!=="$!"||i++;n=r}while(n);Zo(e)}function Hi(t){for(;t!=null;t=t.nextSibling){var e=t.nodeType;if(e===1||e===3)break;if(e===8){if(e=t.data,e==="$"||e==="$!"||e==="$?")break;if(e==="/$")return null}}return t}function Km(t){t=t.previousSibling;for(var e=0;t;){if(t.nodeType===8){var n=t.data;if(n==="$"||n==="$!"||n==="$?"){if(e===0)return t;e--}else n==="/$"&&e++}t=t.previousSibling}return null}var no=Math.random().toString(36).slice(2),$n="__reactFiber$"+no,ta="__reactProps$"+no,gi="__reactContainer$"+no,df="__reactEvents$"+no,hM="__reactListeners$"+no,pM="__reactHandles$"+no;function wr(t){var e=t[$n];if(e)return e;for(var n=t.parentNode;n;){if(e=n[gi]||n[$n]){if(n=e.alternate,e.child!==null||n!==null&&n.child!==null)for(t=Km(t);t!==null;){if(n=t[$n])return n;t=Km(t)}return e}t=n,n=t.parentNode}return null}function Oa(t){return t=t[$n]||t[gi],!t||t.tag!==5&&t.tag!==6&&t.tag!==13&&t.tag!==3?null:t}function is(t){if(t.tag===5||t.tag===6)return t.stateNode;throw Error(R(33))}function qu(t){return t[ta]||null}var ff=[],rs=-1;function lr(t){return{current:t}}function Pe(t){0>rs||(t.current=ff[rs],ff[rs]=null,rs--)}function _e(t,e){rs++,ff[rs]=t.current,t.current=e}var er={},St=lr(er),Lt=lr(!1),Fr=er;function Ls(t,e){var n=t.type.contextTypes;if(!n)return er;var i=t.stateNode;if(i&&i.__reactInternalMemoizedUnmaskedChildContext===e)return i.__reactInternalMemoizedMaskedChildContext;var r={},s;for(s in n)r[s]=e[s];return i&&(t=t.stateNode,t.__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=r),r}function zt(t){return t=t.childContextTypes,t!=null}function Kl(){Pe(Lt),Pe(St)}function Zm(t,e,n){if(St.current!==er)throw Error(R(168));_e(St,e),_e(Lt,n)}function Bb(t,e,n){var i=t.stateNode;if(e=e.childContextTypes,typeof i.getChildContext!="function")return n;i=i.getChildContext();for(var r in i)if(!(r in e))throw Error(R(108,YP(t)||"Unknown",r));return je({},n,i)}function Zl(t){return t=(t=t.stateNode)&&t.__reactInternalMemoizedMergedChildContext||er,Fr=St.current,_e(St,t),_e(Lt,Lt.current),!0}function Xm(t,e,n){var i=t.stateNode;if(!i)throw Error(R(169));n?(t=Bb(t,e,Fr),i.__reactInternalMemoizedMergedChildContext=t,Pe(Lt),Pe(St),_e(St,t)):Pe(Lt),_e(Lt,n)}var si=null,Gu=!1,Uc=!1;function Ub(t){si===null?si=[t]:si.push(t)}function mM(t){Gu=!0,Ub(t)}function ur(){if(!Uc&&si!==null){Uc=!0;var t=0,e=we;try{var n=si;for(we=1;t<n.length;t++){var i=n[t];do i=i(!0);while(i!==null)}si=null,Gu=!1}catch(r){throw si!==null&&(si=si.slice(t+1)),hb(kh,ur),r}finally{we=e,Uc=!1}}return null}var ss=[],os=0,Xl=null,Yl=0,ln=[],un=0,Ir=null,oi=1,ai="";function mr(t,e){ss[os++]=Yl,ss[os++]=Xl,Xl=t,Yl=e}function $b(t,e,n){ln[un++]=oi,ln[un++]=ai,ln[un++]=Ir,Ir=t;var i=oi;t=ai;var r=32-Pn(i)-1;i&=~(1<<r),n+=1;var s=32-Pn(e)+r;if(30<s){var o=r-r%5;s=(i&(1<<o)-1).toString(32),i>>=o,r-=o,oi=1<<32-Pn(e)+r|n<<r|i,ai=s+t}else oi=1<<s|n<<r|i,ai=t}function Rh(t){t.return!==null&&(mr(t,1),$b(t,1,0))}function Fh(t){for(;t===Xl;)Xl=ss[--os],ss[os]=null,Yl=ss[--os],ss[os]=null;for(;t===Ir;)Ir=ln[--un],ln[un]=null,ai=ln[--un],ln[un]=null,oi=ln[--un],ln[un]=null}var Gt=null,qt=null,De=!1,kn=null;function Wb(t,e){var n=cn(5,null,null,0);n.elementType="DELETED",n.stateNode=e,n.return=t,e=t.deletions,e===null?(t.deletions=[n],t.flags|=16):e.push(n)}function Ym(t,e){switch(t.tag){case 5:var n=t.type;return e=e.nodeType!==1||n.toLowerCase()!==e.nodeName.toLowerCase()?null:e,e!==null?(t.stateNode=e,Gt=t,qt=Hi(e.firstChild),!0):!1;case 6:return e=t.pendingProps===""||e.nodeType!==3?null:e,e!==null?(t.stateNode=e,Gt=t,qt=null,!0):!1;case 13:return e=e.nodeType!==8?null:e,e!==null?(n=Ir!==null?{id:oi,overflow:ai}:null,t.memoizedState={dehydrated:e,treeContext:n,retryLane:1073741824},n=cn(18,null,null,0),n.stateNode=e,n.return=t,t.child=n,Gt=t,qt=null,!0):!1;default:return!1}}function hf(t){return(t.mode&1)!==0&&(t.flags&128)===0}function pf(t){if(De){var e=qt;if(e){var n=e;if(!Ym(t,e)){if(hf(t))throw Error(R(418));e=Hi(n.nextSibling);var i=Gt;e&&Ym(t,e)?Wb(i,n):(t.flags=t.flags&-4097|2,De=!1,Gt=t)}}else{if(hf(t))throw Error(R(418));t.flags=t.flags&-4097|2,De=!1,Gt=t}}}function Jm(t){for(t=t.return;t!==null&&t.tag!==5&&t.tag!==3&&t.tag!==13;)t=t.return;Gt=t}function sl(t){if(t!==Gt)return!1;if(!De)return Jm(t),De=!0,!1;var e;if((e=t.tag!==3)&&!(e=t.tag!==5)&&(e=t.type,e=e!=="head"&&e!=="body"&&!uf(t.type,t.memoizedProps)),e&&(e=qt)){if(hf(t))throw Hb(),Error(R(418));for(;e;)Wb(t,e),e=Hi(e.nextSibling)}if(Jm(t),t.tag===13){if(t=t.memoizedState,t=t!==null?t.dehydrated:null,!t)throw Error(R(317));e:{for(t=t.nextSibling,e=0;t;){if(t.nodeType===8){var n=t.data;if(n==="/$"){if(e===0){qt=Hi(t.nextSibling);break e}e--}else n!=="$"&&n!=="$!"&&n!=="$?"||e++}t=t.nextSibling}qt=null}}else qt=Gt?Hi(t.stateNode.nextSibling):null;return!0}function Hb(){for(var t=qt;t;)t=Hi(t.nextSibling)}function zs(){qt=Gt=null,De=!1}function Ih(t){kn===null?kn=[t]:kn.push(t)}var gM=Si.ReactCurrentBatchConfig;function ho(t,e,n){if(t=n.ref,t!==null&&typeof t!="function"&&typeof t!="object"){if(n._owner){if(n=n._owner,n){if(n.tag!==1)throw Error(R(309));var i=n.stateNode}if(!i)throw Error(R(147,t));var r=i,s=""+t;return e!==null&&e.ref!==null&&typeof e.ref=="function"&&e.ref._stringRef===s?e.ref:(e=function(o){var a=r.refs;o===null?delete a[s]:a[s]=o},e._stringRef=s,e)}if(typeof t!="string")throw Error(R(284));if(!n._owner)throw Error(R(290,t))}return t}function ol(t,e){throw t=Object.prototype.toString.call(e),Error(R(31,t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t))}function eg(t){var e=t._init;return e(t._payload)}function qb(t){function e(g,m){if(t){var x=g.deletions;x===null?(g.deletions=[m],g.flags|=16):x.push(m)}}function n(g,m){if(!t)return null;for(;m!==null;)e(g,m),m=m.sibling;return null}function i(g,m){for(g=new Map;m!==null;)m.key!==null?g.set(m.key,m):g.set(m.index,m),m=m.sibling;return g}function r(g,m){return g=Ki(g,m),g.index=0,g.sibling=null,g}function s(g,m,x){return g.index=x,t?(x=g.alternate,x!==null?(x=x.index,x<m?(g.flags|=2,m):x):(g.flags|=2,m)):(g.flags|=1048576,m)}function o(g){return t&&g.alternate===null&&(g.flags|=2),g}function a(g,m,x,b){return m===null||m.tag!==6?(m=Kc(x,g.mode,b),m.return=g,m):(m=r(m,x),m.return=g,m)}function l(g,m,x,b){var k=x.type;return k===Jr?c(g,m,x.props.children,b,x.key):m!==null&&(m.elementType===k||typeof k=="object"&&k!==null&&k.$$typeof===Ei&&eg(k)===m.type)?(b=r(m,x.props),b.ref=ho(g,m,x),b.return=g,b):(b=Dl(x.type,x.key,x.props,null,g.mode,b),b.ref=ho(g,m,x),b.return=g,b)}function u(g,m,x,b){return m===null||m.tag!==4||m.stateNode.containerInfo!==x.containerInfo||m.stateNode.implementation!==x.implementation?(m=Zc(x,g.mode,b),m.return=g,m):(m=r(m,x.children||[]),m.return=g,m)}function c(g,m,x,b,k){return m===null||m.tag!==7?(m=Nr(x,g.mode,b,k),m.return=g,m):(m=r(m,x),m.return=g,m)}function d(g,m,x){if(typeof m=="string"&&m!==""||typeof m=="number")return m=Kc(""+m,g.mode,x),m.return=g,m;if(typeof m=="object"&&m!==null){switch(m.$$typeof){case Ka:return x=Dl(m.type,m.key,m.props,null,g.mode,x),x.ref=ho(g,null,m),x.return=g,x;case Yr:return m=Zc(m,g.mode,x),m.return=g,m;case Ei:var b=m._init;return d(g,b(m._payload),x)}if(So(m)||ao(m))return m=Nr(m,g.mode,x,null),m.return=g,m;ol(g,m)}return null}function f(g,m,x,b){var k=m!==null?m.key:null;if(typeof x=="string"&&x!==""||typeof x=="number")return k!==null?null:a(g,m,""+x,b);if(typeof x=="object"&&x!==null){switch(x.$$typeof){case Ka:return x.key===k?l(g,m,x,b):null;case Yr:return x.key===k?u(g,m,x,b):null;case Ei:return k=x._init,f(g,m,k(x._payload),b)}if(So(x)||ao(x))return k!==null?null:c(g,m,x,b,null);ol(g,x)}return null}function h(g,m,x,b,k){if(typeof b=="string"&&b!==""||typeof b=="number")return g=g.get(x)||null,a(m,g,""+b,k);if(typeof b=="object"&&b!==null){switch(b.$$typeof){case Ka:return g=g.get(b.key===null?x:b.key)||null,l(m,g,b,k);case Yr:return g=g.get(b.key===null?x:b.key)||null,u(m,g,b,k);case Ei:var E=b._init;return h(g,m,x,E(b._payload),k)}if(So(b)||ao(b))return g=g.get(x)||null,c(m,g,b,k,null);ol(m,b)}return null}function v(g,m,x,b){for(var k=null,E=null,M=m,P=m=0,L=null;M!==null&&P<x.length;P++){M.index>P?(L=M,M=null):L=M.sibling;var z=f(g,M,x[P],b);if(z===null){M===null&&(M=L);break}t&&M&&z.alternate===null&&e(g,M),m=s(z,m,P),E===null?k=z:E.sibling=z,E=z,M=L}if(P===x.length)return n(g,M),De&&mr(g,P),k;if(M===null){for(;P<x.length;P++)M=d(g,x[P],b),M!==null&&(m=s(M,m,P),E===null?k=M:E.sibling=M,E=M);return De&&mr(g,P),k}for(M=i(g,M);P<x.length;P++)L=h(M,g,P,x[P],b),L!==null&&(t&&L.alternate!==null&&M.delete(L.key===null?P:L.key),m=s(L,m,P),E===null?k=L:E.sibling=L,E=L);return t&&M.forEach(function(ce){return e(g,ce)}),De&&mr(g,P),k}function y(g,m,x,b){var k=ao(x);if(typeof k!="function")throw Error(R(150));if(x=k.call(x),x==null)throw Error(R(151));for(var E=k=null,M=m,P=m=0,L=null,z=x.next();M!==null&&!z.done;P++,z=x.next()){M.index>P?(L=M,M=null):L=M.sibling;var ce=f(g,M,z.value,b);if(ce===null){M===null&&(M=L);break}t&&M&&ce.alternate===null&&e(g,M),m=s(ce,m,P),E===null?k=ce:E.sibling=ce,E=ce,M=L}if(z.done)return n(g,M),De&&mr(g,P),k;if(M===null){for(;!z.done;P++,z=x.next())z=d(g,z.value,b),z!==null&&(m=s(z,m,P),E===null?k=z:E.sibling=z,E=z);return De&&mr(g,P),k}for(M=i(g,M);!z.done;P++,z=x.next())z=h(M,g,P,z.value,b),z!==null&&(t&&z.alternate!==null&&M.delete(z.key===null?P:z.key),m=s(z,m,P),E===null?k=z:E.sibling=z,E=z);return t&&M.forEach(function(j){return e(g,j)}),De&&mr(g,P),k}function w(g,m,x,b){if(typeof x=="object"&&x!==null&&x.type===Jr&&x.key===null&&(x=x.props.children),typeof x=="object"&&x!==null){switch(x.$$typeof){case Ka:e:{for(var k=x.key,E=m;E!==null;){if(E.key===k){if(k=x.type,k===Jr){if(E.tag===7){n(g,E.sibling),m=r(E,x.props.children),m.return=g,g=m;break e}}else if(E.elementType===k||typeof k=="object"&&k!==null&&k.$$typeof===Ei&&eg(k)===E.type){n(g,E.sibling),m=r(E,x.props),m.ref=ho(g,E,x),m.return=g,g=m;break e}n(g,E);break}else e(g,E);E=E.sibling}x.type===Jr?(m=Nr(x.props.children,g.mode,b,x.key),m.return=g,g=m):(b=Dl(x.type,x.key,x.props,null,g.mode,b),b.ref=ho(g,m,x),b.return=g,g=b)}return o(g);case Yr:e:{for(E=x.key;m!==null;){if(m.key===E)if(m.tag===4&&m.stateNode.containerInfo===x.containerInfo&&m.stateNode.implementation===x.implementation){n(g,m.sibling),m=r(m,x.children||[]),m.return=g,g=m;break e}else{n(g,m);break}else e(g,m);m=m.sibling}m=Zc(x,g.mode,b),m.return=g,g=m}return o(g);case Ei:return E=x._init,w(g,m,E(x._payload),b)}if(So(x))return v(g,m,x,b);if(ao(x))return y(g,m,x,b);ol(g,x)}return typeof x=="string"&&x!==""||typeof x=="number"?(x=""+x,m!==null&&m.tag===6?(n(g,m.sibling),m=r(m,x),m.return=g,g=m):(n(g,m),m=Kc(x,g.mode,b),m.return=g,g=m),o(g)):n(g,m)}return w}var Vs=qb(!0),Gb=qb(!1),Jl=lr(null),eu=null,as=null,Oh=null;function jh(){Oh=as=eu=null}function Lh(t){var e=Jl.current;Pe(Jl),t._currentValue=e}function mf(t,e,n){for(;t!==null;){var i=t.alternate;if((t.childLanes&e)!==e?(t.childLanes|=e,i!==null&&(i.childLanes|=e)):i!==null&&(i.childLanes&e)!==e&&(i.childLanes|=e),t===n)break;t=t.return}}function Ss(t,e){eu=t,Oh=as=null,t=t.dependencies,t!==null&&t.firstContext!==null&&(t.lanes&e&&(Ot=!0),t.firstContext=null)}function fn(t){var e=t._currentValue;if(Oh!==t)if(t={context:t,memoizedValue:e,next:null},as===null){if(eu===null)throw Error(R(308));as=t,eu.dependencies={lanes:0,firstContext:t}}else as=as.next=t;return e}var br=null;function zh(t){br===null?br=[t]:br.push(t)}function Qb(t,e,n,i){var r=e.interleaved;return r===null?(n.next=n,zh(e)):(n.next=r.next,r.next=n),e.interleaved=n,yi(t,i)}function yi(t,e){t.lanes|=e;var n=t.alternate;for(n!==null&&(n.lanes|=e),n=t,t=t.return;t!==null;)t.childLanes|=e,n=t.alternate,n!==null&&(n.childLanes|=e),n=t,t=t.return;return n.tag===3?n.stateNode:null}var Mi=!1;function Vh(t){t.updateQueue={baseState:t.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Kb(t,e){t=t.updateQueue,e.updateQueue===t&&(e.updateQueue={baseState:t.baseState,firstBaseUpdate:t.firstBaseUpdate,lastBaseUpdate:t.lastBaseUpdate,shared:t.shared,effects:t.effects})}function ci(t,e){return{eventTime:t,lane:e,tag:0,payload:null,callback:null,next:null}}function qi(t,e,n){var i=t.updateQueue;if(i===null)return null;if(i=i.shared,ye&2){var r=i.pending;return r===null?e.next=e:(e.next=r.next,r.next=e),i.pending=e,yi(t,n)}return r=i.interleaved,r===null?(e.next=e,zh(i)):(e.next=r.next,r.next=e),i.interleaved=e,yi(t,n)}function kl(t,e,n){if(e=e.updateQueue,e!==null&&(e=e.shared,(n&4194240)!==0)){var i=e.lanes;i&=t.pendingLanes,n|=i,e.lanes=n,Ch(t,n)}}function tg(t,e){var n=t.updateQueue,i=t.alternate;if(i!==null&&(i=i.updateQueue,n===i)){var r=null,s=null;if(n=n.firstBaseUpdate,n!==null){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};s===null?r=s=o:s=s.next=o,n=n.next}while(n!==null);s===null?r=s=e:s=s.next=e}else r=s=e;n={baseState:i.baseState,firstBaseUpdate:r,lastBaseUpdate:s,shared:i.shared,effects:i.effects},t.updateQueue=n;return}t=n.lastBaseUpdate,t===null?n.firstBaseUpdate=e:t.next=e,n.lastBaseUpdate=e}function tu(t,e,n,i){var r=t.updateQueue;Mi=!1;var s=r.firstBaseUpdate,o=r.lastBaseUpdate,a=r.shared.pending;if(a!==null){r.shared.pending=null;var l=a,u=l.next;l.next=null,o===null?s=u:o.next=u,o=l;var c=t.alternate;c!==null&&(c=c.updateQueue,a=c.lastBaseUpdate,a!==o&&(a===null?c.firstBaseUpdate=u:a.next=u,c.lastBaseUpdate=l))}if(s!==null){var d=r.baseState;o=0,c=u=l=null,a=s;do{var f=a.lane,h=a.eventTime;if((i&f)===f){c!==null&&(c=c.next={eventTime:h,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var v=t,y=a;switch(f=e,h=n,y.tag){case 1:if(v=y.payload,typeof v=="function"){d=v.call(h,d,f);break e}d=v;break e;case 3:v.flags=v.flags&-65537|128;case 0:if(v=y.payload,f=typeof v=="function"?v.call(h,d,f):v,f==null)break e;d=je({},d,f);break e;case 2:Mi=!0}}a.callback!==null&&a.lane!==0&&(t.flags|=64,f=r.effects,f===null?r.effects=[a]:f.push(a))}else h={eventTime:h,lane:f,tag:a.tag,payload:a.payload,callback:a.callback,next:null},c===null?(u=c=h,l=d):c=c.next=h,o|=f;if(a=a.next,a===null){if(a=r.shared.pending,a===null)break;f=a,a=f.next,f.next=null,r.lastBaseUpdate=f,r.shared.pending=null}}while(!0);if(c===null&&(l=d),r.baseState=l,r.firstBaseUpdate=u,r.lastBaseUpdate=c,e=r.shared.interleaved,e!==null){r=e;do o|=r.lane,r=r.next;while(r!==e)}else s===null&&(r.shared.lanes=0);jr|=o,t.lanes=o,t.memoizedState=d}}function ng(t,e,n){if(t=e.effects,e.effects=null,t!==null)for(e=0;e<t.length;e++){var i=t[e],r=i.callback;if(r!==null){if(i.callback=null,i=n,typeof r!="function")throw Error(R(191,r));r.call(i)}}}var ja={},qn=lr(ja),na=lr(ja),ia=lr(ja);function Sr(t){if(t===ja)throw Error(R(174));return t}function Bh(t,e){switch(_e(ia,e),_e(na,t),_e(qn,ja),t=e.nodeType,t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Qd(null,"");break;default:t=t===8?e.parentNode:e,e=t.namespaceURI||null,t=t.tagName,e=Qd(e,t)}Pe(qn),_e(qn,e)}function Bs(){Pe(qn),Pe(na),Pe(ia)}function Zb(t){Sr(ia.current);var e=Sr(qn.current),n=Qd(e,t.type);e!==n&&(_e(na,t),_e(qn,n))}function Uh(t){na.current===t&&(Pe(qn),Pe(na))}var Fe=lr(0);function nu(t){for(var e=t;e!==null;){if(e.tag===13){var n=e.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data==="$?"||n.data==="$!"))return e}else if(e.tag===19&&e.memoizedProps.revealOrder!==void 0){if(e.flags&128)return e}else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break;for(;e.sibling===null;){if(e.return===null||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}return null}var $c=[];function $h(){for(var t=0;t<$c.length;t++)$c[t]._workInProgressVersionPrimary=null;$c.length=0}var Cl=Si.ReactCurrentDispatcher,Wc=Si.ReactCurrentBatchConfig,Or=0,Oe=null,Ke=null,et=null,iu=!1,Fo=!1,ra=0,yM=0;function ft(){throw Error(R(321))}function Wh(t,e){if(e===null)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(!Rn(t[n],e[n]))return!1;return!0}function Hh(t,e,n,i,r,s){if(Or=s,Oe=e,e.memoizedState=null,e.updateQueue=null,e.lanes=0,Cl.current=t===null||t.memoizedState===null?bM:SM,t=n(i,r),Fo){s=0;do{if(Fo=!1,ra=0,25<=s)throw Error(R(301));s+=1,et=Ke=null,e.updateQueue=null,Cl.current=_M,t=n(i,r)}while(Fo)}if(Cl.current=ru,e=Ke!==null&&Ke.next!==null,Or=0,et=Ke=Oe=null,iu=!1,e)throw Error(R(300));return t}function qh(){var t=ra!==0;return ra=0,t}function Ln(){var t={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return et===null?Oe.memoizedState=et=t:et=et.next=t,et}function hn(){if(Ke===null){var t=Oe.alternate;t=t!==null?t.memoizedState:null}else t=Ke.next;var e=et===null?Oe.memoizedState:et.next;if(e!==null)et=e,Ke=t;else{if(t===null)throw Error(R(310));Ke=t,t={memoizedState:Ke.memoizedState,baseState:Ke.baseState,baseQueue:Ke.baseQueue,queue:Ke.queue,next:null},et===null?Oe.memoizedState=et=t:et=et.next=t}return et}function sa(t,e){return typeof e=="function"?e(t):e}function Hc(t){var e=hn(),n=e.queue;if(n===null)throw Error(R(311));n.lastRenderedReducer=t;var i=Ke,r=i.baseQueue,s=n.pending;if(s!==null){if(r!==null){var o=r.next;r.next=s.next,s.next=o}i.baseQueue=r=s,n.pending=null}if(r!==null){s=r.next,i=i.baseState;var a=o=null,l=null,u=s;do{var c=u.lane;if((Or&c)===c)l!==null&&(l=l.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),i=u.hasEagerState?u.eagerState:t(i,u.action);else{var d={lane:c,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};l===null?(a=l=d,o=i):l=l.next=d,Oe.lanes|=c,jr|=c}u=u.next}while(u!==null&&u!==s);l===null?o=i:l.next=a,Rn(i,e.memoizedState)||(Ot=!0),e.memoizedState=i,e.baseState=o,e.baseQueue=l,n.lastRenderedState=i}if(t=n.interleaved,t!==null){r=t;do s=r.lane,Oe.lanes|=s,jr|=s,r=r.next;while(r!==t)}else r===null&&(n.lanes=0);return[e.memoizedState,n.dispatch]}function qc(t){var e=hn(),n=e.queue;if(n===null)throw Error(R(311));n.lastRenderedReducer=t;var i=n.dispatch,r=n.pending,s=e.memoizedState;if(r!==null){n.pending=null;var o=r=r.next;do s=t(s,o.action),o=o.next;while(o!==r);Rn(s,e.memoizedState)||(Ot=!0),e.memoizedState=s,e.baseQueue===null&&(e.baseState=s),n.lastRenderedState=s}return[s,i]}function Xb(){}function Yb(t,e){var n=Oe,i=hn(),r=e(),s=!Rn(i.memoizedState,r);if(s&&(i.memoizedState=r,Ot=!0),i=i.queue,Gh(tS.bind(null,n,i,t),[t]),i.getSnapshot!==e||s||et!==null&&et.memoizedState.tag&1){if(n.flags|=2048,oa(9,eS.bind(null,n,i,r,e),void 0,null),tt===null)throw Error(R(349));Or&30||Jb(n,e,r)}return r}function Jb(t,e,n){t.flags|=16384,t={getSnapshot:e,value:n},e=Oe.updateQueue,e===null?(e={lastEffect:null,stores:null},Oe.updateQueue=e,e.stores=[t]):(n=e.stores,n===null?e.stores=[t]:n.push(t))}function eS(t,e,n,i){e.value=n,e.getSnapshot=i,nS(e)&&iS(t)}function tS(t,e,n){return n(function(){nS(e)&&iS(t)})}function nS(t){var e=t.getSnapshot;t=t.value;try{var n=e();return!Rn(t,n)}catch{return!0}}function iS(t){var e=yi(t,1);e!==null&&En(e,t,1,-1)}function ig(t){var e=Ln();return typeof t=="function"&&(t=t()),e.memoizedState=e.baseState=t,t={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:sa,lastRenderedState:t},e.queue=t,t=t.dispatch=wM.bind(null,Oe,t),[e.memoizedState,t]}function oa(t,e,n,i){return t={tag:t,create:e,destroy:n,deps:i,next:null},e=Oe.updateQueue,e===null?(e={lastEffect:null,stores:null},Oe.updateQueue=e,e.lastEffect=t.next=t):(n=e.lastEffect,n===null?e.lastEffect=t.next=t:(i=n.next,n.next=t,t.next=i,e.lastEffect=t)),t}function rS(){return hn().memoizedState}function Tl(t,e,n,i){var r=Ln();Oe.flags|=t,r.memoizedState=oa(1|e,n,void 0,i===void 0?null:i)}function Qu(t,e,n,i){var r=hn();i=i===void 0?null:i;var s=void 0;if(Ke!==null){var o=Ke.memoizedState;if(s=o.destroy,i!==null&&Wh(i,o.deps)){r.memoizedState=oa(e,n,s,i);return}}Oe.flags|=t,r.memoizedState=oa(1|e,n,s,i)}function rg(t,e){return Tl(8390656,8,t,e)}function Gh(t,e){return Qu(2048,8,t,e)}function sS(t,e){return Qu(4,2,t,e)}function oS(t,e){return Qu(4,4,t,e)}function aS(t,e){if(typeof e=="function")return t=t(),e(t),function(){e(null)};if(e!=null)return t=t(),e.current=t,function(){e.current=null}}function lS(t,e,n){return n=n!=null?n.concat([t]):null,Qu(4,4,aS.bind(null,e,t),n)}function Qh(){}function uS(t,e){var n=hn();e=e===void 0?null:e;var i=n.memoizedState;return i!==null&&e!==null&&Wh(e,i[1])?i[0]:(n.memoizedState=[t,e],t)}function cS(t,e){var n=hn();e=e===void 0?null:e;var i=n.memoizedState;return i!==null&&e!==null&&Wh(e,i[1])?i[0]:(t=t(),n.memoizedState=[t,e],t)}function dS(t,e,n){return Or&21?(Rn(n,e)||(n=gb(),Oe.lanes|=n,jr|=n,t.baseState=!0),e):(t.baseState&&(t.baseState=!1,Ot=!0),t.memoizedState=n)}function vM(t,e){var n=we;we=n!==0&&4>n?n:4,t(!0);var i=Wc.transition;Wc.transition={};try{t(!1),e()}finally{we=n,Wc.transition=i}}function fS(){return hn().memoizedState}function xM(t,e,n){var i=Qi(t);if(n={lane:i,action:n,hasEagerState:!1,eagerState:null,next:null},hS(t))pS(e,n);else if(n=Qb(t,e,n,i),n!==null){var r=Mt();En(n,t,i,r),mS(n,e,i)}}function wM(t,e,n){var i=Qi(t),r={lane:i,action:n,hasEagerState:!1,eagerState:null,next:null};if(hS(t))pS(e,r);else{var s=t.alternate;if(t.lanes===0&&(s===null||s.lanes===0)&&(s=e.lastRenderedReducer,s!==null))try{var o=e.lastRenderedState,a=s(o,n);if(r.hasEagerState=!0,r.eagerState=a,Rn(a,o)){var l=e.interleaved;l===null?(r.next=r,zh(e)):(r.next=l.next,l.next=r),e.interleaved=r;return}}catch{}finally{}n=Qb(t,e,r,i),n!==null&&(r=Mt(),En(n,t,i,r),mS(n,e,i))}}function hS(t){var e=t.alternate;return t===Oe||e!==null&&e===Oe}function pS(t,e){Fo=iu=!0;var n=t.pending;n===null?e.next=e:(e.next=n.next,n.next=e),t.pending=e}function mS(t,e,n){if(n&4194240){var i=e.lanes;i&=t.pendingLanes,n|=i,e.lanes=n,Ch(t,n)}}var ru={readContext:fn,useCallback:ft,useContext:ft,useEffect:ft,useImperativeHandle:ft,useInsertionEffect:ft,useLayoutEffect:ft,useMemo:ft,useReducer:ft,useRef:ft,useState:ft,useDebugValue:ft,useDeferredValue:ft,useTransition:ft,useMutableSource:ft,useSyncExternalStore:ft,useId:ft,unstable_isNewReconciler:!1},bM={readContext:fn,useCallback:function(t,e){return Ln().memoizedState=[t,e===void 0?null:e],t},useContext:fn,useEffect:rg,useImperativeHandle:function(t,e,n){return n=n!=null?n.concat([t]):null,Tl(4194308,4,aS.bind(null,e,t),n)},useLayoutEffect:function(t,e){return Tl(4194308,4,t,e)},useInsertionEffect:function(t,e){return Tl(4,2,t,e)},useMemo:function(t,e){var n=Ln();return e=e===void 0?null:e,t=t(),n.memoizedState=[t,e],t},useReducer:function(t,e,n){var i=Ln();return e=n!==void 0?n(e):e,i.memoizedState=i.baseState=e,t={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:t,lastRenderedState:e},i.queue=t,t=t.dispatch=xM.bind(null,Oe,t),[i.memoizedState,t]},useRef:function(t){var e=Ln();return t={current:t},e.memoizedState=t},useState:ig,useDebugValue:Qh,useDeferredValue:function(t){return Ln().memoizedState=t},useTransition:function(){var t=ig(!1),e=t[0];return t=vM.bind(null,t[1]),Ln().memoizedState=t,[e,t]},useMutableSource:function(){},useSyncExternalStore:function(t,e,n){var i=Oe,r=Ln();if(De){if(n===void 0)throw Error(R(407));n=n()}else{if(n=e(),tt===null)throw Error(R(349));Or&30||Jb(i,e,n)}r.memoizedState=n;var s={value:n,getSnapshot:e};return r.queue=s,rg(tS.bind(null,i,s,t),[t]),i.flags|=2048,oa(9,eS.bind(null,i,s,n,e),void 0,null),n},useId:function(){var t=Ln(),e=tt.identifierPrefix;if(De){var n=ai,i=oi;n=(i&~(1<<32-Pn(i)-1)).toString(32)+n,e=":"+e+"R"+n,n=ra++,0<n&&(e+="H"+n.toString(32)),e+=":"}else n=yM++,e=":"+e+"r"+n.toString(32)+":";return t.memoizedState=e},unstable_isNewReconciler:!1},SM={readContext:fn,useCallback:uS,useContext:fn,useEffect:Gh,useImperativeHandle:lS,useInsertionEffect:sS,useLayoutEffect:oS,useMemo:cS,useReducer:Hc,useRef:rS,useState:function(){return Hc(sa)},useDebugValue:Qh,useDeferredValue:function(t){var e=hn();return dS(e,Ke.memoizedState,t)},useTransition:function(){var t=Hc(sa)[0],e=hn().memoizedState;return[t,e]},useMutableSource:Xb,useSyncExternalStore:Yb,useId:fS,unstable_isNewReconciler:!1},_M={readContext:fn,useCallback:uS,useContext:fn,useEffect:Gh,useImperativeHandle:lS,useInsertionEffect:sS,useLayoutEffect:oS,useMemo:cS,useReducer:qc,useRef:rS,useState:function(){return qc(sa)},useDebugValue:Qh,useDeferredValue:function(t){var e=hn();return Ke===null?e.memoizedState=t:dS(e,Ke.memoizedState,t)},useTransition:function(){var t=qc(sa)[0],e=hn().memoizedState;return[t,e]},useMutableSource:Xb,useSyncExternalStore:Yb,useId:fS,unstable_isNewReconciler:!1};function wn(t,e){if(t&&t.defaultProps){e=je({},e),t=t.defaultProps;for(var n in t)e[n]===void 0&&(e[n]=t[n]);return e}return e}function gf(t,e,n,i){e=t.memoizedState,n=n(i,e),n=n==null?e:je({},e,n),t.memoizedState=n,t.lanes===0&&(t.updateQueue.baseState=n)}var Ku={isMounted:function(t){return(t=t._reactInternals)?qr(t)===t:!1},enqueueSetState:function(t,e,n){t=t._reactInternals;var i=Mt(),r=Qi(t),s=ci(i,r);s.payload=e,n!=null&&(s.callback=n),e=qi(t,s,r),e!==null&&(En(e,t,r,i),kl(e,t,r))},enqueueReplaceState:function(t,e,n){t=t._reactInternals;var i=Mt(),r=Qi(t),s=ci(i,r);s.tag=1,s.payload=e,n!=null&&(s.callback=n),e=qi(t,s,r),e!==null&&(En(e,t,r,i),kl(e,t,r))},enqueueForceUpdate:function(t,e){t=t._reactInternals;var n=Mt(),i=Qi(t),r=ci(n,i);r.tag=2,e!=null&&(r.callback=e),e=qi(t,r,i),e!==null&&(En(e,t,i,n),kl(e,t,i))}};function sg(t,e,n,i,r,s,o){return t=t.stateNode,typeof t.shouldComponentUpdate=="function"?t.shouldComponentUpdate(i,s,o):e.prototype&&e.prototype.isPureReactComponent?!Yo(n,i)||!Yo(r,s):!0}function gS(t,e,n){var i=!1,r=er,s=e.contextType;return typeof s=="object"&&s!==null?s=fn(s):(r=zt(e)?Fr:St.current,i=e.contextTypes,s=(i=i!=null)?Ls(t,r):er),e=new e(n,s),t.memoizedState=e.state!==null&&e.state!==void 0?e.state:null,e.updater=Ku,t.stateNode=e,e._reactInternals=t,i&&(t=t.stateNode,t.__reactInternalMemoizedUnmaskedChildContext=r,t.__reactInternalMemoizedMaskedChildContext=s),e}function og(t,e,n,i){t=e.state,typeof e.componentWillReceiveProps=="function"&&e.componentWillReceiveProps(n,i),typeof e.UNSAFE_componentWillReceiveProps=="function"&&e.UNSAFE_componentWillReceiveProps(n,i),e.state!==t&&Ku.enqueueReplaceState(e,e.state,null)}function yf(t,e,n,i){var r=t.stateNode;r.props=n,r.state=t.memoizedState,r.refs={},Vh(t);var s=e.contextType;typeof s=="object"&&s!==null?r.context=fn(s):(s=zt(e)?Fr:St.current,r.context=Ls(t,s)),r.state=t.memoizedState,s=e.getDerivedStateFromProps,typeof s=="function"&&(gf(t,e,s,n),r.state=t.memoizedState),typeof e.getDerivedStateFromProps=="function"||typeof r.getSnapshotBeforeUpdate=="function"||typeof r.UNSAFE_componentWillMount!="function"&&typeof r.componentWillMount!="function"||(e=r.state,typeof r.componentWillMount=="function"&&r.componentWillMount(),typeof r.UNSAFE_componentWillMount=="function"&&r.UNSAFE_componentWillMount(),e!==r.state&&Ku.enqueueReplaceState(r,r.state,null),tu(t,n,r,i),r.state=t.memoizedState),typeof r.componentDidMount=="function"&&(t.flags|=4194308)}function Us(t,e){try{var n="",i=e;do n+=XP(i),i=i.return;while(i);var r=n}catch(s){r=`
Error generating stack: `+s.message+`
`+s.stack}return{value:t,source:e,stack:r,digest:null}}function Gc(t,e,n){return{value:t,source:null,stack:n??null,digest:e??null}}function vf(t,e){try{console.error(e.value)}catch(n){setTimeout(function(){throw n})}}var kM=typeof WeakMap=="function"?WeakMap:Map;function yS(t,e,n){n=ci(-1,n),n.tag=3,n.payload={element:null};var i=e.value;return n.callback=function(){ou||(ou=!0,Ef=i),vf(t,e)},n}function vS(t,e,n){n=ci(-1,n),n.tag=3;var i=t.type.getDerivedStateFromError;if(typeof i=="function"){var r=e.value;n.payload=function(){return i(r)},n.callback=function(){vf(t,e)}}var s=t.stateNode;return s!==null&&typeof s.componentDidCatch=="function"&&(n.callback=function(){vf(t,e),typeof i!="function"&&(Gi===null?Gi=new Set([this]):Gi.add(this));var o=e.stack;this.componentDidCatch(e.value,{componentStack:o!==null?o:""})}),n}function ag(t,e,n){var i=t.pingCache;if(i===null){i=t.pingCache=new kM;var r=new Set;i.set(e,r)}else r=i.get(e),r===void 0&&(r=new Set,i.set(e,r));r.has(n)||(r.add(n),t=LM.bind(null,t,e,n),e.then(t,t))}function lg(t){do{var e;if((e=t.tag===13)&&(e=t.memoizedState,e=e!==null?e.dehydrated!==null:!0),e)return t;t=t.return}while(t!==null);return null}function ug(t,e,n,i,r){return t.mode&1?(t.flags|=65536,t.lanes=r,t):(t===e?t.flags|=65536:(t.flags|=128,n.flags|=131072,n.flags&=-52805,n.tag===1&&(n.alternate===null?n.tag=17:(e=ci(-1,1),e.tag=2,qi(n,e,1))),n.lanes|=1),t)}var CM=Si.ReactCurrentOwner,Ot=!1;function Ct(t,e,n,i){e.child=t===null?Gb(e,null,n,i):Vs(e,t.child,n,i)}function cg(t,e,n,i,r){n=n.render;var s=e.ref;return Ss(e,r),i=Hh(t,e,n,i,s,r),n=qh(),t!==null&&!Ot?(e.updateQueue=t.updateQueue,e.flags&=-2053,t.lanes&=~r,vi(t,e,r)):(De&&n&&Rh(e),e.flags|=1,Ct(t,e,i,r),e.child)}function dg(t,e,n,i,r){if(t===null){var s=n.type;return typeof s=="function"&&!np(s)&&s.defaultProps===void 0&&n.compare===null&&n.defaultProps===void 0?(e.tag=15,e.type=s,xS(t,e,s,i,r)):(t=Dl(n.type,null,i,e,e.mode,r),t.ref=e.ref,t.return=e,e.child=t)}if(s=t.child,!(t.lanes&r)){var o=s.memoizedProps;if(n=n.compare,n=n!==null?n:Yo,n(o,i)&&t.ref===e.ref)return vi(t,e,r)}return e.flags|=1,t=Ki(s,i),t.ref=e.ref,t.return=e,e.child=t}function xS(t,e,n,i,r){if(t!==null){var s=t.memoizedProps;if(Yo(s,i)&&t.ref===e.ref)if(Ot=!1,e.pendingProps=i=s,(t.lanes&r)!==0)t.flags&131072&&(Ot=!0);else return e.lanes=t.lanes,vi(t,e,r)}return xf(t,e,n,i,r)}function wS(t,e,n){var i=e.pendingProps,r=i.children,s=t!==null?t.memoizedState:null;if(i.mode==="hidden")if(!(e.mode&1))e.memoizedState={baseLanes:0,cachePool:null,transitions:null},_e(us,Wt),Wt|=n;else{if(!(n&1073741824))return t=s!==null?s.baseLanes|n:n,e.lanes=e.childLanes=1073741824,e.memoizedState={baseLanes:t,cachePool:null,transitions:null},e.updateQueue=null,_e(us,Wt),Wt|=t,null;e.memoizedState={baseLanes:0,cachePool:null,transitions:null},i=s!==null?s.baseLanes:n,_e(us,Wt),Wt|=i}else s!==null?(i=s.baseLanes|n,e.memoizedState=null):i=n,_e(us,Wt),Wt|=i;return Ct(t,e,r,n),e.child}function bS(t,e){var n=e.ref;(t===null&&n!==null||t!==null&&t.ref!==n)&&(e.flags|=512,e.flags|=2097152)}function xf(t,e,n,i,r){var s=zt(n)?Fr:St.current;return s=Ls(e,s),Ss(e,r),n=Hh(t,e,n,i,s,r),i=qh(),t!==null&&!Ot?(e.updateQueue=t.updateQueue,e.flags&=-2053,t.lanes&=~r,vi(t,e,r)):(De&&i&&Rh(e),e.flags|=1,Ct(t,e,n,r),e.child)}function fg(t,e,n,i,r){if(zt(n)){var s=!0;Zl(e)}else s=!1;if(Ss(e,r),e.stateNode===null)Pl(t,e),gS(e,n,i),yf(e,n,i,r),i=!0;else if(t===null){var o=e.stateNode,a=e.memoizedProps;o.props=a;var l=o.context,u=n.contextType;typeof u=="object"&&u!==null?u=fn(u):(u=zt(n)?Fr:St.current,u=Ls(e,u));var c=n.getDerivedStateFromProps,d=typeof c=="function"||typeof o.getSnapshotBeforeUpdate=="function";d||typeof o.UNSAFE_componentWillReceiveProps!="function"&&typeof o.componentWillReceiveProps!="function"||(a!==i||l!==u)&&og(e,o,i,u),Mi=!1;var f=e.memoizedState;o.state=f,tu(e,i,o,r),l=e.memoizedState,a!==i||f!==l||Lt.current||Mi?(typeof c=="function"&&(gf(e,n,c,i),l=e.memoizedState),(a=Mi||sg(e,n,a,i,f,l,u))?(d||typeof o.UNSAFE_componentWillMount!="function"&&typeof o.componentWillMount!="function"||(typeof o.componentWillMount=="function"&&o.componentWillMount(),typeof o.UNSAFE_componentWillMount=="function"&&o.UNSAFE_componentWillMount()),typeof o.componentDidMount=="function"&&(e.flags|=4194308)):(typeof o.componentDidMount=="function"&&(e.flags|=4194308),e.memoizedProps=i,e.memoizedState=l),o.props=i,o.state=l,o.context=u,i=a):(typeof o.componentDidMount=="function"&&(e.flags|=4194308),i=!1)}else{o=e.stateNode,Kb(t,e),a=e.memoizedProps,u=e.type===e.elementType?a:wn(e.type,a),o.props=u,d=e.pendingProps,f=o.context,l=n.contextType,typeof l=="object"&&l!==null?l=fn(l):(l=zt(n)?Fr:St.current,l=Ls(e,l));var h=n.getDerivedStateFromProps;(c=typeof h=="function"||typeof o.getSnapshotBeforeUpdate=="function")||typeof o.UNSAFE_componentWillReceiveProps!="function"&&typeof o.componentWillReceiveProps!="function"||(a!==d||f!==l)&&og(e,o,i,l),Mi=!1,f=e.memoizedState,o.state=f,tu(e,i,o,r);var v=e.memoizedState;a!==d||f!==v||Lt.current||Mi?(typeof h=="function"&&(gf(e,n,h,i),v=e.memoizedState),(u=Mi||sg(e,n,u,i,f,v,l)||!1)?(c||typeof o.UNSAFE_componentWillUpdate!="function"&&typeof o.componentWillUpdate!="function"||(typeof o.componentWillUpdate=="function"&&o.componentWillUpdate(i,v,l),typeof o.UNSAFE_componentWillUpdate=="function"&&o.UNSAFE_componentWillUpdate(i,v,l)),typeof o.componentDidUpdate=="function"&&(e.flags|=4),typeof o.getSnapshotBeforeUpdate=="function"&&(e.flags|=1024)):(typeof o.componentDidUpdate!="function"||a===t.memoizedProps&&f===t.memoizedState||(e.flags|=4),typeof o.getSnapshotBeforeUpdate!="function"||a===t.memoizedProps&&f===t.memoizedState||(e.flags|=1024),e.memoizedProps=i,e.memoizedState=v),o.props=i,o.state=v,o.context=l,i=u):(typeof o.componentDidUpdate!="function"||a===t.memoizedProps&&f===t.memoizedState||(e.flags|=4),typeof o.getSnapshotBeforeUpdate!="function"||a===t.memoizedProps&&f===t.memoizedState||(e.flags|=1024),i=!1)}return wf(t,e,n,i,s,r)}function wf(t,e,n,i,r,s){bS(t,e);var o=(e.flags&128)!==0;if(!i&&!o)return r&&Xm(e,n,!1),vi(t,e,s);i=e.stateNode,CM.current=e;var a=o&&typeof n.getDerivedStateFromError!="function"?null:i.render();return e.flags|=1,t!==null&&o?(e.child=Vs(e,t.child,null,s),e.child=Vs(e,null,a,s)):Ct(t,e,a,s),e.memoizedState=i.state,r&&Xm(e,n,!0),e.child}function SS(t){var e=t.stateNode;e.pendingContext?Zm(t,e.pendingContext,e.pendingContext!==e.context):e.context&&Zm(t,e.context,!1),Bh(t,e.containerInfo)}function hg(t,e,n,i,r){return zs(),Ih(r),e.flags|=256,Ct(t,e,n,i),e.child}var bf={dehydrated:null,treeContext:null,retryLane:0};function Sf(t){return{baseLanes:t,cachePool:null,transitions:null}}function _S(t,e,n){var i=e.pendingProps,r=Fe.current,s=!1,o=(e.flags&128)!==0,a;if((a=o)||(a=t!==null&&t.memoizedState===null?!1:(r&2)!==0),a?(s=!0,e.flags&=-129):(t===null||t.memoizedState!==null)&&(r|=1),_e(Fe,r&1),t===null)return pf(e),t=e.memoizedState,t!==null&&(t=t.dehydrated,t!==null)?(e.mode&1?t.data==="$!"?e.lanes=8:e.lanes=1073741824:e.lanes=1,null):(o=i.children,t=i.fallback,s?(i=e.mode,s=e.child,o={mode:"hidden",children:o},!(i&1)&&s!==null?(s.childLanes=0,s.pendingProps=o):s=Yu(o,i,0,null),t=Nr(t,i,n,null),s.return=e,t.return=e,s.sibling=t,e.child=s,e.child.memoizedState=Sf(n),e.memoizedState=bf,t):Kh(e,o));if(r=t.memoizedState,r!==null&&(a=r.dehydrated,a!==null))return TM(t,e,o,i,a,r,n);if(s){s=i.fallback,o=e.mode,r=t.child,a=r.sibling;var l={mode:"hidden",children:i.children};return!(o&1)&&e.child!==r?(i=e.child,i.childLanes=0,i.pendingProps=l,e.deletions=null):(i=Ki(r,l),i.subtreeFlags=r.subtreeFlags&14680064),a!==null?s=Ki(a,s):(s=Nr(s,o,n,null),s.flags|=2),s.return=e,i.return=e,i.sibling=s,e.child=i,i=s,s=e.child,o=t.child.memoizedState,o=o===null?Sf(n):{baseLanes:o.baseLanes|n,cachePool:null,transitions:o.transitions},s.memoizedState=o,s.childLanes=t.childLanes&~n,e.memoizedState=bf,i}return s=t.child,t=s.sibling,i=Ki(s,{mode:"visible",children:i.children}),!(e.mode&1)&&(i.lanes=n),i.return=e,i.sibling=null,t!==null&&(n=e.deletions,n===null?(e.deletions=[t],e.flags|=16):n.push(t)),e.child=i,e.memoizedState=null,i}function Kh(t,e){return e=Yu({mode:"visible",children:e},t.mode,0,null),e.return=t,t.child=e}function al(t,e,n,i){return i!==null&&Ih(i),Vs(e,t.child,null,n),t=Kh(e,e.pendingProps.children),t.flags|=2,e.memoizedState=null,t}function TM(t,e,n,i,r,s,o){if(n)return e.flags&256?(e.flags&=-257,i=Gc(Error(R(422))),al(t,e,o,i)):e.memoizedState!==null?(e.child=t.child,e.flags|=128,null):(s=i.fallback,r=e.mode,i=Yu({mode:"visible",children:i.children},r,0,null),s=Nr(s,r,o,null),s.flags|=2,i.return=e,s.return=e,i.sibling=s,e.child=i,e.mode&1&&Vs(e,t.child,null,o),e.child.memoizedState=Sf(o),e.memoizedState=bf,s);if(!(e.mode&1))return al(t,e,o,null);if(r.data==="$!"){if(i=r.nextSibling&&r.nextSibling.dataset,i)var a=i.dgst;return i=a,s=Error(R(419)),i=Gc(s,i,void 0),al(t,e,o,i)}if(a=(o&t.childLanes)!==0,Ot||a){if(i=tt,i!==null){switch(o&-o){case 4:r=2;break;case 16:r=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:r=32;break;case 536870912:r=268435456;break;default:r=0}r=r&(i.suspendedLanes|o)?0:r,r!==0&&r!==s.retryLane&&(s.retryLane=r,yi(t,r),En(i,t,r,-1))}return tp(),i=Gc(Error(R(421))),al(t,e,o,i)}return r.data==="$?"?(e.flags|=128,e.child=t.child,e=zM.bind(null,t),r._reactRetry=e,null):(t=s.treeContext,qt=Hi(r.nextSibling),Gt=e,De=!0,kn=null,t!==null&&(ln[un++]=oi,ln[un++]=ai,ln[un++]=Ir,oi=t.id,ai=t.overflow,Ir=e),e=Kh(e,i.children),e.flags|=4096,e)}function pg(t,e,n){t.lanes|=e;var i=t.alternate;i!==null&&(i.lanes|=e),mf(t.return,e,n)}function Qc(t,e,n,i,r){var s=t.memoizedState;s===null?t.memoizedState={isBackwards:e,rendering:null,renderingStartTime:0,last:i,tail:n,tailMode:r}:(s.isBackwards=e,s.rendering=null,s.renderingStartTime=0,s.last=i,s.tail=n,s.tailMode=r)}function kS(t,e,n){var i=e.pendingProps,r=i.revealOrder,s=i.tail;if(Ct(t,e,i.children,n),i=Fe.current,i&2)i=i&1|2,e.flags|=128;else{if(t!==null&&t.flags&128)e:for(t=e.child;t!==null;){if(t.tag===13)t.memoizedState!==null&&pg(t,n,e);else if(t.tag===19)pg(t,n,e);else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;t.sibling===null;){if(t.return===null||t.return===e)break e;t=t.return}t.sibling.return=t.return,t=t.sibling}i&=1}if(_e(Fe,i),!(e.mode&1))e.memoizedState=null;else switch(r){case"forwards":for(n=e.child,r=null;n!==null;)t=n.alternate,t!==null&&nu(t)===null&&(r=n),n=n.sibling;n=r,n===null?(r=e.child,e.child=null):(r=n.sibling,n.sibling=null),Qc(e,!1,r,n,s);break;case"backwards":for(n=null,r=e.child,e.child=null;r!==null;){if(t=r.alternate,t!==null&&nu(t)===null){e.child=r;break}t=r.sibling,r.sibling=n,n=r,r=t}Qc(e,!0,n,null,s);break;case"together":Qc(e,!1,null,null,void 0);break;default:e.memoizedState=null}return e.child}function Pl(t,e){!(e.mode&1)&&t!==null&&(t.alternate=null,e.alternate=null,e.flags|=2)}function vi(t,e,n){if(t!==null&&(e.dependencies=t.dependencies),jr|=e.lanes,!(n&e.childLanes))return null;if(t!==null&&e.child!==t.child)throw Error(R(153));if(e.child!==null){for(t=e.child,n=Ki(t,t.pendingProps),e.child=n,n.return=e;t.sibling!==null;)t=t.sibling,n=n.sibling=Ki(t,t.pendingProps),n.return=e;n.sibling=null}return e.child}function PM(t,e,n){switch(e.tag){case 3:SS(e),zs();break;case 5:Zb(e);break;case 1:zt(e.type)&&Zl(e);break;case 4:Bh(e,e.stateNode.containerInfo);break;case 10:var i=e.type._context,r=e.memoizedProps.value;_e(Jl,i._currentValue),i._currentValue=r;break;case 13:if(i=e.memoizedState,i!==null)return i.dehydrated!==null?(_e(Fe,Fe.current&1),e.flags|=128,null):n&e.child.childLanes?_S(t,e,n):(_e(Fe,Fe.current&1),t=vi(t,e,n),t!==null?t.sibling:null);_e(Fe,Fe.current&1);break;case 19:if(i=(n&e.childLanes)!==0,t.flags&128){if(i)return kS(t,e,n);e.flags|=128}if(r=e.memoizedState,r!==null&&(r.rendering=null,r.tail=null,r.lastEffect=null),_e(Fe,Fe.current),i)break;return null;case 22:case 23:return e.lanes=0,wS(t,e,n)}return vi(t,e,n)}var CS,_f,TS,PS;CS=function(t,e){for(var n=e.child;n!==null;){if(n.tag===5||n.tag===6)t.appendChild(n.stateNode);else if(n.tag!==4&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===e)break;for(;n.sibling===null;){if(n.return===null||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}};_f=function(){};TS=function(t,e,n,i){var r=t.memoizedProps;if(r!==i){t=e.stateNode,Sr(qn.current);var s=null;switch(n){case"input":r=Wd(t,r),i=Wd(t,i),s=[];break;case"select":r=je({},r,{value:void 0}),i=je({},i,{value:void 0}),s=[];break;case"textarea":r=Gd(t,r),i=Gd(t,i),s=[];break;default:typeof r.onClick!="function"&&typeof i.onClick=="function"&&(t.onclick=Ql)}Kd(n,i);var o;n=null;for(u in r)if(!i.hasOwnProperty(u)&&r.hasOwnProperty(u)&&r[u]!=null)if(u==="style"){var a=r[u];for(o in a)a.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else u!=="dangerouslySetInnerHTML"&&u!=="children"&&u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&u!=="autoFocus"&&(Ho.hasOwnProperty(u)?s||(s=[]):(s=s||[]).push(u,null));for(u in i){var l=i[u];if(a=r!=null?r[u]:void 0,i.hasOwnProperty(u)&&l!==a&&(l!=null||a!=null))if(u==="style")if(a){for(o in a)!a.hasOwnProperty(o)||l&&l.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in l)l.hasOwnProperty(o)&&a[o]!==l[o]&&(n||(n={}),n[o]=l[o])}else n||(s||(s=[]),s.push(u,n)),n=l;else u==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,a=a?a.__html:void 0,l!=null&&a!==l&&(s=s||[]).push(u,l)):u==="children"?typeof l!="string"&&typeof l!="number"||(s=s||[]).push(u,""+l):u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&(Ho.hasOwnProperty(u)?(l!=null&&u==="onScroll"&&Te("scroll",t),s||a===l||(s=[])):(s=s||[]).push(u,l))}n&&(s=s||[]).push("style",n);var u=s;(e.updateQueue=u)&&(e.flags|=4)}};PS=function(t,e,n,i){n!==i&&(e.flags|=4)};function po(t,e){if(!De)switch(t.tailMode){case"hidden":e=t.tail;for(var n=null;e!==null;)e.alternate!==null&&(n=e),e=e.sibling;n===null?t.tail=null:n.sibling=null;break;case"collapsed":n=t.tail;for(var i=null;n!==null;)n.alternate!==null&&(i=n),n=n.sibling;i===null?e||t.tail===null?t.tail=null:t.tail.sibling=null:i.sibling=null}}function ht(t){var e=t.alternate!==null&&t.alternate.child===t.child,n=0,i=0;if(e)for(var r=t.child;r!==null;)n|=r.lanes|r.childLanes,i|=r.subtreeFlags&14680064,i|=r.flags&14680064,r.return=t,r=r.sibling;else for(r=t.child;r!==null;)n|=r.lanes|r.childLanes,i|=r.subtreeFlags,i|=r.flags,r.return=t,r=r.sibling;return t.subtreeFlags|=i,t.childLanes=n,e}function EM(t,e,n){var i=e.pendingProps;switch(Fh(e),e.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return ht(e),null;case 1:return zt(e.type)&&Kl(),ht(e),null;case 3:return i=e.stateNode,Bs(),Pe(Lt),Pe(St),$h(),i.pendingContext&&(i.context=i.pendingContext,i.pendingContext=null),(t===null||t.child===null)&&(sl(e)?e.flags|=4:t===null||t.memoizedState.isDehydrated&&!(e.flags&256)||(e.flags|=1024,kn!==null&&(Nf(kn),kn=null))),_f(t,e),ht(e),null;case 5:Uh(e);var r=Sr(ia.current);if(n=e.type,t!==null&&e.stateNode!=null)TS(t,e,n,i,r),t.ref!==e.ref&&(e.flags|=512,e.flags|=2097152);else{if(!i){if(e.stateNode===null)throw Error(R(166));return ht(e),null}if(t=Sr(qn.current),sl(e)){i=e.stateNode,n=e.type;var s=e.memoizedProps;switch(i[$n]=e,i[ta]=s,t=(e.mode&1)!==0,n){case"dialog":Te("cancel",i),Te("close",i);break;case"iframe":case"object":case"embed":Te("load",i);break;case"video":case"audio":for(r=0;r<ko.length;r++)Te(ko[r],i);break;case"source":Te("error",i);break;case"img":case"image":case"link":Te("error",i),Te("load",i);break;case"details":Te("toggle",i);break;case"input":_m(i,s),Te("invalid",i);break;case"select":i._wrapperState={wasMultiple:!!s.multiple},Te("invalid",i);break;case"textarea":Cm(i,s),Te("invalid",i)}Kd(n,s),r=null;for(var o in s)if(s.hasOwnProperty(o)){var a=s[o];o==="children"?typeof a=="string"?i.textContent!==a&&(s.suppressHydrationWarning!==!0&&rl(i.textContent,a,t),r=["children",a]):typeof a=="number"&&i.textContent!==""+a&&(s.suppressHydrationWarning!==!0&&rl(i.textContent,a,t),r=["children",""+a]):Ho.hasOwnProperty(o)&&a!=null&&o==="onScroll"&&Te("scroll",i)}switch(n){case"input":Za(i),km(i,s,!0);break;case"textarea":Za(i),Tm(i);break;case"select":case"option":break;default:typeof s.onClick=="function"&&(i.onclick=Ql)}i=r,e.updateQueue=i,i!==null&&(e.flags|=4)}else{o=r.nodeType===9?r:r.ownerDocument,t==="http://www.w3.org/1999/xhtml"&&(t=tb(n)),t==="http://www.w3.org/1999/xhtml"?n==="script"?(t=o.createElement("div"),t.innerHTML="<script><\/script>",t=t.removeChild(t.firstChild)):typeof i.is=="string"?t=o.createElement(n,{is:i.is}):(t=o.createElement(n),n==="select"&&(o=t,i.multiple?o.multiple=!0:i.size&&(o.size=i.size))):t=o.createElementNS(t,n),t[$n]=e,t[ta]=i,CS(t,e,!1,!1),e.stateNode=t;e:{switch(o=Zd(n,i),n){case"dialog":Te("cancel",t),Te("close",t),r=i;break;case"iframe":case"object":case"embed":Te("load",t),r=i;break;case"video":case"audio":for(r=0;r<ko.length;r++)Te(ko[r],t);r=i;break;case"source":Te("error",t),r=i;break;case"img":case"image":case"link":Te("error",t),Te("load",t),r=i;break;case"details":Te("toggle",t),r=i;break;case"input":_m(t,i),r=Wd(t,i),Te("invalid",t);break;case"option":r=i;break;case"select":t._wrapperState={wasMultiple:!!i.multiple},r=je({},i,{value:void 0}),Te("invalid",t);break;case"textarea":Cm(t,i),r=Gd(t,i),Te("invalid",t);break;default:r=i}Kd(n,r),a=r;for(s in a)if(a.hasOwnProperty(s)){var l=a[s];s==="style"?rb(t,l):s==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,l!=null&&nb(t,l)):s==="children"?typeof l=="string"?(n!=="textarea"||l!=="")&&qo(t,l):typeof l=="number"&&qo(t,""+l):s!=="suppressContentEditableWarning"&&s!=="suppressHydrationWarning"&&s!=="autoFocus"&&(Ho.hasOwnProperty(s)?l!=null&&s==="onScroll"&&Te("scroll",t):l!=null&&xh(t,s,l,o))}switch(n){case"input":Za(t),km(t,i,!1);break;case"textarea":Za(t),Tm(t);break;case"option":i.value!=null&&t.setAttribute("value",""+Ji(i.value));break;case"select":t.multiple=!!i.multiple,s=i.value,s!=null?vs(t,!!i.multiple,s,!1):i.defaultValue!=null&&vs(t,!!i.multiple,i.defaultValue,!0);break;default:typeof r.onClick=="function"&&(t.onclick=Ql)}switch(n){case"button":case"input":case"select":case"textarea":i=!!i.autoFocus;break e;case"img":i=!0;break e;default:i=!1}}i&&(e.flags|=4)}e.ref!==null&&(e.flags|=512,e.flags|=2097152)}return ht(e),null;case 6:if(t&&e.stateNode!=null)PS(t,e,t.memoizedProps,i);else{if(typeof i!="string"&&e.stateNode===null)throw Error(R(166));if(n=Sr(ia.current),Sr(qn.current),sl(e)){if(i=e.stateNode,n=e.memoizedProps,i[$n]=e,(s=i.nodeValue!==n)&&(t=Gt,t!==null))switch(t.tag){case 3:rl(i.nodeValue,n,(t.mode&1)!==0);break;case 5:t.memoizedProps.suppressHydrationWarning!==!0&&rl(i.nodeValue,n,(t.mode&1)!==0)}s&&(e.flags|=4)}else i=(n.nodeType===9?n:n.ownerDocument).createTextNode(i),i[$n]=e,e.stateNode=i}return ht(e),null;case 13:if(Pe(Fe),i=e.memoizedState,t===null||t.memoizedState!==null&&t.memoizedState.dehydrated!==null){if(De&&qt!==null&&e.mode&1&&!(e.flags&128))Hb(),zs(),e.flags|=98560,s=!1;else if(s=sl(e),i!==null&&i.dehydrated!==null){if(t===null){if(!s)throw Error(R(318));if(s=e.memoizedState,s=s!==null?s.dehydrated:null,!s)throw Error(R(317));s[$n]=e}else zs(),!(e.flags&128)&&(e.memoizedState=null),e.flags|=4;ht(e),s=!1}else kn!==null&&(Nf(kn),kn=null),s=!0;if(!s)return e.flags&65536?e:null}return e.flags&128?(e.lanes=n,e):(i=i!==null,i!==(t!==null&&t.memoizedState!==null)&&i&&(e.child.flags|=8192,e.mode&1&&(t===null||Fe.current&1?Ze===0&&(Ze=3):tp())),e.updateQueue!==null&&(e.flags|=4),ht(e),null);case 4:return Bs(),_f(t,e),t===null&&Jo(e.stateNode.containerInfo),ht(e),null;case 10:return Lh(e.type._context),ht(e),null;case 17:return zt(e.type)&&Kl(),ht(e),null;case 19:if(Pe(Fe),s=e.memoizedState,s===null)return ht(e),null;if(i=(e.flags&128)!==0,o=s.rendering,o===null)if(i)po(s,!1);else{if(Ze!==0||t!==null&&t.flags&128)for(t=e.child;t!==null;){if(o=nu(t),o!==null){for(e.flags|=128,po(s,!1),i=o.updateQueue,i!==null&&(e.updateQueue=i,e.flags|=4),e.subtreeFlags=0,i=n,n=e.child;n!==null;)s=n,t=i,s.flags&=14680066,o=s.alternate,o===null?(s.childLanes=0,s.lanes=t,s.child=null,s.subtreeFlags=0,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=o.childLanes,s.lanes=o.lanes,s.child=o.child,s.subtreeFlags=0,s.deletions=null,s.memoizedProps=o.memoizedProps,s.memoizedState=o.memoizedState,s.updateQueue=o.updateQueue,s.type=o.type,t=o.dependencies,s.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext}),n=n.sibling;return _e(Fe,Fe.current&1|2),e.child}t=t.sibling}s.tail!==null&&We()>$s&&(e.flags|=128,i=!0,po(s,!1),e.lanes=4194304)}else{if(!i)if(t=nu(o),t!==null){if(e.flags|=128,i=!0,n=t.updateQueue,n!==null&&(e.updateQueue=n,e.flags|=4),po(s,!0),s.tail===null&&s.tailMode==="hidden"&&!o.alternate&&!De)return ht(e),null}else 2*We()-s.renderingStartTime>$s&&n!==1073741824&&(e.flags|=128,i=!0,po(s,!1),e.lanes=4194304);s.isBackwards?(o.sibling=e.child,e.child=o):(n=s.last,n!==null?n.sibling=o:e.child=o,s.last=o)}return s.tail!==null?(e=s.tail,s.rendering=e,s.tail=e.sibling,s.renderingStartTime=We(),e.sibling=null,n=Fe.current,_e(Fe,i?n&1|2:n&1),e):(ht(e),null);case 22:case 23:return ep(),i=e.memoizedState!==null,t!==null&&t.memoizedState!==null!==i&&(e.flags|=8192),i&&e.mode&1?Wt&1073741824&&(ht(e),e.subtreeFlags&6&&(e.flags|=8192)):ht(e),null;case 24:return null;case 25:return null}throw Error(R(156,e.tag))}function MM(t,e){switch(Fh(e),e.tag){case 1:return zt(e.type)&&Kl(),t=e.flags,t&65536?(e.flags=t&-65537|128,e):null;case 3:return Bs(),Pe(Lt),Pe(St),$h(),t=e.flags,t&65536&&!(t&128)?(e.flags=t&-65537|128,e):null;case 5:return Uh(e),null;case 13:if(Pe(Fe),t=e.memoizedState,t!==null&&t.dehydrated!==null){if(e.alternate===null)throw Error(R(340));zs()}return t=e.flags,t&65536?(e.flags=t&-65537|128,e):null;case 19:return Pe(Fe),null;case 4:return Bs(),null;case 10:return Lh(e.type._context),null;case 22:case 23:return ep(),null;case 24:return null;default:return null}}var ll=!1,gt=!1,DM=typeof WeakSet=="function"?WeakSet:Set,q=null;function ls(t,e){var n=t.ref;if(n!==null)if(typeof n=="function")try{n(null)}catch(i){Ve(t,e,i)}else n.current=null}function kf(t,e,n){try{n()}catch(i){Ve(t,e,i)}}var mg=!1;function NM(t,e){if(af=Hl,t=Ab(),Ah(t)){if("selectionStart"in t)var n={start:t.selectionStart,end:t.selectionEnd};else e:{n=(n=t.ownerDocument)&&n.defaultView||window;var i=n.getSelection&&n.getSelection();if(i&&i.rangeCount!==0){n=i.anchorNode;var r=i.anchorOffset,s=i.focusNode;i=i.focusOffset;try{n.nodeType,s.nodeType}catch{n=null;break e}var o=0,a=-1,l=-1,u=0,c=0,d=t,f=null;t:for(;;){for(var h;d!==n||r!==0&&d.nodeType!==3||(a=o+r),d!==s||i!==0&&d.nodeType!==3||(l=o+i),d.nodeType===3&&(o+=d.nodeValue.length),(h=d.firstChild)!==null;)f=d,d=h;for(;;){if(d===t)break t;if(f===n&&++u===r&&(a=o),f===s&&++c===i&&(l=o),(h=d.nextSibling)!==null)break;d=f,f=d.parentNode}d=h}n=a===-1||l===-1?null:{start:a,end:l}}else n=null}n=n||{start:0,end:0}}else n=null;for(lf={focusedElem:t,selectionRange:n},Hl=!1,q=e;q!==null;)if(e=q,t=e.child,(e.subtreeFlags&1028)!==0&&t!==null)t.return=e,q=t;else for(;q!==null;){e=q;try{var v=e.alternate;if(e.flags&1024)switch(e.tag){case 0:case 11:case 15:break;case 1:if(v!==null){var y=v.memoizedProps,w=v.memoizedState,g=e.stateNode,m=g.getSnapshotBeforeUpdate(e.elementType===e.type?y:wn(e.type,y),w);g.__reactInternalSnapshotBeforeUpdate=m}break;case 3:var x=e.stateNode.containerInfo;x.nodeType===1?x.textContent="":x.nodeType===9&&x.documentElement&&x.removeChild(x.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(R(163))}}catch(b){Ve(e,e.return,b)}if(t=e.sibling,t!==null){t.return=e.return,q=t;break}q=e.return}return v=mg,mg=!1,v}function Io(t,e,n){var i=e.updateQueue;if(i=i!==null?i.lastEffect:null,i!==null){var r=i=i.next;do{if((r.tag&t)===t){var s=r.destroy;r.destroy=void 0,s!==void 0&&kf(e,n,s)}r=r.next}while(r!==i)}}function Zu(t,e){if(e=e.updateQueue,e=e!==null?e.lastEffect:null,e!==null){var n=e=e.next;do{if((n.tag&t)===t){var i=n.create;n.destroy=i()}n=n.next}while(n!==e)}}function Cf(t){var e=t.ref;if(e!==null){var n=t.stateNode;switch(t.tag){case 5:t=n;break;default:t=n}typeof e=="function"?e(t):e.current=t}}function ES(t){var e=t.alternate;e!==null&&(t.alternate=null,ES(e)),t.child=null,t.deletions=null,t.sibling=null,t.tag===5&&(e=t.stateNode,e!==null&&(delete e[$n],delete e[ta],delete e[df],delete e[hM],delete e[pM])),t.stateNode=null,t.return=null,t.dependencies=null,t.memoizedProps=null,t.memoizedState=null,t.pendingProps=null,t.stateNode=null,t.updateQueue=null}function MS(t){return t.tag===5||t.tag===3||t.tag===4}function gg(t){e:for(;;){for(;t.sibling===null;){if(t.return===null||MS(t.return))return null;t=t.return}for(t.sibling.return=t.return,t=t.sibling;t.tag!==5&&t.tag!==6&&t.tag!==18;){if(t.flags&2||t.child===null||t.tag===4)continue e;t.child.return=t,t=t.child}if(!(t.flags&2))return t.stateNode}}function Tf(t,e,n){var i=t.tag;if(i===5||i===6)t=t.stateNode,e?n.nodeType===8?n.parentNode.insertBefore(t,e):n.insertBefore(t,e):(n.nodeType===8?(e=n.parentNode,e.insertBefore(t,n)):(e=n,e.appendChild(t)),n=n._reactRootContainer,n!=null||e.onclick!==null||(e.onclick=Ql));else if(i!==4&&(t=t.child,t!==null))for(Tf(t,e,n),t=t.sibling;t!==null;)Tf(t,e,n),t=t.sibling}function Pf(t,e,n){var i=t.tag;if(i===5||i===6)t=t.stateNode,e?n.insertBefore(t,e):n.appendChild(t);else if(i!==4&&(t=t.child,t!==null))for(Pf(t,e,n),t=t.sibling;t!==null;)Pf(t,e,n),t=t.sibling}var st=null,_n=!1;function _i(t,e,n){for(n=n.child;n!==null;)DS(t,e,n),n=n.sibling}function DS(t,e,n){if(Hn&&typeof Hn.onCommitFiberUnmount=="function")try{Hn.onCommitFiberUnmount(Uu,n)}catch{}switch(n.tag){case 5:gt||ls(n,e);case 6:var i=st,r=_n;st=null,_i(t,e,n),st=i,_n=r,st!==null&&(_n?(t=st,n=n.stateNode,t.nodeType===8?t.parentNode.removeChild(n):t.removeChild(n)):st.removeChild(n.stateNode));break;case 18:st!==null&&(_n?(t=st,n=n.stateNode,t.nodeType===8?Bc(t.parentNode,n):t.nodeType===1&&Bc(t,n),Zo(t)):Bc(st,n.stateNode));break;case 4:i=st,r=_n,st=n.stateNode.containerInfo,_n=!0,_i(t,e,n),st=i,_n=r;break;case 0:case 11:case 14:case 15:if(!gt&&(i=n.updateQueue,i!==null&&(i=i.lastEffect,i!==null))){r=i=i.next;do{var s=r,o=s.destroy;s=s.tag,o!==void 0&&(s&2||s&4)&&kf(n,e,o),r=r.next}while(r!==i)}_i(t,e,n);break;case 1:if(!gt&&(ls(n,e),i=n.stateNode,typeof i.componentWillUnmount=="function"))try{i.props=n.memoizedProps,i.state=n.memoizedState,i.componentWillUnmount()}catch(a){Ve(n,e,a)}_i(t,e,n);break;case 21:_i(t,e,n);break;case 22:n.mode&1?(gt=(i=gt)||n.memoizedState!==null,_i(t,e,n),gt=i):_i(t,e,n);break;default:_i(t,e,n)}}function yg(t){var e=t.updateQueue;if(e!==null){t.updateQueue=null;var n=t.stateNode;n===null&&(n=t.stateNode=new DM),e.forEach(function(i){var r=VM.bind(null,t,i);n.has(i)||(n.add(i),i.then(r,r))})}}function vn(t,e){var n=e.deletions;if(n!==null)for(var i=0;i<n.length;i++){var r=n[i];try{var s=t,o=e,a=o;e:for(;a!==null;){switch(a.tag){case 5:st=a.stateNode,_n=!1;break e;case 3:st=a.stateNode.containerInfo,_n=!0;break e;case 4:st=a.stateNode.containerInfo,_n=!0;break e}a=a.return}if(st===null)throw Error(R(160));DS(s,o,r),st=null,_n=!1;var l=r.alternate;l!==null&&(l.return=null),r.return=null}catch(u){Ve(r,e,u)}}if(e.subtreeFlags&12854)for(e=e.child;e!==null;)NS(e,t),e=e.sibling}function NS(t,e){var n=t.alternate,i=t.flags;switch(t.tag){case 0:case 11:case 14:case 15:if(vn(e,t),jn(t),i&4){try{Io(3,t,t.return),Zu(3,t)}catch(y){Ve(t,t.return,y)}try{Io(5,t,t.return)}catch(y){Ve(t,t.return,y)}}break;case 1:vn(e,t),jn(t),i&512&&n!==null&&ls(n,n.return);break;case 5:if(vn(e,t),jn(t),i&512&&n!==null&&ls(n,n.return),t.flags&32){var r=t.stateNode;try{qo(r,"")}catch(y){Ve(t,t.return,y)}}if(i&4&&(r=t.stateNode,r!=null)){var s=t.memoizedProps,o=n!==null?n.memoizedProps:s,a=t.type,l=t.updateQueue;if(t.updateQueue=null,l!==null)try{a==="input"&&s.type==="radio"&&s.name!=null&&J1(r,s),Zd(a,o);var u=Zd(a,s);for(o=0;o<l.length;o+=2){var c=l[o],d=l[o+1];c==="style"?rb(r,d):c==="dangerouslySetInnerHTML"?nb(r,d):c==="children"?qo(r,d):xh(r,c,d,u)}switch(a){case"input":Hd(r,s);break;case"textarea":eb(r,s);break;case"select":var f=r._wrapperState.wasMultiple;r._wrapperState.wasMultiple=!!s.multiple;var h=s.value;h!=null?vs(r,!!s.multiple,h,!1):f!==!!s.multiple&&(s.defaultValue!=null?vs(r,!!s.multiple,s.defaultValue,!0):vs(r,!!s.multiple,s.multiple?[]:"",!1))}r[ta]=s}catch(y){Ve(t,t.return,y)}}break;case 6:if(vn(e,t),jn(t),i&4){if(t.stateNode===null)throw Error(R(162));r=t.stateNode,s=t.memoizedProps;try{r.nodeValue=s}catch(y){Ve(t,t.return,y)}}break;case 3:if(vn(e,t),jn(t),i&4&&n!==null&&n.memoizedState.isDehydrated)try{Zo(e.containerInfo)}catch(y){Ve(t,t.return,y)}break;case 4:vn(e,t),jn(t);break;case 13:vn(e,t),jn(t),r=t.child,r.flags&8192&&(s=r.memoizedState!==null,r.stateNode.isHidden=s,!s||r.alternate!==null&&r.alternate.memoizedState!==null||(Yh=We())),i&4&&yg(t);break;case 22:if(c=n!==null&&n.memoizedState!==null,t.mode&1?(gt=(u=gt)||c,vn(e,t),gt=u):vn(e,t),jn(t),i&8192){if(u=t.memoizedState!==null,(t.stateNode.isHidden=u)&&!c&&t.mode&1)for(q=t,c=t.child;c!==null;){for(d=q=c;q!==null;){switch(f=q,h=f.child,f.tag){case 0:case 11:case 14:case 15:Io(4,f,f.return);break;case 1:ls(f,f.return);var v=f.stateNode;if(typeof v.componentWillUnmount=="function"){i=f,n=f.return;try{e=i,v.props=e.memoizedProps,v.state=e.memoizedState,v.componentWillUnmount()}catch(y){Ve(i,n,y)}}break;case 5:ls(f,f.return);break;case 22:if(f.memoizedState!==null){xg(d);continue}}h!==null?(h.return=f,q=h):xg(d)}c=c.sibling}e:for(c=null,d=t;;){if(d.tag===5){if(c===null){c=d;try{r=d.stateNode,u?(s=r.style,typeof s.setProperty=="function"?s.setProperty("display","none","important"):s.display="none"):(a=d.stateNode,l=d.memoizedProps.style,o=l!=null&&l.hasOwnProperty("display")?l.display:null,a.style.display=ib("display",o))}catch(y){Ve(t,t.return,y)}}}else if(d.tag===6){if(c===null)try{d.stateNode.nodeValue=u?"":d.memoizedProps}catch(y){Ve(t,t.return,y)}}else if((d.tag!==22&&d.tag!==23||d.memoizedState===null||d===t)&&d.child!==null){d.child.return=d,d=d.child;continue}if(d===t)break e;for(;d.sibling===null;){if(d.return===null||d.return===t)break e;c===d&&(c=null),d=d.return}c===d&&(c=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:vn(e,t),jn(t),i&4&&yg(t);break;case 21:break;default:vn(e,t),jn(t)}}function jn(t){var e=t.flags;if(e&2){try{e:{for(var n=t.return;n!==null;){if(MS(n)){var i=n;break e}n=n.return}throw Error(R(160))}switch(i.tag){case 5:var r=i.stateNode;i.flags&32&&(qo(r,""),i.flags&=-33);var s=gg(t);Pf(t,s,r);break;case 3:case 4:var o=i.stateNode.containerInfo,a=gg(t);Tf(t,a,o);break;default:throw Error(R(161))}}catch(l){Ve(t,t.return,l)}t.flags&=-3}e&4096&&(t.flags&=-4097)}function AM(t,e,n){q=t,AS(t)}function AS(t,e,n){for(var i=(t.mode&1)!==0;q!==null;){var r=q,s=r.child;if(r.tag===22&&i){var o=r.memoizedState!==null||ll;if(!o){var a=r.alternate,l=a!==null&&a.memoizedState!==null||gt;a=ll;var u=gt;if(ll=o,(gt=l)&&!u)for(q=r;q!==null;)o=q,l=o.child,o.tag===22&&o.memoizedState!==null?wg(r):l!==null?(l.return=o,q=l):wg(r);for(;s!==null;)q=s,AS(s),s=s.sibling;q=r,ll=a,gt=u}vg(t)}else r.subtreeFlags&8772&&s!==null?(s.return=r,q=s):vg(t)}}function vg(t){for(;q!==null;){var e=q;if(e.flags&8772){var n=e.alternate;try{if(e.flags&8772)switch(e.tag){case 0:case 11:case 15:gt||Zu(5,e);break;case 1:var i=e.stateNode;if(e.flags&4&&!gt)if(n===null)i.componentDidMount();else{var r=e.elementType===e.type?n.memoizedProps:wn(e.type,n.memoizedProps);i.componentDidUpdate(r,n.memoizedState,i.__reactInternalSnapshotBeforeUpdate)}var s=e.updateQueue;s!==null&&ng(e,s,i);break;case 3:var o=e.updateQueue;if(o!==null){if(n=null,e.child!==null)switch(e.child.tag){case 5:n=e.child.stateNode;break;case 1:n=e.child.stateNode}ng(e,o,n)}break;case 5:var a=e.stateNode;if(n===null&&e.flags&4){n=a;var l=e.memoizedProps;switch(e.type){case"button":case"input":case"select":case"textarea":l.autoFocus&&n.focus();break;case"img":l.src&&(n.src=l.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(e.memoizedState===null){var u=e.alternate;if(u!==null){var c=u.memoizedState;if(c!==null){var d=c.dehydrated;d!==null&&Zo(d)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(R(163))}gt||e.flags&512&&Cf(e)}catch(f){Ve(e,e.return,f)}}if(e===t){q=null;break}if(n=e.sibling,n!==null){n.return=e.return,q=n;break}q=e.return}}function xg(t){for(;q!==null;){var e=q;if(e===t){q=null;break}var n=e.sibling;if(n!==null){n.return=e.return,q=n;break}q=e.return}}function wg(t){for(;q!==null;){var e=q;try{switch(e.tag){case 0:case 11:case 15:var n=e.return;try{Zu(4,e)}catch(l){Ve(e,n,l)}break;case 1:var i=e.stateNode;if(typeof i.componentDidMount=="function"){var r=e.return;try{i.componentDidMount()}catch(l){Ve(e,r,l)}}var s=e.return;try{Cf(e)}catch(l){Ve(e,s,l)}break;case 5:var o=e.return;try{Cf(e)}catch(l){Ve(e,o,l)}}}catch(l){Ve(e,e.return,l)}if(e===t){q=null;break}var a=e.sibling;if(a!==null){a.return=e.return,q=a;break}q=e.return}}var RM=Math.ceil,su=Si.ReactCurrentDispatcher,Zh=Si.ReactCurrentOwner,dn=Si.ReactCurrentBatchConfig,ye=0,tt=null,Ge=null,lt=0,Wt=0,us=lr(0),Ze=0,aa=null,jr=0,Xu=0,Xh=0,Oo=null,It=null,Yh=0,$s=1/0,ri=null,ou=!1,Ef=null,Gi=null,ul=!1,Vi=null,au=0,jo=0,Mf=null,El=-1,Ml=0;function Mt(){return ye&6?We():El!==-1?El:El=We()}function Qi(t){return t.mode&1?ye&2&&lt!==0?lt&-lt:gM.transition!==null?(Ml===0&&(Ml=gb()),Ml):(t=we,t!==0||(t=window.event,t=t===void 0?16:_b(t.type)),t):1}function En(t,e,n,i){if(50<jo)throw jo=0,Mf=null,Error(R(185));Fa(t,n,i),(!(ye&2)||t!==tt)&&(t===tt&&(!(ye&2)&&(Xu|=n),Ze===4&&Ni(t,lt)),Vt(t,i),n===1&&ye===0&&!(e.mode&1)&&($s=We()+500,Gu&&ur()))}function Vt(t,e){var n=t.callbackNode;gE(t,e);var i=Wl(t,t===tt?lt:0);if(i===0)n!==null&&Mm(n),t.callbackNode=null,t.callbackPriority=0;else if(e=i&-i,t.callbackPriority!==e){if(n!=null&&Mm(n),e===1)t.tag===0?mM(bg.bind(null,t)):Ub(bg.bind(null,t)),dM(function(){!(ye&6)&&ur()}),n=null;else{switch(yb(i)){case 1:n=kh;break;case 4:n=pb;break;case 16:n=$l;break;case 536870912:n=mb;break;default:n=$l}n=VS(n,RS.bind(null,t))}t.callbackPriority=e,t.callbackNode=n}}function RS(t,e){if(El=-1,Ml=0,ye&6)throw Error(R(327));var n=t.callbackNode;if(_s()&&t.callbackNode!==n)return null;var i=Wl(t,t===tt?lt:0);if(i===0)return null;if(i&30||i&t.expiredLanes||e)e=lu(t,i);else{e=i;var r=ye;ye|=2;var s=IS();(tt!==t||lt!==e)&&(ri=null,$s=We()+500,Dr(t,e));do try{OM();break}catch(a){FS(t,a)}while(!0);jh(),su.current=s,ye=r,Ge!==null?e=0:(tt=null,lt=0,e=Ze)}if(e!==0){if(e===2&&(r=tf(t),r!==0&&(i=r,e=Df(t,r))),e===1)throw n=aa,Dr(t,0),Ni(t,i),Vt(t,We()),n;if(e===6)Ni(t,i);else{if(r=t.current.alternate,!(i&30)&&!FM(r)&&(e=lu(t,i),e===2&&(s=tf(t),s!==0&&(i=s,e=Df(t,s))),e===1))throw n=aa,Dr(t,0),Ni(t,i),Vt(t,We()),n;switch(t.finishedWork=r,t.finishedLanes=i,e){case 0:case 1:throw Error(R(345));case 2:gr(t,It,ri);break;case 3:if(Ni(t,i),(i&130023424)===i&&(e=Yh+500-We(),10<e)){if(Wl(t,0)!==0)break;if(r=t.suspendedLanes,(r&i)!==i){Mt(),t.pingedLanes|=t.suspendedLanes&r;break}t.timeoutHandle=cf(gr.bind(null,t,It,ri),e);break}gr(t,It,ri);break;case 4:if(Ni(t,i),(i&4194240)===i)break;for(e=t.eventTimes,r=-1;0<i;){var o=31-Pn(i);s=1<<o,o=e[o],o>r&&(r=o),i&=~s}if(i=r,i=We()-i,i=(120>i?120:480>i?480:1080>i?1080:1920>i?1920:3e3>i?3e3:4320>i?4320:1960*RM(i/1960))-i,10<i){t.timeoutHandle=cf(gr.bind(null,t,It,ri),i);break}gr(t,It,ri);break;case 5:gr(t,It,ri);break;default:throw Error(R(329))}}}return Vt(t,We()),t.callbackNode===n?RS.bind(null,t):null}function Df(t,e){var n=Oo;return t.current.memoizedState.isDehydrated&&(Dr(t,e).flags|=256),t=lu(t,e),t!==2&&(e=It,It=n,e!==null&&Nf(e)),t}function Nf(t){It===null?It=t:It.push.apply(It,t)}function FM(t){for(var e=t;;){if(e.flags&16384){var n=e.updateQueue;if(n!==null&&(n=n.stores,n!==null))for(var i=0;i<n.length;i++){var r=n[i],s=r.getSnapshot;r=r.value;try{if(!Rn(s(),r))return!1}catch{return!1}}}if(n=e.child,e.subtreeFlags&16384&&n!==null)n.return=e,e=n;else{if(e===t)break;for(;e.sibling===null;){if(e.return===null||e.return===t)return!0;e=e.return}e.sibling.return=e.return,e=e.sibling}}return!0}function Ni(t,e){for(e&=~Xh,e&=~Xu,t.suspendedLanes|=e,t.pingedLanes&=~e,t=t.expirationTimes;0<e;){var n=31-Pn(e),i=1<<n;t[n]=-1,e&=~i}}function bg(t){if(ye&6)throw Error(R(327));_s();var e=Wl(t,0);if(!(e&1))return Vt(t,We()),null;var n=lu(t,e);if(t.tag!==0&&n===2){var i=tf(t);i!==0&&(e=i,n=Df(t,i))}if(n===1)throw n=aa,Dr(t,0),Ni(t,e),Vt(t,We()),n;if(n===6)throw Error(R(345));return t.finishedWork=t.current.alternate,t.finishedLanes=e,gr(t,It,ri),Vt(t,We()),null}function Jh(t,e){var n=ye;ye|=1;try{return t(e)}finally{ye=n,ye===0&&($s=We()+500,Gu&&ur())}}function Lr(t){Vi!==null&&Vi.tag===0&&!(ye&6)&&_s();var e=ye;ye|=1;var n=dn.transition,i=we;try{if(dn.transition=null,we=1,t)return t()}finally{we=i,dn.transition=n,ye=e,!(ye&6)&&ur()}}function ep(){Wt=us.current,Pe(us)}function Dr(t,e){t.finishedWork=null,t.finishedLanes=0;var n=t.timeoutHandle;if(n!==-1&&(t.timeoutHandle=-1,cM(n)),Ge!==null)for(n=Ge.return;n!==null;){var i=n;switch(Fh(i),i.tag){case 1:i=i.type.childContextTypes,i!=null&&Kl();break;case 3:Bs(),Pe(Lt),Pe(St),$h();break;case 5:Uh(i);break;case 4:Bs();break;case 13:Pe(Fe);break;case 19:Pe(Fe);break;case 10:Lh(i.type._context);break;case 22:case 23:ep()}n=n.return}if(tt=t,Ge=t=Ki(t.current,null),lt=Wt=e,Ze=0,aa=null,Xh=Xu=jr=0,It=Oo=null,br!==null){for(e=0;e<br.length;e++)if(n=br[e],i=n.interleaved,i!==null){n.interleaved=null;var r=i.next,s=n.pending;if(s!==null){var o=s.next;s.next=r,i.next=o}n.pending=i}br=null}return t}function FS(t,e){do{var n=Ge;try{if(jh(),Cl.current=ru,iu){for(var i=Oe.memoizedState;i!==null;){var r=i.queue;r!==null&&(r.pending=null),i=i.next}iu=!1}if(Or=0,et=Ke=Oe=null,Fo=!1,ra=0,Zh.current=null,n===null||n.return===null){Ze=1,aa=e,Ge=null;break}e:{var s=t,o=n.return,a=n,l=e;if(e=lt,a.flags|=32768,l!==null&&typeof l=="object"&&typeof l.then=="function"){var u=l,c=a,d=c.tag;if(!(c.mode&1)&&(d===0||d===11||d===15)){var f=c.alternate;f?(c.updateQueue=f.updateQueue,c.memoizedState=f.memoizedState,c.lanes=f.lanes):(c.updateQueue=null,c.memoizedState=null)}var h=lg(o);if(h!==null){h.flags&=-257,ug(h,o,a,s,e),h.mode&1&&ag(s,u,e),e=h,l=u;var v=e.updateQueue;if(v===null){var y=new Set;y.add(l),e.updateQueue=y}else v.add(l);break e}else{if(!(e&1)){ag(s,u,e),tp();break e}l=Error(R(426))}}else if(De&&a.mode&1){var w=lg(o);if(w!==null){!(w.flags&65536)&&(w.flags|=256),ug(w,o,a,s,e),Ih(Us(l,a));break e}}s=l=Us(l,a),Ze!==4&&(Ze=2),Oo===null?Oo=[s]:Oo.push(s),s=o;do{switch(s.tag){case 3:s.flags|=65536,e&=-e,s.lanes|=e;var g=yS(s,l,e);tg(s,g);break e;case 1:a=l;var m=s.type,x=s.stateNode;if(!(s.flags&128)&&(typeof m.getDerivedStateFromError=="function"||x!==null&&typeof x.componentDidCatch=="function"&&(Gi===null||!Gi.has(x)))){s.flags|=65536,e&=-e,s.lanes|=e;var b=vS(s,a,e);tg(s,b);break e}}s=s.return}while(s!==null)}jS(n)}catch(k){e=k,Ge===n&&n!==null&&(Ge=n=n.return);continue}break}while(!0)}function IS(){var t=su.current;return su.current=ru,t===null?ru:t}function tp(){(Ze===0||Ze===3||Ze===2)&&(Ze=4),tt===null||!(jr&268435455)&&!(Xu&268435455)||Ni(tt,lt)}function lu(t,e){var n=ye;ye|=2;var i=IS();(tt!==t||lt!==e)&&(ri=null,Dr(t,e));do try{IM();break}catch(r){FS(t,r)}while(!0);if(jh(),ye=n,su.current=i,Ge!==null)throw Error(R(261));return tt=null,lt=0,Ze}function IM(){for(;Ge!==null;)OS(Ge)}function OM(){for(;Ge!==null&&!aE();)OS(Ge)}function OS(t){var e=zS(t.alternate,t,Wt);t.memoizedProps=t.pendingProps,e===null?jS(t):Ge=e,Zh.current=null}function jS(t){var e=t;do{var n=e.alternate;if(t=e.return,e.flags&32768){if(n=MM(n,e),n!==null){n.flags&=32767,Ge=n;return}if(t!==null)t.flags|=32768,t.subtreeFlags=0,t.deletions=null;else{Ze=6,Ge=null;return}}else if(n=EM(n,e,Wt),n!==null){Ge=n;return}if(e=e.sibling,e!==null){Ge=e;return}Ge=e=t}while(e!==null);Ze===0&&(Ze=5)}function gr(t,e,n){var i=we,r=dn.transition;try{dn.transition=null,we=1,jM(t,e,n,i)}finally{dn.transition=r,we=i}return null}function jM(t,e,n,i){do _s();while(Vi!==null);if(ye&6)throw Error(R(327));n=t.finishedWork;var r=t.finishedLanes;if(n===null)return null;if(t.finishedWork=null,t.finishedLanes=0,n===t.current)throw Error(R(177));t.callbackNode=null,t.callbackPriority=0;var s=n.lanes|n.childLanes;if(yE(t,s),t===tt&&(Ge=tt=null,lt=0),!(n.subtreeFlags&2064)&&!(n.flags&2064)||ul||(ul=!0,VS($l,function(){return _s(),null})),s=(n.flags&15990)!==0,n.subtreeFlags&15990||s){s=dn.transition,dn.transition=null;var o=we;we=1;var a=ye;ye|=4,Zh.current=null,NM(t,n),NS(n,t),iM(lf),Hl=!!af,lf=af=null,t.current=n,AM(n),lE(),ye=a,we=o,dn.transition=s}else t.current=n;if(ul&&(ul=!1,Vi=t,au=r),s=t.pendingLanes,s===0&&(Gi=null),dE(n.stateNode),Vt(t,We()),e!==null)for(i=t.onRecoverableError,n=0;n<e.length;n++)r=e[n],i(r.value,{componentStack:r.stack,digest:r.digest});if(ou)throw ou=!1,t=Ef,Ef=null,t;return au&1&&t.tag!==0&&_s(),s=t.pendingLanes,s&1?t===Mf?jo++:(jo=0,Mf=t):jo=0,ur(),null}function _s(){if(Vi!==null){var t=yb(au),e=dn.transition,n=we;try{if(dn.transition=null,we=16>t?16:t,Vi===null)var i=!1;else{if(t=Vi,Vi=null,au=0,ye&6)throw Error(R(331));var r=ye;for(ye|=4,q=t.current;q!==null;){var s=q,o=s.child;if(q.flags&16){var a=s.deletions;if(a!==null){for(var l=0;l<a.length;l++){var u=a[l];for(q=u;q!==null;){var c=q;switch(c.tag){case 0:case 11:case 15:Io(8,c,s)}var d=c.child;if(d!==null)d.return=c,q=d;else for(;q!==null;){c=q;var f=c.sibling,h=c.return;if(ES(c),c===u){q=null;break}if(f!==null){f.return=h,q=f;break}q=h}}}var v=s.alternate;if(v!==null){var y=v.child;if(y!==null){v.child=null;do{var w=y.sibling;y.sibling=null,y=w}while(y!==null)}}q=s}}if(s.subtreeFlags&2064&&o!==null)o.return=s,q=o;else e:for(;q!==null;){if(s=q,s.flags&2048)switch(s.tag){case 0:case 11:case 15:Io(9,s,s.return)}var g=s.sibling;if(g!==null){g.return=s.return,q=g;break e}q=s.return}}var m=t.current;for(q=m;q!==null;){o=q;var x=o.child;if(o.subtreeFlags&2064&&x!==null)x.return=o,q=x;else e:for(o=m;q!==null;){if(a=q,a.flags&2048)try{switch(a.tag){case 0:case 11:case 15:Zu(9,a)}}catch(k){Ve(a,a.return,k)}if(a===o){q=null;break e}var b=a.sibling;if(b!==null){b.return=a.return,q=b;break e}q=a.return}}if(ye=r,ur(),Hn&&typeof Hn.onPostCommitFiberRoot=="function")try{Hn.onPostCommitFiberRoot(Uu,t)}catch{}i=!0}return i}finally{we=n,dn.transition=e}}return!1}function Sg(t,e,n){e=Us(n,e),e=yS(t,e,1),t=qi(t,e,1),e=Mt(),t!==null&&(Fa(t,1,e),Vt(t,e))}function Ve(t,e,n){if(t.tag===3)Sg(t,t,n);else for(;e!==null;){if(e.tag===3){Sg(e,t,n);break}else if(e.tag===1){var i=e.stateNode;if(typeof e.type.getDerivedStateFromError=="function"||typeof i.componentDidCatch=="function"&&(Gi===null||!Gi.has(i))){t=Us(n,t),t=vS(e,t,1),e=qi(e,t,1),t=Mt(),e!==null&&(Fa(e,1,t),Vt(e,t));break}}e=e.return}}function LM(t,e,n){var i=t.pingCache;i!==null&&i.delete(e),e=Mt(),t.pingedLanes|=t.suspendedLanes&n,tt===t&&(lt&n)===n&&(Ze===4||Ze===3&&(lt&130023424)===lt&&500>We()-Yh?Dr(t,0):Xh|=n),Vt(t,e)}function LS(t,e){e===0&&(t.mode&1?(e=Ja,Ja<<=1,!(Ja&130023424)&&(Ja=4194304)):e=1);var n=Mt();t=yi(t,e),t!==null&&(Fa(t,e,n),Vt(t,n))}function zM(t){var e=t.memoizedState,n=0;e!==null&&(n=e.retryLane),LS(t,n)}function VM(t,e){var n=0;switch(t.tag){case 13:var i=t.stateNode,r=t.memoizedState;r!==null&&(n=r.retryLane);break;case 19:i=t.stateNode;break;default:throw Error(R(314))}i!==null&&i.delete(e),LS(t,n)}var zS;zS=function(t,e,n){if(t!==null)if(t.memoizedProps!==e.pendingProps||Lt.current)Ot=!0;else{if(!(t.lanes&n)&&!(e.flags&128))return Ot=!1,PM(t,e,n);Ot=!!(t.flags&131072)}else Ot=!1,De&&e.flags&1048576&&$b(e,Yl,e.index);switch(e.lanes=0,e.tag){case 2:var i=e.type;Pl(t,e),t=e.pendingProps;var r=Ls(e,St.current);Ss(e,n),r=Hh(null,e,i,t,r,n);var s=qh();return e.flags|=1,typeof r=="object"&&r!==null&&typeof r.render=="function"&&r.$$typeof===void 0?(e.tag=1,e.memoizedState=null,e.updateQueue=null,zt(i)?(s=!0,Zl(e)):s=!1,e.memoizedState=r.state!==null&&r.state!==void 0?r.state:null,Vh(e),r.updater=Ku,e.stateNode=r,r._reactInternals=e,yf(e,i,t,n),e=wf(null,e,i,!0,s,n)):(e.tag=0,De&&s&&Rh(e),Ct(null,e,r,n),e=e.child),e;case 16:i=e.elementType;e:{switch(Pl(t,e),t=e.pendingProps,r=i._init,i=r(i._payload),e.type=i,r=e.tag=UM(i),t=wn(i,t),r){case 0:e=xf(null,e,i,t,n);break e;case 1:e=fg(null,e,i,t,n);break e;case 11:e=cg(null,e,i,t,n);break e;case 14:e=dg(null,e,i,wn(i.type,t),n);break e}throw Error(R(306,i,""))}return e;case 0:return i=e.type,r=e.pendingProps,r=e.elementType===i?r:wn(i,r),xf(t,e,i,r,n);case 1:return i=e.type,r=e.pendingProps,r=e.elementType===i?r:wn(i,r),fg(t,e,i,r,n);case 3:e:{if(SS(e),t===null)throw Error(R(387));i=e.pendingProps,s=e.memoizedState,r=s.element,Kb(t,e),tu(e,i,null,n);var o=e.memoizedState;if(i=o.element,s.isDehydrated)if(s={element:i,isDehydrated:!1,cache:o.cache,pendingSuspenseBoundaries:o.pendingSuspenseBoundaries,transitions:o.transitions},e.updateQueue.baseState=s,e.memoizedState=s,e.flags&256){r=Us(Error(R(423)),e),e=hg(t,e,i,n,r);break e}else if(i!==r){r=Us(Error(R(424)),e),e=hg(t,e,i,n,r);break e}else for(qt=Hi(e.stateNode.containerInfo.firstChild),Gt=e,De=!0,kn=null,n=Gb(e,null,i,n),e.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling;else{if(zs(),i===r){e=vi(t,e,n);break e}Ct(t,e,i,n)}e=e.child}return e;case 5:return Zb(e),t===null&&pf(e),i=e.type,r=e.pendingProps,s=t!==null?t.memoizedProps:null,o=r.children,uf(i,r)?o=null:s!==null&&uf(i,s)&&(e.flags|=32),bS(t,e),Ct(t,e,o,n),e.child;case 6:return t===null&&pf(e),null;case 13:return _S(t,e,n);case 4:return Bh(e,e.stateNode.containerInfo),i=e.pendingProps,t===null?e.child=Vs(e,null,i,n):Ct(t,e,i,n),e.child;case 11:return i=e.type,r=e.pendingProps,r=e.elementType===i?r:wn(i,r),cg(t,e,i,r,n);case 7:return Ct(t,e,e.pendingProps,n),e.child;case 8:return Ct(t,e,e.pendingProps.children,n),e.child;case 12:return Ct(t,e,e.pendingProps.children,n),e.child;case 10:e:{if(i=e.type._context,r=e.pendingProps,s=e.memoizedProps,o=r.value,_e(Jl,i._currentValue),i._currentValue=o,s!==null)if(Rn(s.value,o)){if(s.children===r.children&&!Lt.current){e=vi(t,e,n);break e}}else for(s=e.child,s!==null&&(s.return=e);s!==null;){var a=s.dependencies;if(a!==null){o=s.child;for(var l=a.firstContext;l!==null;){if(l.context===i){if(s.tag===1){l=ci(-1,n&-n),l.tag=2;var u=s.updateQueue;if(u!==null){u=u.shared;var c=u.pending;c===null?l.next=l:(l.next=c.next,c.next=l),u.pending=l}}s.lanes|=n,l=s.alternate,l!==null&&(l.lanes|=n),mf(s.return,n,e),a.lanes|=n;break}l=l.next}}else if(s.tag===10)o=s.type===e.type?null:s.child;else if(s.tag===18){if(o=s.return,o===null)throw Error(R(341));o.lanes|=n,a=o.alternate,a!==null&&(a.lanes|=n),mf(o,n,e),o=s.sibling}else o=s.child;if(o!==null)o.return=s;else for(o=s;o!==null;){if(o===e){o=null;break}if(s=o.sibling,s!==null){s.return=o.return,o=s;break}o=o.return}s=o}Ct(t,e,r.children,n),e=e.child}return e;case 9:return r=e.type,i=e.pendingProps.children,Ss(e,n),r=fn(r),i=i(r),e.flags|=1,Ct(t,e,i,n),e.child;case 14:return i=e.type,r=wn(i,e.pendingProps),r=wn(i.type,r),dg(t,e,i,r,n);case 15:return xS(t,e,e.type,e.pendingProps,n);case 17:return i=e.type,r=e.pendingProps,r=e.elementType===i?r:wn(i,r),Pl(t,e),e.tag=1,zt(i)?(t=!0,Zl(e)):t=!1,Ss(e,n),gS(e,i,r),yf(e,i,r,n),wf(null,e,i,!0,t,n);case 19:return kS(t,e,n);case 22:return wS(t,e,n)}throw Error(R(156,e.tag))};function VS(t,e){return hb(t,e)}function BM(t,e,n,i){this.tag=t,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=i,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function cn(t,e,n,i){return new BM(t,e,n,i)}function np(t){return t=t.prototype,!(!t||!t.isReactComponent)}function UM(t){if(typeof t=="function")return np(t)?1:0;if(t!=null){if(t=t.$$typeof,t===bh)return 11;if(t===Sh)return 14}return 2}function Ki(t,e){var n=t.alternate;return n===null?(n=cn(t.tag,e,t.key,t.mode),n.elementType=t.elementType,n.type=t.type,n.stateNode=t.stateNode,n.alternate=t,t.alternate=n):(n.pendingProps=e,n.type=t.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=t.flags&14680064,n.childLanes=t.childLanes,n.lanes=t.lanes,n.child=t.child,n.memoizedProps=t.memoizedProps,n.memoizedState=t.memoizedState,n.updateQueue=t.updateQueue,e=t.dependencies,n.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext},n.sibling=t.sibling,n.index=t.index,n.ref=t.ref,n}function Dl(t,e,n,i,r,s){var o=2;if(i=t,typeof t=="function")np(t)&&(o=1);else if(typeof t=="string")o=5;else e:switch(t){case Jr:return Nr(n.children,r,s,e);case wh:o=8,r|=8;break;case Vd:return t=cn(12,n,e,r|2),t.elementType=Vd,t.lanes=s,t;case Bd:return t=cn(13,n,e,r),t.elementType=Bd,t.lanes=s,t;case Ud:return t=cn(19,n,e,r),t.elementType=Ud,t.lanes=s,t;case Z1:return Yu(n,r,s,e);default:if(typeof t=="object"&&t!==null)switch(t.$$typeof){case Q1:o=10;break e;case K1:o=9;break e;case bh:o=11;break e;case Sh:o=14;break e;case Ei:o=16,i=null;break e}throw Error(R(130,t==null?t:typeof t,""))}return e=cn(o,n,e,r),e.elementType=t,e.type=i,e.lanes=s,e}function Nr(t,e,n,i){return t=cn(7,t,i,e),t.lanes=n,t}function Yu(t,e,n,i){return t=cn(22,t,i,e),t.elementType=Z1,t.lanes=n,t.stateNode={isHidden:!1},t}function Kc(t,e,n){return t=cn(6,t,null,e),t.lanes=n,t}function Zc(t,e,n){return e=cn(4,t.children!==null?t.children:[],t.key,e),e.lanes=n,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function $M(t,e,n,i,r){this.tag=e,this.containerInfo=t,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=Dc(0),this.expirationTimes=Dc(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Dc(0),this.identifierPrefix=i,this.onRecoverableError=r,this.mutableSourceEagerHydrationData=null}function ip(t,e,n,i,r,s,o,a,l){return t=new $M(t,e,n,a,l),e===1?(e=1,s===!0&&(e|=8)):e=0,s=cn(3,null,null,e),t.current=s,s.stateNode=t,s.memoizedState={element:i,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Vh(s),t}function WM(t,e,n){var i=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:Yr,key:i==null?null:""+i,children:t,containerInfo:e,implementation:n}}function BS(t){if(!t)return er;t=t._reactInternals;e:{if(qr(t)!==t||t.tag!==1)throw Error(R(170));var e=t;do{switch(e.tag){case 3:e=e.stateNode.context;break e;case 1:if(zt(e.type)){e=e.stateNode.__reactInternalMemoizedMergedChildContext;break e}}e=e.return}while(e!==null);throw Error(R(171))}if(t.tag===1){var n=t.type;if(zt(n))return Bb(t,n,e)}return e}function US(t,e,n,i,r,s,o,a,l){return t=ip(n,i,!0,t,r,s,o,a,l),t.context=BS(null),n=t.current,i=Mt(),r=Qi(n),s=ci(i,r),s.callback=e??null,qi(n,s,r),t.current.lanes=r,Fa(t,r,i),Vt(t,i),t}function Ju(t,e,n,i){var r=e.current,s=Mt(),o=Qi(r);return n=BS(n),e.context===null?e.context=n:e.pendingContext=n,e=ci(s,o),e.payload={element:t},i=i===void 0?null:i,i!==null&&(e.callback=i),t=qi(r,e,o),t!==null&&(En(t,r,o,s),kl(t,r,o)),o}function uu(t){if(t=t.current,!t.child)return null;switch(t.child.tag){case 5:return t.child.stateNode;default:return t.child.stateNode}}function _g(t,e){if(t=t.memoizedState,t!==null&&t.dehydrated!==null){var n=t.retryLane;t.retryLane=n!==0&&n<e?n:e}}function rp(t,e){_g(t,e),(t=t.alternate)&&_g(t,e)}function HM(){return null}var $S=typeof reportError=="function"?reportError:function(t){console.error(t)};function sp(t){this._internalRoot=t}ec.prototype.render=sp.prototype.render=function(t){var e=this._internalRoot;if(e===null)throw Error(R(409));Ju(t,e,null,null)};ec.prototype.unmount=sp.prototype.unmount=function(){var t=this._internalRoot;if(t!==null){this._internalRoot=null;var e=t.containerInfo;Lr(function(){Ju(null,t,null,null)}),e[gi]=null}};function ec(t){this._internalRoot=t}ec.prototype.unstable_scheduleHydration=function(t){if(t){var e=wb();t={blockedOn:null,target:t,priority:e};for(var n=0;n<Di.length&&e!==0&&e<Di[n].priority;n++);Di.splice(n,0,t),n===0&&Sb(t)}};function op(t){return!(!t||t.nodeType!==1&&t.nodeType!==9&&t.nodeType!==11)}function tc(t){return!(!t||t.nodeType!==1&&t.nodeType!==9&&t.nodeType!==11&&(t.nodeType!==8||t.nodeValue!==" react-mount-point-unstable "))}function kg(){}function qM(t,e,n,i,r){if(r){if(typeof i=="function"){var s=i;i=function(){var u=uu(o);s.call(u)}}var o=US(e,i,t,0,null,!1,!1,"",kg);return t._reactRootContainer=o,t[gi]=o.current,Jo(t.nodeType===8?t.parentNode:t),Lr(),o}for(;r=t.lastChild;)t.removeChild(r);if(typeof i=="function"){var a=i;i=function(){var u=uu(l);a.call(u)}}var l=ip(t,0,!1,null,null,!1,!1,"",kg);return t._reactRootContainer=l,t[gi]=l.current,Jo(t.nodeType===8?t.parentNode:t),Lr(function(){Ju(e,l,n,i)}),l}function nc(t,e,n,i,r){var s=n._reactRootContainer;if(s){var o=s;if(typeof r=="function"){var a=r;r=function(){var l=uu(o);a.call(l)}}Ju(e,o,t,r)}else o=qM(n,e,t,r,i);return uu(o)}vb=function(t){switch(t.tag){case 3:var e=t.stateNode;if(e.current.memoizedState.isDehydrated){var n=_o(e.pendingLanes);n!==0&&(Ch(e,n|1),Vt(e,We()),!(ye&6)&&($s=We()+500,ur()))}break;case 13:Lr(function(){var i=yi(t,1);if(i!==null){var r=Mt();En(i,t,1,r)}}),rp(t,1)}};Th=function(t){if(t.tag===13){var e=yi(t,134217728);if(e!==null){var n=Mt();En(e,t,134217728,n)}rp(t,134217728)}};xb=function(t){if(t.tag===13){var e=Qi(t),n=yi(t,e);if(n!==null){var i=Mt();En(n,t,e,i)}rp(t,e)}};wb=function(){return we};bb=function(t,e){var n=we;try{return we=t,e()}finally{we=n}};Yd=function(t,e,n){switch(e){case"input":if(Hd(t,n),e=n.name,n.type==="radio"&&e!=null){for(n=t;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<n.length;e++){var i=n[e];if(i!==t&&i.form===t.form){var r=qu(i);if(!r)throw Error(R(90));Y1(i),Hd(i,r)}}}break;case"textarea":eb(t,n);break;case"select":e=n.value,e!=null&&vs(t,!!n.multiple,e,!1)}};ab=Jh;lb=Lr;var GM={usingClientEntryPoint:!1,Events:[Oa,is,qu,sb,ob,Jh]},mo={findFiberByHostInstance:wr,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},QM={bundleType:mo.bundleType,version:mo.version,rendererPackageName:mo.rendererPackageName,rendererConfig:mo.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Si.ReactCurrentDispatcher,findHostInstanceByFiber:function(t){return t=db(t),t===null?null:t.stateNode},findFiberByHostInstance:mo.findFiberByHostInstance||HM,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var cl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!cl.isDisabled&&cl.supportsFiber)try{Uu=cl.inject(QM),Hn=cl}catch{}}Jt.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=GM;Jt.createPortal=function(t,e){var n=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!op(e))throw Error(R(200));return WM(t,e,null,n)};Jt.createRoot=function(t,e){if(!op(t))throw Error(R(299));var n=!1,i="",r=$S;return e!=null&&(e.unstable_strictMode===!0&&(n=!0),e.identifierPrefix!==void 0&&(i=e.identifierPrefix),e.onRecoverableError!==void 0&&(r=e.onRecoverableError)),e=ip(t,1,!1,null,null,n,!1,i,r),t[gi]=e.current,Jo(t.nodeType===8?t.parentNode:t),new sp(e)};Jt.findDOMNode=function(t){if(t==null)return null;if(t.nodeType===1)return t;var e=t._reactInternals;if(e===void 0)throw typeof t.render=="function"?Error(R(188)):(t=Object.keys(t).join(","),Error(R(268,t)));return t=db(e),t=t===null?null:t.stateNode,t};Jt.flushSync=function(t){return Lr(t)};Jt.hydrate=function(t,e,n){if(!tc(e))throw Error(R(200));return nc(null,t,e,!0,n)};Jt.hydrateRoot=function(t,e,n){if(!op(t))throw Error(R(405));var i=n!=null&&n.hydratedSources||null,r=!1,s="",o=$S;if(n!=null&&(n.unstable_strictMode===!0&&(r=!0),n.identifierPrefix!==void 0&&(s=n.identifierPrefix),n.onRecoverableError!==void 0&&(o=n.onRecoverableError)),e=US(e,null,t,1,n??null,r,!1,s,o),t[gi]=e.current,Jo(t),i)for(t=0;t<i.length;t++)n=i[t],r=n._getVersion,r=r(n._source),e.mutableSourceEagerHydrationData==null?e.mutableSourceEagerHydrationData=[n,r]:e.mutableSourceEagerHydrationData.push(n,r);return new ec(e)};Jt.render=function(t,e,n){if(!tc(e))throw Error(R(200));return nc(null,t,e,!1,n)};Jt.unmountComponentAtNode=function(t){if(!tc(t))throw Error(R(40));return t._reactRootContainer?(Lr(function(){nc(null,null,t,!1,function(){t._reactRootContainer=null,t[gi]=null})}),!0):!1};Jt.unstable_batchedUpdates=Jh;Jt.unstable_renderSubtreeIntoContainer=function(t,e,n,i){if(!tc(n))throw Error(R(200));if(t==null||t._reactInternals===void 0)throw Error(R(38));return nc(t,e,n,!1,i)};Jt.version="18.3.1-next-f1338f8080-20240426";function WS(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(WS)}catch(t){console.error(t)}}WS(),W1.exports=Jt;var ic=W1.exports;const KM=A1(ic);var HS,Cg=ic;HS=Cg.createRoot,Cg.hydrateRoot;function ZM(t,e){if(t instanceof RegExp)return{keys:!1,pattern:t};var n,i,r,s,o=[],a="",l=t.split("/");for(l[0]||l.shift();r=l.shift();)n=r[0],n==="*"?(o.push(n),a+=r[1]==="?"?"(?:/(.*))?":"/(.*)"):n===":"?(i=r.indexOf("?",1),s=r.indexOf(".",1),o.push(r.substring(1,~i?i:~s?s:r.length)),a+=~i&&!~s?"(?:/([^/]+?))?":"/([^/]+?)",~s&&(a+=(~i?"?":"")+"\\"+r.substring(s))):a+="/"+r;return{keys:o,pattern:new RegExp("^"+a+(e?"(?=$|/)":"/?$"),"i")}}var qS={exports:{}},GS={};/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Ws=S;function XM(t,e){return t===e&&(t!==0||1/t===1/e)||t!==t&&e!==e}var YM=typeof Object.is=="function"?Object.is:XM,JM=Ws.useState,eD=Ws.useEffect,tD=Ws.useLayoutEffect,nD=Ws.useDebugValue;function iD(t,e){var n=e(),i=JM({inst:{value:n,getSnapshot:e}}),r=i[0].inst,s=i[1];return tD(function(){r.value=n,r.getSnapshot=e,Xc(r)&&s({inst:r})},[t,n,e]),eD(function(){return Xc(r)&&s({inst:r}),t(function(){Xc(r)&&s({inst:r})})},[t]),nD(n),n}function Xc(t){var e=t.getSnapshot;t=t.value;try{var n=e();return!YM(t,n)}catch{return!0}}function rD(t,e){return e()}var sD=typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"?rD:iD;GS.useSyncExternalStore=Ws.useSyncExternalStore!==void 0?Ws.useSyncExternalStore:sD;qS.exports=GS;var oD=qS.exports;const aD=LP.useInsertionEffect,lD=typeof window<"u"&&typeof window.document<"u"&&typeof window.document.createElement<"u",uD=lD?S.useLayoutEffect:S.useEffect,cD=aD||uD,QS=t=>{const e=S.useRef([t,(...n)=>e[0](...n)]).current;return cD(()=>{e[0]=t}),e[1]},dD="popstate",ap="pushState",lp="replaceState",fD="hashchange",Tg=[dD,ap,lp,fD],hD=t=>{for(const e of Tg)addEventListener(e,t);return()=>{for(const e of Tg)removeEventListener(e,t)}},KS=(t,e)=>oD.useSyncExternalStore(hD,t,e),pD=()=>location.search,mD=({ssrSearch:t=""}={})=>KS(pD,()=>t),Pg=()=>location.pathname,gD=({ssrPath:t}={})=>KS(Pg,t?()=>t:Pg),yD=(t,{replace:e=!1,state:n=null}={})=>history[e?lp:ap](n,"",t),vD=(t={})=>[gD(t),yD],Eg=Symbol.for("wouter_v3");if(typeof history<"u"&&typeof window[Eg]>"u"){for(const t of[ap,lp]){const e=history[t];history[t]=function(){const n=e.apply(this,arguments),i=new Event(t);return i.arguments=arguments,dispatchEvent(i),n}}Object.defineProperty(window,Eg,{value:!0})}const xD=(t,e)=>e.toLowerCase().indexOf(t.toLowerCase())?"~"+e:e.slice(t.length)||"/",ZS=(t="")=>t==="/"?"":t,wD=(t,e)=>t[0]==="~"?t.slice(1):ZS(e)+t,bD=(t="",e)=>xD(Mg(ZS(t)),Mg(e)),Mg=t=>{try{return decodeURI(t)}catch{return t}},XS={hook:vD,searchHook:mD,parser:ZM,base:"",ssrPath:void 0,ssrSearch:void 0,ssrContext:void 0,hrefs:t=>t},YS=S.createContext(XS),La=()=>S.useContext(YS),JS={},e_=S.createContext(JS),SD=()=>S.useContext(e_),rc=t=>{const[e,n]=t.hook(t);return[bD(t.base,e),QS((i,r)=>n(wD(i,t.base),r))]},t_=()=>rc(La()),n_=(t,e,n,i)=>{const{pattern:r,keys:s}=e instanceof RegExp?{keys:!1,pattern:e}:t(e||"*",i),o=r.exec(n)||[],[a,...l]=o;return a!==void 0?[!0,(()=>{const u=s!==!1?Object.fromEntries(s.map((d,f)=>[d,l[f]])):o.groups;let c={...l};return u&&Object.assign(c,u),c})(),...i?[a]:[]]:[!1,null]},up=({children:t,...e})=>{var c,d;const n=La(),i=e.hook?XS:n;let r=i;const[s,o]=((c=e.ssrPath)==null?void 0:c.split("?"))??[];o&&(e.ssrSearch=o,e.ssrPath=s),e.hrefs=e.hrefs??((d=e.hook)==null?void 0:d.hrefs);let a=S.useRef({}),l=a.current,u=l;for(let f in i){const h=f==="base"?i[f]+(e[f]||""):e[f]||i[f];l===u&&h!==u[f]&&(a.current=u={...u}),u[f]=h,(h!==i[f]||h!==r[f])&&(r=u)}return S.createElement(YS.Provider,{value:r,children:t})},Dg=({children:t,component:e},n)=>e?S.createElement(e,{params:n}):typeof t=="function"?t(n):t,_D=t=>{let e=S.useRef(JS);const n=e.current;return e.current=Object.keys(t).length!==Object.keys(n).length||Object.entries(t).some(([i,r])=>r!==n[i])?t:n},Ng=({path:t,nest:e,match:n,...i})=>{const r=La(),[s]=rc(r),[o,a,l]=n??n_(r.parser,t,s,e),u=_D({...SD(),...a});if(!o)return null;const c=l?S.createElement(up,{base:l},Dg(i,u)):Dg(i,u);return S.createElement(e_.Provider,{value:u,children:c})};S.forwardRef((t,e)=>{const n=La(),[i,r]=rc(n),{to:s="",href:o=s,onClick:a,asChild:l,children:u,className:c,replace:d,state:f,...h}=t,v=QS(w=>{w.ctrlKey||w.metaKey||w.altKey||w.shiftKey||w.button!==0||(a==null||a(w),w.defaultPrevented||(w.preventDefault(),r(o,t)))}),y=n.hrefs(o[0]==="~"?o.slice(1):n.base+o,n);return l&&S.isValidElement(u)?S.cloneElement(u,{onClick:v,href:y}):S.createElement("a",{...h,onClick:v,href:y,className:c!=null&&c.call?c(i===o):c,children:u,ref:e})});const i_=t=>Array.isArray(t)?t.flatMap(e=>i_(e&&e.type===S.Fragment?e.props.children:e)):[t],kD=({children:t,location:e})=>{const n=La(),[i]=rc(n);for(const r of i_(t)){let s=0;if(S.isValidElement(r)&&(s=n_(n.parser,r.props.path,e||i,r.props.nest))[0])return S.cloneElement(r,{match:s})}return null};var sc=class{constructor(){this.listeners=new Set,this.subscribe=this.subscribe.bind(this)}subscribe(t){return this.listeners.add(t),this.onSubscribe(),()=>{this.listeners.delete(t),this.onUnsubscribe()}}hasListeners(){return this.listeners.size>0}onSubscribe(){}onUnsubscribe(){}},oc=typeof window>"u"||"Deno"in globalThis;function bn(){}function CD(t,e){return typeof t=="function"?t(e):t}function TD(t){return typeof t=="number"&&t>=0&&t!==1/0}function PD(t,e){return Math.max(t+(e||0)-Date.now(),0)}function Ag(t,e){return typeof t=="function"?t(e):t}function ED(t,e){return typeof t=="function"?t(e):t}function Rg(t,e){const{type:n="all",exact:i,fetchStatus:r,predicate:s,queryKey:o,stale:a}=t;if(o){if(i){if(e.queryHash!==cp(o,e.options))return!1}else if(!ua(e.queryKey,o))return!1}if(n!=="all"){const l=e.isActive();if(n==="active"&&!l||n==="inactive"&&l)return!1}return!(typeof a=="boolean"&&e.isStale()!==a||r&&r!==e.state.fetchStatus||s&&!s(e))}function Fg(t,e){const{exact:n,status:i,predicate:r,mutationKey:s}=t;if(s){if(!e.options.mutationKey)return!1;if(n){if(la(e.options.mutationKey)!==la(s))return!1}else if(!ua(e.options.mutationKey,s))return!1}return!(i&&e.state.status!==i||r&&!r(e))}function cp(t,e){return((e==null?void 0:e.queryKeyHashFn)||la)(t)}function la(t){return JSON.stringify(t,(e,n)=>Af(n)?Object.keys(n).sort().reduce((i,r)=>(i[r]=n[r],i),{}):n)}function ua(t,e){return t===e?!0:typeof t!=typeof e?!1:t&&e&&typeof t=="object"&&typeof e=="object"?!Object.keys(e).some(n=>!ua(t[n],e[n])):!1}function r_(t,e){if(t===e)return t;const n=Ig(t)&&Ig(e);if(n||Af(t)&&Af(e)){const i=n?t:Object.keys(t),r=i.length,s=n?e:Object.keys(e),o=s.length,a=n?[]:{};let l=0;for(let u=0;u<o;u++){const c=n?u:s[u];(!n&&i.includes(c)||n)&&t[c]===void 0&&e[c]===void 0?(a[c]=void 0,l++):(a[c]=r_(t[c],e[c]),a[c]===t[c]&&t[c]!==void 0&&l++)}return r===o&&l===r?t:a}return e}function Ig(t){return Array.isArray(t)&&t.length===Object.keys(t).length}function Af(t){if(!Og(t))return!1;const e=t.constructor;if(e===void 0)return!0;const n=e.prototype;return!(!Og(n)||!n.hasOwnProperty("isPrototypeOf")||Object.getPrototypeOf(t)!==Object.prototype)}function Og(t){return Object.prototype.toString.call(t)==="[object Object]"}function MD(t){return new Promise(e=>{setTimeout(e,t)})}function DD(t,e,n){return typeof n.structuralSharing=="function"?n.structuralSharing(t,e):n.structuralSharing!==!1?r_(t,e):e}function ND(t,e,n=0){const i=[...t,e];return n&&i.length>n?i.slice(1):i}function AD(t,e,n=0){const i=[e,...t];return n&&i.length>n?i.slice(0,-1):i}var dp=Symbol();function s_(t,e){return!t.queryFn&&(e!=null&&e.initialPromise)?()=>e.initialPromise:!t.queryFn||t.queryFn===dp?()=>Promise.reject(new Error(`Missing queryFn: '${t.queryHash}'`)):t.queryFn}var Tr,Fi,Es,Uv,RD=(Uv=class extends sc{constructor(){super();xe(this,Tr);xe(this,Fi);xe(this,Es);ae(this,Es,e=>{if(!oc&&window.addEventListener){const n=()=>e();return window.addEventListener("visibilitychange",n,!1),()=>{window.removeEventListener("visibilitychange",n)}}})}onSubscribe(){N(this,Fi)||this.setEventListener(N(this,Es))}onUnsubscribe(){var e;this.hasListeners()||((e=N(this,Fi))==null||e.call(this),ae(this,Fi,void 0))}setEventListener(e){var n;ae(this,Es,e),(n=N(this,Fi))==null||n.call(this),ae(this,Fi,e(i=>{typeof i=="boolean"?this.setFocused(i):this.onFocus()}))}setFocused(e){N(this,Tr)!==e&&(ae(this,Tr,e),this.onFocus())}onFocus(){const e=this.isFocused();this.listeners.forEach(n=>{n(e)})}isFocused(){var e;return typeof N(this,Tr)=="boolean"?N(this,Tr):((e=globalThis.document)==null?void 0:e.visibilityState)!=="hidden"}},Tr=new WeakMap,Fi=new WeakMap,Es=new WeakMap,Uv),o_=new RD,Ms,Ii,Ds,$v,FD=($v=class extends sc{constructor(){super();xe(this,Ms,!0);xe(this,Ii);xe(this,Ds);ae(this,Ds,e=>{if(!oc&&window.addEventListener){const n=()=>e(!0),i=()=>e(!1);return window.addEventListener("online",n,!1),window.addEventListener("offline",i,!1),()=>{window.removeEventListener("online",n),window.removeEventListener("offline",i)}}})}onSubscribe(){N(this,Ii)||this.setEventListener(N(this,Ds))}onUnsubscribe(){var e;this.hasListeners()||((e=N(this,Ii))==null||e.call(this),ae(this,Ii,void 0))}setEventListener(e){var n;ae(this,Ds,e),(n=N(this,Ii))==null||n.call(this),ae(this,Ii,e(this.setOnline.bind(this)))}setOnline(e){N(this,Ms)!==e&&(ae(this,Ms,e),this.listeners.forEach(i=>{i(e)}))}isOnline(){return N(this,Ms)}},Ms=new WeakMap,Ii=new WeakMap,Ds=new WeakMap,$v),cu=new FD;function ID(){let t,e;const n=new Promise((r,s)=>{t=r,e=s});n.status="pending",n.catch(()=>{});function i(r){Object.assign(n,r),delete n.resolve,delete n.reject}return n.resolve=r=>{i({status:"fulfilled",value:r}),t(r)},n.reject=r=>{i({status:"rejected",reason:r}),e(r)},n}function OD(t){return Math.min(1e3*2**t,3e4)}function a_(t){return(t??"online")==="online"?cu.isOnline():!0}var l_=class extends Error{constructor(t){super("CancelledError"),this.revert=t==null?void 0:t.revert,this.silent=t==null?void 0:t.silent}};function Yc(t){return t instanceof l_}function u_(t){let e=!1,n=0,i=!1,r;const s=ID(),o=y=>{var w;i||(f(new l_(y)),(w=t.abort)==null||w.call(t))},a=()=>{e=!0},l=()=>{e=!1},u=()=>o_.isFocused()&&(t.networkMode==="always"||cu.isOnline())&&t.canRun(),c=()=>a_(t.networkMode)&&t.canRun(),d=y=>{var w;i||(i=!0,(w=t.onSuccess)==null||w.call(t,y),r==null||r(),s.resolve(y))},f=y=>{var w;i||(i=!0,(w=t.onError)==null||w.call(t,y),r==null||r(),s.reject(y))},h=()=>new Promise(y=>{var w;r=g=>{(i||u())&&y(g)},(w=t.onPause)==null||w.call(t)}).then(()=>{var y;r=void 0,i||(y=t.onContinue)==null||y.call(t)}),v=()=>{if(i)return;let y;const w=n===0?t.initialPromise:void 0;try{y=w??t.fn()}catch(g){y=Promise.reject(g)}Promise.resolve(y).then(d).catch(g=>{var E;if(i)return;const m=t.retry??(oc?0:3),x=t.retryDelay??OD,b=typeof x=="function"?x(n,g):x,k=m===!0||typeof m=="number"&&n<m||typeof m=="function"&&m(n,g);if(e||!k){f(g);return}n++,(E=t.onFail)==null||E.call(t,n,g),MD(b).then(()=>u()?void 0:h()).then(()=>{e?f(g):v()})})};return{promise:s,cancel:o,continue:()=>(r==null||r(),s),cancelRetry:a,continueRetry:l,canStart:c,start:()=>(c()?v():h().then(v),s)}}function jD(){let t=[],e=0,n=a=>{a()},i=a=>{a()},r=a=>setTimeout(a,0);const s=a=>{e?t.push(a):r(()=>{n(a)})},o=()=>{const a=t;t=[],a.length&&r(()=>{i(()=>{a.forEach(l=>{n(l)})})})};return{batch:a=>{let l;e++;try{l=a()}finally{e--,e||o()}return l},batchCalls:a=>(...l)=>{s(()=>{a(...l)})},schedule:s,setNotifyFunction:a=>{n=a},setBatchNotifyFunction:a=>{i=a},setScheduler:a=>{r=a}}}var Pt=jD(),Pr,Wv,c_=(Wv=class{constructor(){xe(this,Pr)}destroy(){this.clearGcTimeout()}scheduleGc(){this.clearGcTimeout(),TD(this.gcTime)&&ae(this,Pr,setTimeout(()=>{this.optionalRemove()},this.gcTime))}updateGcTime(t){this.gcTime=Math.max(this.gcTime||0,t??(oc?1/0:5*60*1e3))}clearGcTimeout(){N(this,Pr)&&(clearTimeout(N(this,Pr)),ae(this,Pr,void 0))}},Pr=new WeakMap,Wv),Ns,As,on,pt,Na,Er,Sn,ni,Hv,LD=(Hv=class extends c_{constructor(e){super();xe(this,Sn);xe(this,Ns);xe(this,As);xe(this,on);xe(this,pt);xe(this,Na);xe(this,Er);ae(this,Er,!1),ae(this,Na,e.defaultOptions),this.setOptions(e.options),this.observers=[],ae(this,on,e.cache),this.queryKey=e.queryKey,this.queryHash=e.queryHash,ae(this,Ns,VD(this.options)),this.state=e.state??N(this,Ns),this.scheduleGc()}get meta(){return this.options.meta}get promise(){var e;return(e=N(this,pt))==null?void 0:e.promise}setOptions(e){this.options={...N(this,Na),...e},this.updateGcTime(this.options.gcTime)}optionalRemove(){!this.observers.length&&this.state.fetchStatus==="idle"&&N(this,on).remove(this)}setData(e,n){const i=DD(this.state.data,e,this.options);return dt(this,Sn,ni).call(this,{data:i,type:"success",dataUpdatedAt:n==null?void 0:n.updatedAt,manual:n==null?void 0:n.manual}),i}setState(e,n){dt(this,Sn,ni).call(this,{type:"setState",state:e,setStateOptions:n})}cancel(e){var i,r;const n=(i=N(this,pt))==null?void 0:i.promise;return(r=N(this,pt))==null||r.cancel(e),n?n.then(bn).catch(bn):Promise.resolve()}destroy(){super.destroy(),this.cancel({silent:!0})}reset(){this.destroy(),this.setState(N(this,Ns))}isActive(){return this.observers.some(e=>ED(e.options.enabled,this)!==!1)}isDisabled(){return this.getObserversCount()>0?!this.isActive():this.options.queryFn===dp||this.state.dataUpdateCount+this.state.errorUpdateCount===0}isStale(){return this.state.isInvalidated?!0:this.getObserversCount()>0?this.observers.some(e=>e.getCurrentResult().isStale):this.state.data===void 0}isStaleByTime(e=0){return this.state.isInvalidated||this.state.data===void 0||!PD(this.state.dataUpdatedAt,e)}onFocus(){var n;const e=this.observers.find(i=>i.shouldFetchOnWindowFocus());e==null||e.refetch({cancelRefetch:!1}),(n=N(this,pt))==null||n.continue()}onOnline(){var n;const e=this.observers.find(i=>i.shouldFetchOnReconnect());e==null||e.refetch({cancelRefetch:!1}),(n=N(this,pt))==null||n.continue()}addObserver(e){this.observers.includes(e)||(this.observers.push(e),this.clearGcTimeout(),N(this,on).notify({type:"observerAdded",query:this,observer:e}))}removeObserver(e){this.observers.includes(e)&&(this.observers=this.observers.filter(n=>n!==e),this.observers.length||(N(this,pt)&&(N(this,Er)?N(this,pt).cancel({revert:!0}):N(this,pt).cancelRetry()),this.scheduleGc()),N(this,on).notify({type:"observerRemoved",query:this,observer:e}))}getObserversCount(){return this.observers.length}invalidate(){this.state.isInvalidated||dt(this,Sn,ni).call(this,{type:"invalidate"})}fetch(e,n){var l,u,c;if(this.state.fetchStatus!=="idle"){if(this.state.data!==void 0&&(n!=null&&n.cancelRefetch))this.cancel({silent:!0});else if(N(this,pt))return N(this,pt).continueRetry(),N(this,pt).promise}if(e&&this.setOptions(e),!this.options.queryFn){const d=this.observers.find(f=>f.options.queryFn);d&&this.setOptions(d.options)}const i=new AbortController,r=d=>{Object.defineProperty(d,"signal",{enumerable:!0,get:()=>(ae(this,Er,!0),i.signal)})},s=()=>{const d=s_(this.options,n),f={queryKey:this.queryKey,meta:this.meta};return r(f),ae(this,Er,!1),this.options.persister?this.options.persister(d,f,this):d(f)},o={fetchOptions:n,options:this.options,queryKey:this.queryKey,state:this.state,fetchFn:s};r(o),(l=this.options.behavior)==null||l.onFetch(o,this),ae(this,As,this.state),(this.state.fetchStatus==="idle"||this.state.fetchMeta!==((u=o.fetchOptions)==null?void 0:u.meta))&&dt(this,Sn,ni).call(this,{type:"fetch",meta:(c=o.fetchOptions)==null?void 0:c.meta});const a=d=>{var f,h,v,y;Yc(d)&&d.silent||dt(this,Sn,ni).call(this,{type:"error",error:d}),Yc(d)||((h=(f=N(this,on).config).onError)==null||h.call(f,d,this),(y=(v=N(this,on).config).onSettled)==null||y.call(v,this.state.data,d,this)),this.scheduleGc()};return ae(this,pt,u_({initialPromise:n==null?void 0:n.initialPromise,fn:o.fetchFn,abort:i.abort.bind(i),onSuccess:d=>{var f,h,v,y;if(d===void 0){a(new Error(`${this.queryHash} data is undefined`));return}try{this.setData(d)}catch(w){a(w);return}(h=(f=N(this,on).config).onSuccess)==null||h.call(f,d,this),(y=(v=N(this,on).config).onSettled)==null||y.call(v,d,this.state.error,this),this.scheduleGc()},onError:a,onFail:(d,f)=>{dt(this,Sn,ni).call(this,{type:"failed",failureCount:d,error:f})},onPause:()=>{dt(this,Sn,ni).call(this,{type:"pause"})},onContinue:()=>{dt(this,Sn,ni).call(this,{type:"continue"})},retry:o.options.retry,retryDelay:o.options.retryDelay,networkMode:o.options.networkMode,canRun:()=>!0})),N(this,pt).start()}},Ns=new WeakMap,As=new WeakMap,on=new WeakMap,pt=new WeakMap,Na=new WeakMap,Er=new WeakMap,Sn=new WeakSet,ni=function(e){const n=i=>{switch(e.type){case"failed":return{...i,fetchFailureCount:e.failureCount,fetchFailureReason:e.error};case"pause":return{...i,fetchStatus:"paused"};case"continue":return{...i,fetchStatus:"fetching"};case"fetch":return{...i,...zD(i.data,this.options),fetchMeta:e.meta??null};case"success":return{...i,data:e.data,dataUpdateCount:i.dataUpdateCount+1,dataUpdatedAt:e.dataUpdatedAt??Date.now(),error:null,isInvalidated:!1,status:"success",...!e.manual&&{fetchStatus:"idle",fetchFailureCount:0,fetchFailureReason:null}};case"error":const r=e.error;return Yc(r)&&r.revert&&N(this,As)?{...N(this,As),fetchStatus:"idle"}:{...i,error:r,errorUpdateCount:i.errorUpdateCount+1,errorUpdatedAt:Date.now(),fetchFailureCount:i.fetchFailureCount+1,fetchFailureReason:r,fetchStatus:"idle",status:"error"};case"invalidate":return{...i,isInvalidated:!0};case"setState":return{...i,...e.state}}};this.state=n(this.state),Pt.batch(()=>{this.observers.forEach(i=>{i.onQueryUpdate()}),N(this,on).notify({query:this,type:"updated",action:e})})},Hv);function zD(t,e){return{fetchFailureCount:0,fetchFailureReason:null,fetchStatus:a_(e.networkMode)?"fetching":"paused",...t===void 0&&{error:null,status:"pending"}}}function VD(t){const e=typeof t.initialData=="function"?t.initialData():t.initialData,n=e!==void 0,i=n?typeof t.initialDataUpdatedAt=="function"?t.initialDataUpdatedAt():t.initialDataUpdatedAt:0;return{data:e,dataUpdateCount:0,dataUpdatedAt:n?i??Date.now():0,error:null,errorUpdateCount:0,errorUpdatedAt:0,fetchFailureCount:0,fetchFailureReason:null,fetchMeta:null,isInvalidated:!1,status:n?"success":"pending",fetchStatus:"idle"}}var Vn,qv,BD=(qv=class extends sc{constructor(e={}){super();xe(this,Vn);this.config=e,ae(this,Vn,new Map)}build(e,n,i){const r=n.queryKey,s=n.queryHash??cp(r,n);let o=this.get(s);return o||(o=new LD({cache:this,queryKey:r,queryHash:s,options:e.defaultQueryOptions(n),state:i,defaultOptions:e.getQueryDefaults(r)}),this.add(o)),o}add(e){N(this,Vn).has(e.queryHash)||(N(this,Vn).set(e.queryHash,e),this.notify({type:"added",query:e}))}remove(e){const n=N(this,Vn).get(e.queryHash);n&&(e.destroy(),n===e&&N(this,Vn).delete(e.queryHash),this.notify({type:"removed",query:e}))}clear(){Pt.batch(()=>{this.getAll().forEach(e=>{this.remove(e)})})}get(e){return N(this,Vn).get(e)}getAll(){return[...N(this,Vn).values()]}find(e){const n={exact:!0,...e};return this.getAll().find(i=>Rg(n,i))}findAll(e={}){const n=this.getAll();return Object.keys(e).length>0?n.filter(i=>Rg(e,i)):n}notify(e){Pt.batch(()=>{this.listeners.forEach(n=>{n(e)})})}onFocus(){Pt.batch(()=>{this.getAll().forEach(e=>{e.onFocus()})})}onOnline(){Pt.batch(()=>{this.getAll().forEach(e=>{e.onOnline()})})}},Vn=new WeakMap,qv),Bn,kt,Mr,Un,Ti,Gv,UD=(Gv=class extends c_{constructor(e){super();xe(this,Un);xe(this,Bn);xe(this,kt);xe(this,Mr);this.mutationId=e.mutationId,ae(this,kt,e.mutationCache),ae(this,Bn,[]),this.state=e.state||$D(),this.setOptions(e.options),this.scheduleGc()}setOptions(e){this.options=e,this.updateGcTime(this.options.gcTime)}get meta(){return this.options.meta}addObserver(e){N(this,Bn).includes(e)||(N(this,Bn).push(e),this.clearGcTimeout(),N(this,kt).notify({type:"observerAdded",mutation:this,observer:e}))}removeObserver(e){ae(this,Bn,N(this,Bn).filter(n=>n!==e)),this.scheduleGc(),N(this,kt).notify({type:"observerRemoved",mutation:this,observer:e})}optionalRemove(){N(this,Bn).length||(this.state.status==="pending"?this.scheduleGc():N(this,kt).remove(this))}continue(){var e;return((e=N(this,Mr))==null?void 0:e.continue())??this.execute(this.state.variables)}async execute(e){var r,s,o,a,l,u,c,d,f,h,v,y,w,g,m,x,b,k,E,M;ae(this,Mr,u_({fn:()=>this.options.mutationFn?this.options.mutationFn(e):Promise.reject(new Error("No mutationFn found")),onFail:(P,L)=>{dt(this,Un,Ti).call(this,{type:"failed",failureCount:P,error:L})},onPause:()=>{dt(this,Un,Ti).call(this,{type:"pause"})},onContinue:()=>{dt(this,Un,Ti).call(this,{type:"continue"})},retry:this.options.retry??0,retryDelay:this.options.retryDelay,networkMode:this.options.networkMode,canRun:()=>N(this,kt).canRun(this)}));const n=this.state.status==="pending",i=!N(this,Mr).canStart();try{if(!n){dt(this,Un,Ti).call(this,{type:"pending",variables:e,isPaused:i}),await((s=(r=N(this,kt).config).onMutate)==null?void 0:s.call(r,e,this));const L=await((a=(o=this.options).onMutate)==null?void 0:a.call(o,e));L!==this.state.context&&dt(this,Un,Ti).call(this,{type:"pending",context:L,variables:e,isPaused:i})}const P=await N(this,Mr).start();return await((u=(l=N(this,kt).config).onSuccess)==null?void 0:u.call(l,P,e,this.state.context,this)),await((d=(c=this.options).onSuccess)==null?void 0:d.call(c,P,e,this.state.context)),await((h=(f=N(this,kt).config).onSettled)==null?void 0:h.call(f,P,null,this.state.variables,this.state.context,this)),await((y=(v=this.options).onSettled)==null?void 0:y.call(v,P,null,e,this.state.context)),dt(this,Un,Ti).call(this,{type:"success",data:P}),P}catch(P){try{throw await((g=(w=N(this,kt).config).onError)==null?void 0:g.call(w,P,e,this.state.context,this)),await((x=(m=this.options).onError)==null?void 0:x.call(m,P,e,this.state.context)),await((k=(b=N(this,kt).config).onSettled)==null?void 0:k.call(b,void 0,P,this.state.variables,this.state.context,this)),await((M=(E=this.options).onSettled)==null?void 0:M.call(E,void 0,P,e,this.state.context)),P}finally{dt(this,Un,Ti).call(this,{type:"error",error:P})}}finally{N(this,kt).runNext(this)}}},Bn=new WeakMap,kt=new WeakMap,Mr=new WeakMap,Un=new WeakSet,Ti=function(e){const n=i=>{switch(e.type){case"failed":return{...i,failureCount:e.failureCount,failureReason:e.error};case"pause":return{...i,isPaused:!0};case"continue":return{...i,isPaused:!1};case"pending":return{...i,context:e.context,data:void 0,failureCount:0,failureReason:null,error:null,isPaused:e.isPaused,status:"pending",variables:e.variables,submittedAt:Date.now()};case"success":return{...i,data:e.data,failureCount:0,failureReason:null,error:null,status:"success",isPaused:!1};case"error":return{...i,data:void 0,error:e.error,failureCount:i.failureCount+1,failureReason:e.error,isPaused:!1,status:"error"}}};this.state=n(this.state),Pt.batch(()=>{N(this,Bn).forEach(i=>{i.onMutationUpdate(e)}),N(this,kt).notify({mutation:this,type:"updated",action:e})})},Gv);function $D(){return{context:void 0,data:void 0,error:null,failureCount:0,failureReason:null,isPaused:!1,status:"idle",variables:void 0,submittedAt:0}}var Ut,Aa,Qv,WD=(Qv=class extends sc{constructor(e={}){super();xe(this,Ut);xe(this,Aa);this.config=e,ae(this,Ut,new Map),ae(this,Aa,Date.now())}build(e,n,i){const r=new UD({mutationCache:this,mutationId:++Ga(this,Aa)._,options:e.defaultMutationOptions(n),state:i});return this.add(r),r}add(e){const n=dl(e),i=N(this,Ut).get(n)??[];i.push(e),N(this,Ut).set(n,i),this.notify({type:"added",mutation:e})}remove(e){var i;const n=dl(e);if(N(this,Ut).has(n)){const r=(i=N(this,Ut).get(n))==null?void 0:i.filter(s=>s!==e);r&&(r.length===0?N(this,Ut).delete(n):N(this,Ut).set(n,r))}this.notify({type:"removed",mutation:e})}canRun(e){var i;const n=(i=N(this,Ut).get(dl(e)))==null?void 0:i.find(r=>r.state.status==="pending");return!n||n===e}runNext(e){var i;const n=(i=N(this,Ut).get(dl(e)))==null?void 0:i.find(r=>r!==e&&r.state.isPaused);return(n==null?void 0:n.continue())??Promise.resolve()}clear(){Pt.batch(()=>{this.getAll().forEach(e=>{this.remove(e)})})}getAll(){return[...N(this,Ut).values()].flat()}find(e){const n={exact:!0,...e};return this.getAll().find(i=>Fg(n,i))}findAll(e={}){return this.getAll().filter(n=>Fg(e,n))}notify(e){Pt.batch(()=>{this.listeners.forEach(n=>{n(e)})})}resumePausedMutations(){const e=this.getAll().filter(n=>n.state.isPaused);return Pt.batch(()=>Promise.all(e.map(n=>n.continue().catch(bn))))}},Ut=new WeakMap,Aa=new WeakMap,Qv);function dl(t){var e;return((e=t.options.scope)==null?void 0:e.id)??String(t.mutationId)}function jg(t){return{onFetch:(e,n)=>{var c,d,f,h,v;const i=e.options,r=(f=(d=(c=e.fetchOptions)==null?void 0:c.meta)==null?void 0:d.fetchMore)==null?void 0:f.direction,s=((h=e.state.data)==null?void 0:h.pages)||[],o=((v=e.state.data)==null?void 0:v.pageParams)||[];let a={pages:[],pageParams:[]},l=0;const u=async()=>{let y=!1;const w=x=>{Object.defineProperty(x,"signal",{enumerable:!0,get:()=>(e.signal.aborted?y=!0:e.signal.addEventListener("abort",()=>{y=!0}),e.signal)})},g=s_(e.options,e.fetchOptions),m=async(x,b,k)=>{if(y)return Promise.reject();if(b==null&&x.pages.length)return Promise.resolve(x);const E={queryKey:e.queryKey,pageParam:b,direction:k?"backward":"forward",meta:e.options.meta};w(E);const M=await g(E),{maxPages:P}=e.options,L=k?AD:ND;return{pages:L(x.pages,M,P),pageParams:L(x.pageParams,b,P)}};if(r&&s.length){const x=r==="backward",b=x?HD:Lg,k={pages:s,pageParams:o},E=b(i,k);a=await m(k,E,x)}else{const x=t??s.length;do{const b=l===0?o[0]??i.initialPageParam:Lg(i,a);if(l>0&&b==null)break;a=await m(a,b),l++}while(l<x)}return a};e.options.persister?e.fetchFn=()=>{var y,w;return(w=(y=e.options).persister)==null?void 0:w.call(y,u,{queryKey:e.queryKey,meta:e.options.meta,signal:e.signal},n)}:e.fetchFn=u}}}function Lg(t,{pages:e,pageParams:n}){const i=e.length-1;return e.length>0?t.getNextPageParam(e[i],e,n[i],n):void 0}function HD(t,{pages:e,pageParams:n}){var i;return e.length>0?(i=t.getPreviousPageParam)==null?void 0:i.call(t,e[0],e,n[0],n):void 0}var Le,Oi,ji,Rs,Fs,Li,Is,Os,Kv,qD=(Kv=class{constructor(t={}){xe(this,Le);xe(this,Oi);xe(this,ji);xe(this,Rs);xe(this,Fs);xe(this,Li);xe(this,Is);xe(this,Os);ae(this,Le,t.queryCache||new BD),ae(this,Oi,t.mutationCache||new WD),ae(this,ji,t.defaultOptions||{}),ae(this,Rs,new Map),ae(this,Fs,new Map),ae(this,Li,0)}mount(){Ga(this,Li)._++,N(this,Li)===1&&(ae(this,Is,o_.subscribe(async t=>{t&&(await this.resumePausedMutations(),N(this,Le).onFocus())})),ae(this,Os,cu.subscribe(async t=>{t&&(await this.resumePausedMutations(),N(this,Le).onOnline())})))}unmount(){var t,e;Ga(this,Li)._--,N(this,Li)===0&&((t=N(this,Is))==null||t.call(this),ae(this,Is,void 0),(e=N(this,Os))==null||e.call(this),ae(this,Os,void 0))}isFetching(t){return N(this,Le).findAll({...t,fetchStatus:"fetching"}).length}isMutating(t){return N(this,Oi).findAll({...t,status:"pending"}).length}getQueryData(t){var n;const e=this.defaultQueryOptions({queryKey:t});return(n=N(this,Le).get(e.queryHash))==null?void 0:n.state.data}ensureQueryData(t){const e=this.getQueryData(t.queryKey);if(e===void 0)return this.fetchQuery(t);{const n=this.defaultQueryOptions(t),i=N(this,Le).build(this,n);return t.revalidateIfStale&&i.isStaleByTime(Ag(n.staleTime,i))&&this.prefetchQuery(n),Promise.resolve(e)}}getQueriesData(t){return N(this,Le).findAll(t).map(({queryKey:e,state:n})=>{const i=n.data;return[e,i]})}setQueryData(t,e,n){const i=this.defaultQueryOptions({queryKey:t}),r=N(this,Le).get(i.queryHash),s=r==null?void 0:r.state.data,o=CD(e,s);if(o!==void 0)return N(this,Le).build(this,i).setData(o,{...n,manual:!0})}setQueriesData(t,e,n){return Pt.batch(()=>N(this,Le).findAll(t).map(({queryKey:i})=>[i,this.setQueryData(i,e,n)]))}getQueryState(t){var n;const e=this.defaultQueryOptions({queryKey:t});return(n=N(this,Le).get(e.queryHash))==null?void 0:n.state}removeQueries(t){const e=N(this,Le);Pt.batch(()=>{e.findAll(t).forEach(n=>{e.remove(n)})})}resetQueries(t,e){const n=N(this,Le),i={type:"active",...t};return Pt.batch(()=>(n.findAll(t).forEach(r=>{r.reset()}),this.refetchQueries(i,e)))}cancelQueries(t={},e={}){const n={revert:!0,...e},i=Pt.batch(()=>N(this,Le).findAll(t).map(r=>r.cancel(n)));return Promise.all(i).then(bn).catch(bn)}invalidateQueries(t={},e={}){return Pt.batch(()=>{if(N(this,Le).findAll(t).forEach(i=>{i.invalidate()}),t.refetchType==="none")return Promise.resolve();const n={...t,type:t.refetchType??t.type??"active"};return this.refetchQueries(n,e)})}refetchQueries(t={},e){const n={...e,cancelRefetch:(e==null?void 0:e.cancelRefetch)??!0},i=Pt.batch(()=>N(this,Le).findAll(t).filter(r=>!r.isDisabled()).map(r=>{let s=r.fetch(void 0,n);return n.throwOnError||(s=s.catch(bn)),r.state.fetchStatus==="paused"?Promise.resolve():s}));return Promise.all(i).then(bn)}fetchQuery(t){const e=this.defaultQueryOptions(t);e.retry===void 0&&(e.retry=!1);const n=N(this,Le).build(this,e);return n.isStaleByTime(Ag(e.staleTime,n))?n.fetch(e):Promise.resolve(n.state.data)}prefetchQuery(t){return this.fetchQuery(t).then(bn).catch(bn)}fetchInfiniteQuery(t){return t.behavior=jg(t.pages),this.fetchQuery(t)}prefetchInfiniteQuery(t){return this.fetchInfiniteQuery(t).then(bn).catch(bn)}ensureInfiniteQueryData(t){return t.behavior=jg(t.pages),this.ensureQueryData(t)}resumePausedMutations(){return cu.isOnline()?N(this,Oi).resumePausedMutations():Promise.resolve()}getQueryCache(){return N(this,Le)}getMutationCache(){return N(this,Oi)}getDefaultOptions(){return N(this,ji)}setDefaultOptions(t){ae(this,ji,t)}setQueryDefaults(t,e){N(this,Rs).set(la(t),{queryKey:t,defaultOptions:e})}getQueryDefaults(t){const e=[...N(this,Rs).values()];let n={};return e.forEach(i=>{ua(t,i.queryKey)&&(n={...n,...i.defaultOptions})}),n}setMutationDefaults(t,e){N(this,Fs).set(la(t),{mutationKey:t,defaultOptions:e})}getMutationDefaults(t){const e=[...N(this,Fs).values()];let n={};return e.forEach(i=>{ua(t,i.mutationKey)&&(n={...n,...i.defaultOptions})}),n}defaultQueryOptions(t){if(t._defaulted)return t;const e={...N(this,ji).queries,...this.getQueryDefaults(t.queryKey),...t,_defaulted:!0};return e.queryHash||(e.queryHash=cp(e.queryKey,e)),e.refetchOnReconnect===void 0&&(e.refetchOnReconnect=e.networkMode!=="always"),e.throwOnError===void 0&&(e.throwOnError=!!e.suspense),!e.networkMode&&e.persister&&(e.networkMode="offlineFirst"),e.enabled!==!0&&e.queryFn===dp&&(e.enabled=!1),e}defaultMutationOptions(t){return t!=null&&t._defaulted?t:{...N(this,ji).mutations,...(t==null?void 0:t.mutationKey)&&this.getMutationDefaults(t.mutationKey),...t,_defaulted:!0}}clear(){N(this,Le).clear(),N(this,Oi).clear()}},Le=new WeakMap,Oi=new WeakMap,ji=new WeakMap,Rs=new WeakMap,Fs=new WeakMap,Li=new WeakMap,Is=new WeakMap,Os=new WeakMap,Kv),GD=S.createContext(void 0),QD=({client:t,children:e})=>(S.useEffect(()=>(t.mount(),()=>{t.unmount()}),[t]),p.jsx(GD.Provider,{value:t,children:e}));async function d_(t){if(!t.ok){const e=await t.text()||t.statusText;throw new Error(`${t.status}: ${e}`)}}async function KD(t,e,n){const i=await fetch(e,{method:t,headers:n?{"Content-Type":"application/json"}:{},body:n?JSON.stringify(n):void 0,credentials:"include"});return await d_(i),i}const ZD=({on401:t})=>async({queryKey:e})=>{const n=await fetch(e[0],{credentials:"include"});return t==="returnNull"&&n.status===401?null:(await d_(n),await n.json())},XD=new qD({defaultOptions:{queries:{queryFn:ZD({on401:"throw"}),refetchInterval:!1,refetchOnWindowFocus:!1,staleTime:1/0,retry:!1},mutations:{retry:!1}}}),YD=1,JD=1e6;let Jc=0;function eN(){return Jc=(Jc+1)%Number.MAX_SAFE_INTEGER,Jc.toString()}const ed=new Map,zg=t=>{if(ed.has(t))return;const e=setTimeout(()=>{ed.delete(t),Lo({type:"REMOVE_TOAST",toastId:t})},JD);ed.set(t,e)},tN=(t,e)=>{switch(e.type){case"ADD_TOAST":return{...t,toasts:[e.toast,...t.toasts].slice(0,YD)};case"UPDATE_TOAST":return{...t,toasts:t.toasts.map(n=>n.id===e.toast.id?{...n,...e.toast}:n)};case"DISMISS_TOAST":{const{toastId:n}=e;return n?zg(n):t.toasts.forEach(i=>{zg(i.id)}),{...t,toasts:t.toasts.map(i=>i.id===n||n===void 0?{...i,open:!1}:i)}}case"REMOVE_TOAST":return e.toastId===void 0?{...t,toasts:[]}:{...t,toasts:t.toasts.filter(n=>n.id!==e.toastId)}}},Nl=[];let Al={toasts:[]};function Lo(t){Al=tN(Al,t),Nl.forEach(e=>{e(Al)})}function nN({...t}){const e=eN(),n=r=>Lo({type:"UPDATE_TOAST",toast:{...r,id:e}}),i=()=>Lo({type:"DISMISS_TOAST",toastId:e});return Lo({type:"ADD_TOAST",toast:{...t,id:e,open:!0,onOpenChange:r=>{r||i()}}}),{id:e,dismiss:i,update:n}}function f_(){const[t,e]=S.useState(Al);return S.useEffect(()=>(Nl.push(e),()=>{const n=Nl.indexOf(e);n>-1&&Nl.splice(n,1)}),[t]),{...t,toast:nN,dismiss:n=>Lo({type:"DISMISS_TOAST",toastId:n})}}function Ht(t,e,{checkForDefaultPrevented:n=!0}={}){return function(r){if(t==null||t(r),n===!1||!r.defaultPrevented)return e==null?void 0:e(r)}}function iN(t,e){typeof t=="function"?t(e):t!=null&&(t.current=e)}function h_(...t){return e=>t.forEach(n=>iN(n,e))}function zr(...t){return S.useCallback(h_(...t),t)}function rN(t,e=[]){let n=[];function i(s,o){const a=S.createContext(o),l=n.length;n=[...n,o];function u(d){const{scope:f,children:h,...v}=d,y=(f==null?void 0:f[t][l])||a,w=S.useMemo(()=>v,Object.values(v));return p.jsx(y.Provider,{value:w,children:h})}function c(d,f){const h=(f==null?void 0:f[t][l])||a,v=S.useContext(h);if(v)return v;if(o!==void 0)return o;throw new Error(`\`${d}\` must be used within \`${s}\``)}return u.displayName=s+"Provider",[u,c]}const r=()=>{const s=n.map(o=>S.createContext(o));return function(a){const l=(a==null?void 0:a[t])||s;return S.useMemo(()=>({[`__scope${t}`]:{...a,[t]:l}}),[a,l])}};return r.scopeName=t,[i,sN(r,...e)]}function sN(...t){const e=t[0];if(t.length===1)return e;const n=()=>{const i=t.map(r=>({useScope:r(),scopeName:r.scopeName}));return function(s){const o=i.reduce((a,{useScope:l,scopeName:u})=>{const d=l(s)[`__scope${u}`];return{...a,...d}},{});return S.useMemo(()=>({[`__scope${e.scopeName}`]:o}),[o])}};return n.scopeName=e.scopeName,n}var du=S.forwardRef((t,e)=>{const{children:n,...i}=t,r=S.Children.toArray(n),s=r.find(aN);if(s){const o=s.props.children,a=r.map(l=>l===s?S.Children.count(o)>1?S.Children.only(null):S.isValidElement(o)?o.props.children:null:l);return p.jsx(Rf,{...i,ref:e,children:S.isValidElement(o)?S.cloneElement(o,void 0,a):null})}return p.jsx(Rf,{...i,ref:e,children:n})});du.displayName="Slot";var Rf=S.forwardRef((t,e)=>{const{children:n,...i}=t;if(S.isValidElement(n)){const r=uN(n);return S.cloneElement(n,{...lN(i,n.props),ref:e?h_(e,r):r})}return S.Children.count(n)>1?S.Children.only(null):null});Rf.displayName="SlotClone";var oN=({children:t})=>p.jsx(p.Fragment,{children:t});function aN(t){return S.isValidElement(t)&&t.type===oN}function lN(t,e){const n={...e};for(const i in e){const r=t[i],s=e[i];/^on[A-Z]/.test(i)?r&&s?n[i]=(...a)=>{s(...a),r(...a)}:r&&(n[i]=r):i==="style"?n[i]={...r,...s}:i==="className"&&(n[i]=[r,s].filter(Boolean).join(" "))}return{...t,...n}}function uN(t){var i,r;let e=(i=Object.getOwnPropertyDescriptor(t.props,"ref"))==null?void 0:i.get,n=e&&"isReactWarning"in e&&e.isReactWarning;return n?t.ref:(e=(r=Object.getOwnPropertyDescriptor(t,"ref"))==null?void 0:r.get,n=e&&"isReactWarning"in e&&e.isReactWarning,n?t.props.ref:t.props.ref||t.ref)}function cN(t){const e=t+"CollectionProvider",[n,i]=rN(e),[r,s]=n(e,{collectionRef:{current:null},itemMap:new Map}),o=h=>{const{scope:v,children:y}=h,w=Me.useRef(null),g=Me.useRef(new Map).current;return p.jsx(r,{scope:v,itemMap:g,collectionRef:w,children:y})};o.displayName=e;const a=t+"CollectionSlot",l=Me.forwardRef((h,v)=>{const{scope:y,children:w}=h,g=s(a,y),m=zr(v,g.collectionRef);return p.jsx(du,{ref:m,children:w})});l.displayName=a;const u=t+"CollectionItemSlot",c="data-radix-collection-item",d=Me.forwardRef((h,v)=>{const{scope:y,children:w,...g}=h,m=Me.useRef(null),x=zr(v,m),b=s(u,y);return Me.useEffect(()=>(b.itemMap.set(m,{ref:m,...g}),()=>void b.itemMap.delete(m))),p.jsx(du,{[c]:"",ref:x,children:w})});d.displayName=u;function f(h){const v=s(t+"CollectionConsumer",h);return Me.useCallback(()=>{const w=v.collectionRef.current;if(!w)return[];const g=Array.from(w.querySelectorAll(`[${c}]`));return Array.from(v.itemMap.values()).sort((b,k)=>g.indexOf(b.ref.current)-g.indexOf(k.ref.current))},[v.collectionRef,v.itemMap])}return[{Provider:o,Slot:l,ItemSlot:d},f,i]}function dN(t,e=[]){let n=[];function i(s,o){const a=S.createContext(o),l=n.length;n=[...n,o];const u=d=>{var g;const{scope:f,children:h,...v}=d,y=((g=f==null?void 0:f[t])==null?void 0:g[l])||a,w=S.useMemo(()=>v,Object.values(v));return p.jsx(y.Provider,{value:w,children:h})};u.displayName=s+"Provider";function c(d,f){var y;const h=((y=f==null?void 0:f[t])==null?void 0:y[l])||a,v=S.useContext(h);if(v)return v;if(o!==void 0)return o;throw new Error(`\`${d}\` must be used within \`${s}\``)}return[u,c]}const r=()=>{const s=n.map(o=>S.createContext(o));return function(a){const l=(a==null?void 0:a[t])||s;return S.useMemo(()=>({[`__scope${t}`]:{...a,[t]:l}}),[a,l])}};return r.scopeName=t,[i,fN(r,...e)]}function fN(...t){const e=t[0];if(t.length===1)return e;const n=()=>{const i=t.map(r=>({useScope:r(),scopeName:r.scopeName}));return function(s){const o=i.reduce((a,{useScope:l,scopeName:u})=>{const d=l(s)[`__scope${u}`];return{...a,...d}},{});return S.useMemo(()=>({[`__scope${e.scopeName}`]:o}),[o])}};return n.scopeName=e.scopeName,n}var hN=["a","button","div","form","h2","h3","img","input","label","li","nav","ol","p","span","svg","ul"],Yn=hN.reduce((t,e)=>{const n=S.forwardRef((i,r)=>{const{asChild:s,...o}=i,a=s?du:e;return typeof window<"u"&&(window[Symbol.for("radix-ui")]=!0),p.jsx(a,{...o,ref:r})});return n.displayName=`Primitive.${e}`,{...t,[e]:n}},{});function p_(t,e){t&&ic.flushSync(()=>t.dispatchEvent(e))}function xi(t){const e=S.useRef(t);return S.useEffect(()=>{e.current=t}),S.useMemo(()=>(...n)=>{var i;return(i=e.current)==null?void 0:i.call(e,...n)},[])}function pN(t,e=globalThis==null?void 0:globalThis.document){const n=xi(t);S.useEffect(()=>{const i=r=>{r.key==="Escape"&&n(r)};return e.addEventListener("keydown",i,{capture:!0}),()=>e.removeEventListener("keydown",i,{capture:!0})},[n,e])}var mN="DismissableLayer",Ff="dismissableLayer.update",gN="dismissableLayer.pointerDownOutside",yN="dismissableLayer.focusOutside",Vg,m_=S.createContext({layers:new Set,layersWithOutsidePointerEventsDisabled:new Set,branches:new Set}),g_=S.forwardRef((t,e)=>{const{disableOutsidePointerEvents:n=!1,onEscapeKeyDown:i,onPointerDownOutside:r,onFocusOutside:s,onInteractOutside:o,onDismiss:a,...l}=t,u=S.useContext(m_),[c,d]=S.useState(null),f=(c==null?void 0:c.ownerDocument)??(globalThis==null?void 0:globalThis.document),[,h]=S.useState({}),v=zr(e,M=>d(M)),y=Array.from(u.layers),[w]=[...u.layersWithOutsidePointerEventsDisabled].slice(-1),g=y.indexOf(w),m=c?y.indexOf(c):-1,x=u.layersWithOutsidePointerEventsDisabled.size>0,b=m>=g,k=xN(M=>{const P=M.target,L=[...u.branches].some(z=>z.contains(P));!b||L||(r==null||r(M),o==null||o(M),M.defaultPrevented||a==null||a())},f),E=wN(M=>{const P=M.target;[...u.branches].some(z=>z.contains(P))||(s==null||s(M),o==null||o(M),M.defaultPrevented||a==null||a())},f);return pN(M=>{m===u.layers.size-1&&(i==null||i(M),!M.defaultPrevented&&a&&(M.preventDefault(),a()))},f),S.useEffect(()=>{if(c)return n&&(u.layersWithOutsidePointerEventsDisabled.size===0&&(Vg=f.body.style.pointerEvents,f.body.style.pointerEvents="none"),u.layersWithOutsidePointerEventsDisabled.add(c)),u.layers.add(c),Bg(),()=>{n&&u.layersWithOutsidePointerEventsDisabled.size===1&&(f.body.style.pointerEvents=Vg)}},[c,f,n,u]),S.useEffect(()=>()=>{c&&(u.layers.delete(c),u.layersWithOutsidePointerEventsDisabled.delete(c),Bg())},[c,u]),S.useEffect(()=>{const M=()=>h({});return document.addEventListener(Ff,M),()=>document.removeEventListener(Ff,M)},[]),p.jsx(Yn.div,{...l,ref:v,style:{pointerEvents:x?b?"auto":"none":void 0,...t.style},onFocusCapture:Ht(t.onFocusCapture,E.onFocusCapture),onBlurCapture:Ht(t.onBlurCapture,E.onBlurCapture),onPointerDownCapture:Ht(t.onPointerDownCapture,k.onPointerDownCapture)})});g_.displayName=mN;var vN="DismissableLayerBranch",y_=S.forwardRef((t,e)=>{const n=S.useContext(m_),i=S.useRef(null),r=zr(e,i);return S.useEffect(()=>{const s=i.current;if(s)return n.branches.add(s),()=>{n.branches.delete(s)}},[n.branches]),p.jsx(Yn.div,{...t,ref:r})});y_.displayName=vN;function xN(t,e=globalThis==null?void 0:globalThis.document){const n=xi(t),i=S.useRef(!1),r=S.useRef(()=>{});return S.useEffect(()=>{const s=a=>{if(a.target&&!i.current){let l=function(){v_(gN,n,u,{discrete:!0})};const u={originalEvent:a};a.pointerType==="touch"?(e.removeEventListener("click",r.current),r.current=l,e.addEventListener("click",r.current,{once:!0})):l()}else e.removeEventListener("click",r.current);i.current=!1},o=window.setTimeout(()=>{e.addEventListener("pointerdown",s)},0);return()=>{window.clearTimeout(o),e.removeEventListener("pointerdown",s),e.removeEventListener("click",r.current)}},[e,n]),{onPointerDownCapture:()=>i.current=!0}}function wN(t,e=globalThis==null?void 0:globalThis.document){const n=xi(t),i=S.useRef(!1);return S.useEffect(()=>{const r=s=>{s.target&&!i.current&&v_(yN,n,{originalEvent:s},{discrete:!1})};return e.addEventListener("focusin",r),()=>e.removeEventListener("focusin",r)},[e,n]),{onFocusCapture:()=>i.current=!0,onBlurCapture:()=>i.current=!1}}function Bg(){const t=new CustomEvent(Ff);document.dispatchEvent(t)}function v_(t,e,n,{discrete:i}){const r=n.originalEvent.target,s=new CustomEvent(t,{bubbles:!1,cancelable:!0,detail:n});e&&r.addEventListener(t,e,{once:!0}),i?p_(r,s):r.dispatchEvent(s)}var bN=g_,SN=y_,fu=globalThis!=null&&globalThis.document?S.useLayoutEffect:()=>{},_N="Portal",x_=S.forwardRef((t,e)=>{var a;const{container:n,...i}=t,[r,s]=S.useState(!1);fu(()=>s(!0),[]);const o=n||r&&((a=globalThis==null?void 0:globalThis.document)==null?void 0:a.body);return o?KM.createPortal(p.jsx(Yn.div,{...i,ref:e}),o):null});x_.displayName=_N;function kN(t,e){return S.useReducer((n,i)=>e[n][i]??n,t)}var w_=t=>{const{present:e,children:n}=t,i=CN(e),r=typeof n=="function"?n({present:i.isPresent}):S.Children.only(n),s=zr(i.ref,TN(r));return typeof n=="function"||i.isPresent?S.cloneElement(r,{ref:s}):null};w_.displayName="Presence";function CN(t){const[e,n]=S.useState(),i=S.useRef({}),r=S.useRef(t),s=S.useRef("none"),o=t?"mounted":"unmounted",[a,l]=kN(o,{mounted:{UNMOUNT:"unmounted",ANIMATION_OUT:"unmountSuspended"},unmountSuspended:{MOUNT:"mounted",ANIMATION_END:"unmounted"},unmounted:{MOUNT:"mounted"}});return S.useEffect(()=>{const u=fl(i.current);s.current=a==="mounted"?u:"none"},[a]),fu(()=>{const u=i.current,c=r.current;if(c!==t){const f=s.current,h=fl(u);t?l("MOUNT"):h==="none"||(u==null?void 0:u.display)==="none"?l("UNMOUNT"):l(c&&f!==h?"ANIMATION_OUT":"UNMOUNT"),r.current=t}},[t,l]),fu(()=>{if(e){let u;const c=e.ownerDocument.defaultView??window,d=h=>{const y=fl(i.current).includes(h.animationName);if(h.target===e&&y&&(l("ANIMATION_END"),!r.current)){const w=e.style.animationFillMode;e.style.animationFillMode="forwards",u=c.setTimeout(()=>{e.style.animationFillMode==="forwards"&&(e.style.animationFillMode=w)})}},f=h=>{h.target===e&&(s.current=fl(i.current))};return e.addEventListener("animationstart",f),e.addEventListener("animationcancel",d),e.addEventListener("animationend",d),()=>{c.clearTimeout(u),e.removeEventListener("animationstart",f),e.removeEventListener("animationcancel",d),e.removeEventListener("animationend",d)}}else l("ANIMATION_END")},[e,l]),{isPresent:["mounted","unmountSuspended"].includes(a),ref:S.useCallback(u=>{u&&(i.current=getComputedStyle(u)),n(u)},[])}}function fl(t){return(t==null?void 0:t.animationName)||"none"}function TN(t){var i,r;let e=(i=Object.getOwnPropertyDescriptor(t.props,"ref"))==null?void 0:i.get,n=e&&"isReactWarning"in e&&e.isReactWarning;return n?t.ref:(e=(r=Object.getOwnPropertyDescriptor(t,"ref"))==null?void 0:r.get,n=e&&"isReactWarning"in e&&e.isReactWarning,n?t.props.ref:t.props.ref||t.ref)}function PN({prop:t,defaultProp:e,onChange:n=()=>{}}){const[i,r]=EN({defaultProp:e,onChange:n}),s=t!==void 0,o=s?t:i,a=xi(n),l=S.useCallback(u=>{if(s){const d=typeof u=="function"?u(t):u;d!==t&&a(d)}else r(u)},[s,t,r,a]);return[o,l]}function EN({defaultProp:t,onChange:e}){const n=S.useState(t),[i]=n,r=S.useRef(i),s=xi(e);return S.useEffect(()=>{r.current!==i&&(s(i),r.current=i)},[i,r,s]),n}var MN="VisuallyHidden",fp=S.forwardRef((t,e)=>p.jsx(Yn.span,{...t,ref:e,style:{position:"absolute",border:0,width:1,height:1,padding:0,margin:-1,overflow:"hidden",clip:"rect(0, 0, 0, 0)",whiteSpace:"nowrap",wordWrap:"normal",...t.style}}));fp.displayName=MN;var hp="ToastProvider",[pp,DN,NN]=cN("Toast"),[b_,A6]=dN("Toast",[NN]),[AN,ac]=b_(hp),S_=t=>{const{__scopeToast:e,label:n="Notification",duration:i=5e3,swipeDirection:r="right",swipeThreshold:s=50,children:o}=t,[a,l]=S.useState(null),[u,c]=S.useState(0),d=S.useRef(!1),f=S.useRef(!1);return n.trim()||console.error(`Invalid prop \`label\` supplied to \`${hp}\`. Expected non-empty \`string\`.`),p.jsx(pp.Provider,{scope:e,children:p.jsx(AN,{scope:e,label:n,duration:i,swipeDirection:r,swipeThreshold:s,toastCount:u,viewport:a,onViewportChange:l,onToastAdd:S.useCallback(()=>c(h=>h+1),[]),onToastRemove:S.useCallback(()=>c(h=>h-1),[]),isFocusedToastEscapeKeyDownRef:d,isClosePausedRef:f,children:o})})};S_.displayName=hp;var __="ToastViewport",RN=["F8"],If="toast.viewportPause",Of="toast.viewportResume",k_=S.forwardRef((t,e)=>{const{__scopeToast:n,hotkey:i=RN,label:r="Notifications ({hotkey})",...s}=t,o=ac(__,n),a=DN(n),l=S.useRef(null),u=S.useRef(null),c=S.useRef(null),d=S.useRef(null),f=zr(e,d,o.onViewportChange),h=i.join("+").replace(/Key/g,"").replace(/Digit/g,""),v=o.toastCount>0;S.useEffect(()=>{const w=g=>{var x;i.length!==0&&i.every(b=>g[b]||g.code===b)&&((x=d.current)==null||x.focus())};return document.addEventListener("keydown",w),()=>document.removeEventListener("keydown",w)},[i]),S.useEffect(()=>{const w=l.current,g=d.current;if(v&&w&&g){const m=()=>{if(!o.isClosePausedRef.current){const E=new CustomEvent(If);g.dispatchEvent(E),o.isClosePausedRef.current=!0}},x=()=>{if(o.isClosePausedRef.current){const E=new CustomEvent(Of);g.dispatchEvent(E),o.isClosePausedRef.current=!1}},b=E=>{!w.contains(E.relatedTarget)&&x()},k=()=>{w.contains(document.activeElement)||x()};return w.addEventListener("focusin",m),w.addEventListener("focusout",b),w.addEventListener("pointermove",m),w.addEventListener("pointerleave",k),window.addEventListener("blur",m),window.addEventListener("focus",x),()=>{w.removeEventListener("focusin",m),w.removeEventListener("focusout",b),w.removeEventListener("pointermove",m),w.removeEventListener("pointerleave",k),window.removeEventListener("blur",m),window.removeEventListener("focus",x)}}},[v,o.isClosePausedRef]);const y=S.useCallback(({tabbingDirection:w})=>{const m=a().map(x=>{const b=x.ref.current,k=[b,...qN(b)];return w==="forwards"?k:k.reverse()});return(w==="forwards"?m.reverse():m).flat()},[a]);return S.useEffect(()=>{const w=d.current;if(w){const g=m=>{var k,E,M;const x=m.altKey||m.ctrlKey||m.metaKey;if(m.key==="Tab"&&!x){const P=document.activeElement,L=m.shiftKey;if(m.target===w&&L){(k=u.current)==null||k.focus();return}const j=y({tabbingDirection:L?"backwards":"forwards"}),ee=j.findIndex(H=>H===P);td(j.slice(ee+1))?m.preventDefault():L?(E=u.current)==null||E.focus():(M=c.current)==null||M.focus()}};return w.addEventListener("keydown",g),()=>w.removeEventListener("keydown",g)}},[a,y]),p.jsxs(SN,{ref:l,role:"region","aria-label":r.replace("{hotkey}",h),tabIndex:-1,style:{pointerEvents:v?void 0:"none"},children:[v&&p.jsx(jf,{ref:u,onFocusFromOutsideViewport:()=>{const w=y({tabbingDirection:"forwards"});td(w)}}),p.jsx(pp.Slot,{scope:n,children:p.jsx(Yn.ol,{tabIndex:-1,...s,ref:f})}),v&&p.jsx(jf,{ref:c,onFocusFromOutsideViewport:()=>{const w=y({tabbingDirection:"backwards"});td(w)}})]})});k_.displayName=__;var C_="ToastFocusProxy",jf=S.forwardRef((t,e)=>{const{__scopeToast:n,onFocusFromOutsideViewport:i,...r}=t,s=ac(C_,n);return p.jsx(fp,{"aria-hidden":!0,tabIndex:0,...r,ref:e,style:{position:"fixed"},onFocus:o=>{var u;const a=o.relatedTarget;!((u=s.viewport)!=null&&u.contains(a))&&i()}})});jf.displayName=C_;var lc="Toast",FN="toast.swipeStart",IN="toast.swipeMove",ON="toast.swipeCancel",jN="toast.swipeEnd",T_=S.forwardRef((t,e)=>{const{forceMount:n,open:i,defaultOpen:r,onOpenChange:s,...o}=t,[a=!0,l]=PN({prop:i,defaultProp:r,onChange:s});return p.jsx(w_,{present:n||a,children:p.jsx(VN,{open:a,...o,ref:e,onClose:()=>l(!1),onPause:xi(t.onPause),onResume:xi(t.onResume),onSwipeStart:Ht(t.onSwipeStart,u=>{u.currentTarget.setAttribute("data-swipe","start")}),onSwipeMove:Ht(t.onSwipeMove,u=>{const{x:c,y:d}=u.detail.delta;u.currentTarget.setAttribute("data-swipe","move"),u.currentTarget.style.setProperty("--radix-toast-swipe-move-x",`${c}px`),u.currentTarget.style.setProperty("--radix-toast-swipe-move-y",`${d}px`)}),onSwipeCancel:Ht(t.onSwipeCancel,u=>{u.currentTarget.setAttribute("data-swipe","cancel"),u.currentTarget.style.removeProperty("--radix-toast-swipe-move-x"),u.currentTarget.style.removeProperty("--radix-toast-swipe-move-y"),u.currentTarget.style.removeProperty("--radix-toast-swipe-end-x"),u.currentTarget.style.removeProperty("--radix-toast-swipe-end-y")}),onSwipeEnd:Ht(t.onSwipeEnd,u=>{const{x:c,y:d}=u.detail.delta;u.currentTarget.setAttribute("data-swipe","end"),u.currentTarget.style.removeProperty("--radix-toast-swipe-move-x"),u.currentTarget.style.removeProperty("--radix-toast-swipe-move-y"),u.currentTarget.style.setProperty("--radix-toast-swipe-end-x",`${c}px`),u.currentTarget.style.setProperty("--radix-toast-swipe-end-y",`${d}px`),l(!1)})})})});T_.displayName=lc;var[LN,zN]=b_(lc,{onClose(){}}),VN=S.forwardRef((t,e)=>{const{__scopeToast:n,type:i="foreground",duration:r,open:s,onClose:o,onEscapeKeyDown:a,onPause:l,onResume:u,onSwipeStart:c,onSwipeMove:d,onSwipeCancel:f,onSwipeEnd:h,...v}=t,y=ac(lc,n),[w,g]=S.useState(null),m=zr(e,H=>g(H)),x=S.useRef(null),b=S.useRef(null),k=r||y.duration,E=S.useRef(0),M=S.useRef(k),P=S.useRef(0),{onToastAdd:L,onToastRemove:z}=y,ce=xi(()=>{var pe;(w==null?void 0:w.contains(document.activeElement))&&((pe=y.viewport)==null||pe.focus()),o()}),j=S.useCallback(H=>{!H||H===1/0||(window.clearTimeout(P.current),E.current=new Date().getTime(),P.current=window.setTimeout(ce,H))},[ce]);S.useEffect(()=>{const H=y.viewport;if(H){const pe=()=>{j(M.current),u==null||u()},ve=()=>{const se=new Date().getTime()-E.current;M.current=M.current-se,window.clearTimeout(P.current),l==null||l()};return H.addEventListener(If,ve),H.addEventListener(Of,pe),()=>{H.removeEventListener(If,ve),H.removeEventListener(Of,pe)}}},[y.viewport,k,l,u,j]),S.useEffect(()=>{s&&!y.isClosePausedRef.current&&j(k)},[s,k,y.isClosePausedRef,j]),S.useEffect(()=>(L(),()=>z()),[L,z]);const ee=S.useMemo(()=>w?R_(w):null,[w]);return y.viewport?p.jsxs(p.Fragment,{children:[ee&&p.jsx(BN,{__scopeToast:n,role:"status","aria-live":i==="foreground"?"assertive":"polite","aria-atomic":!0,children:ee}),p.jsx(LN,{scope:n,onClose:ce,children:ic.createPortal(p.jsx(pp.ItemSlot,{scope:n,children:p.jsx(bN,{asChild:!0,onEscapeKeyDown:Ht(a,()=>{y.isFocusedToastEscapeKeyDownRef.current||ce(),y.isFocusedToastEscapeKeyDownRef.current=!1}),children:p.jsx(Yn.li,{role:"status","aria-live":"off","aria-atomic":!0,tabIndex:0,"data-state":s?"open":"closed","data-swipe-direction":y.swipeDirection,...v,ref:m,style:{userSelect:"none",touchAction:"none",...t.style},onKeyDown:Ht(t.onKeyDown,H=>{H.key==="Escape"&&(a==null||a(H.nativeEvent),H.nativeEvent.defaultPrevented||(y.isFocusedToastEscapeKeyDownRef.current=!0,ce()))}),onPointerDown:Ht(t.onPointerDown,H=>{H.button===0&&(x.current={x:H.clientX,y:H.clientY})}),onPointerMove:Ht(t.onPointerMove,H=>{if(!x.current)return;const pe=H.clientX-x.current.x,ve=H.clientY-x.current.y,se=!!b.current,I=["left","right"].includes(y.swipeDirection),G=["left","up"].includes(y.swipeDirection)?Math.min:Math.max,K=I?G(0,pe):0,he=I?0:G(0,ve),ke=H.pointerType==="touch"?10:2,gn={x:K,y:he},Bt={originalEvent:H,delta:gn};se?(b.current=gn,hl(IN,d,Bt,{discrete:!1})):Ug(gn,y.swipeDirection,ke)?(b.current=gn,hl(FN,c,Bt,{discrete:!1}),H.target.setPointerCapture(H.pointerId)):(Math.abs(pe)>ke||Math.abs(ve)>ke)&&(x.current=null)}),onPointerUp:Ht(t.onPointerUp,H=>{const pe=b.current,ve=H.target;if(ve.hasPointerCapture(H.pointerId)&&ve.releasePointerCapture(H.pointerId),b.current=null,x.current=null,pe){const se=H.currentTarget,I={originalEvent:H,delta:pe};Ug(pe,y.swipeDirection,y.swipeThreshold)?hl(jN,h,I,{discrete:!0}):hl(ON,f,I,{discrete:!0}),se.addEventListener("click",G=>G.preventDefault(),{once:!0})}})})})}),y.viewport)})]}):null}),BN=t=>{const{__scopeToast:e,children:n,...i}=t,r=ac(lc,e),[s,o]=S.useState(!1),[a,l]=S.useState(!1);return WN(()=>o(!0)),S.useEffect(()=>{const u=window.setTimeout(()=>l(!0),1e3);return()=>window.clearTimeout(u)},[]),a?null:p.jsx(x_,{asChild:!0,children:p.jsx(fp,{...i,children:s&&p.jsxs(p.Fragment,{children:[r.label," ",n]})})})},UN="ToastTitle",P_=S.forwardRef((t,e)=>{const{__scopeToast:n,...i}=t;return p.jsx(Yn.div,{...i,ref:e})});P_.displayName=UN;var $N="ToastDescription",E_=S.forwardRef((t,e)=>{const{__scopeToast:n,...i}=t;return p.jsx(Yn.div,{...i,ref:e})});E_.displayName=$N;var M_="ToastAction",D_=S.forwardRef((t,e)=>{const{altText:n,...i}=t;return n.trim()?p.jsx(A_,{altText:n,asChild:!0,children:p.jsx(mp,{...i,ref:e})}):(console.error(`Invalid prop \`altText\` supplied to \`${M_}\`. Expected non-empty \`string\`.`),null)});D_.displayName=M_;var N_="ToastClose",mp=S.forwardRef((t,e)=>{const{__scopeToast:n,...i}=t,r=zN(N_,n);return p.jsx(A_,{asChild:!0,children:p.jsx(Yn.button,{type:"button",...i,ref:e,onClick:Ht(t.onClick,r.onClose)})})});mp.displayName=N_;var A_=S.forwardRef((t,e)=>{const{__scopeToast:n,altText:i,...r}=t;return p.jsx(Yn.div,{"data-radix-toast-announce-exclude":"","data-radix-toast-announce-alt":i||void 0,...r,ref:e})});function R_(t){const e=[];return Array.from(t.childNodes).forEach(i=>{if(i.nodeType===i.TEXT_NODE&&i.textContent&&e.push(i.textContent),HN(i)){const r=i.ariaHidden||i.hidden||i.style.display==="none",s=i.dataset.radixToastAnnounceExclude==="";if(!r)if(s){const o=i.dataset.radixToastAnnounceAlt;o&&e.push(o)}else e.push(...R_(i))}}),e}function hl(t,e,n,{discrete:i}){const r=n.originalEvent.currentTarget,s=new CustomEvent(t,{bubbles:!0,cancelable:!0,detail:n});e&&r.addEventListener(t,e,{once:!0}),i?p_(r,s):r.dispatchEvent(s)}var Ug=(t,e,n=0)=>{const i=Math.abs(t.x),r=Math.abs(t.y),s=i>r;return e==="left"||e==="right"?s&&i>n:!s&&r>n};function WN(t=()=>{}){const e=xi(t);fu(()=>{let n=0,i=0;return n=window.requestAnimationFrame(()=>i=window.requestAnimationFrame(e)),()=>{window.cancelAnimationFrame(n),window.cancelAnimationFrame(i)}},[e])}function HN(t){return t.nodeType===t.ELEMENT_NODE}function qN(t){const e=[],n=document.createTreeWalker(t,NodeFilter.SHOW_ELEMENT,{acceptNode:i=>{const r=i.tagName==="INPUT"&&i.type==="hidden";return i.disabled||i.hidden||r?NodeFilter.FILTER_SKIP:i.tabIndex>=0?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP}});for(;n.nextNode();)e.push(n.currentNode);return e}function td(t){const e=document.activeElement;return t.some(n=>n===e?!0:(n.focus(),document.activeElement!==e))}var GN=S_,F_=k_,I_=T_,O_=P_,j_=E_,L_=D_,z_=mp;function V_(t){var e,n,i="";if(typeof t=="string"||typeof t=="number")i+=t;else if(typeof t=="object")if(Array.isArray(t))for(e=0;e<t.length;e++)t[e]&&(n=V_(t[e]))&&(i&&(i+=" "),i+=n);else for(e in t)t[e]&&(i&&(i+=" "),i+=e);return i}function QN(){for(var t,e,n=0,i="";n<arguments.length;)(t=arguments[n++])&&(e=V_(t))&&(i&&(i+=" "),i+=e);return i}const $g=t=>typeof t=="boolean"?"".concat(t):t===0?"0":t,Wg=QN,KN=(t,e)=>n=>{var i;if((e==null?void 0:e.variants)==null)return Wg(t,n==null?void 0:n.class,n==null?void 0:n.className);const{variants:r,defaultVariants:s}=e,o=Object.keys(r).map(u=>{const c=n==null?void 0:n[u],d=s==null?void 0:s[u];if(c===null)return null;const f=$g(c)||$g(d);return r[u][f]}),a=n&&Object.entries(n).reduce((u,c)=>{let[d,f]=c;return f===void 0||(u[d]=f),u},{}),l=e==null||(i=e.compoundVariants)===null||i===void 0?void 0:i.reduce((u,c)=>{let{class:d,className:f,...h}=c;return Object.entries(h).every(v=>{let[y,w]=v;return Array.isArray(w)?w.includes({...s,...a}[y]):{...s,...a}[y]===w})?[...u,d,f]:u},[]);return Wg(t,o,l,n==null?void 0:n.class,n==null?void 0:n.className)};/**
 * @license lucide-react v0.453.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const ZN=t=>t.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase(),B_=(...t)=>t.filter((e,n,i)=>!!e&&i.indexOf(e)===n).join(" ");/**
 * @license lucide-react v0.453.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */var XN={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};/**
 * @license lucide-react v0.453.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const YN=S.forwardRef(({color:t="currentColor",size:e=24,strokeWidth:n=2,absoluteStrokeWidth:i,className:r="",children:s,iconNode:o,...a},l)=>S.createElement("svg",{ref:l,...XN,width:e,height:e,stroke:t,strokeWidth:i?Number(n)*24/Number(e):n,className:B_("lucide",r),...a},[...o.map(([u,c])=>S.createElement(u,c)),...Array.isArray(s)?s:[s]]));/**
 * @license lucide-react v0.453.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const U_=(t,e)=>{const n=S.forwardRef(({className:i,...r},s)=>S.createElement(YN,{ref:s,iconNode:e,className:B_(`lucide-${ZN(t)}`,i),...r}));return n.displayName=`${t}`,n};/**
 * @license lucide-react v0.453.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const JN=U_("CircleAlert",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["line",{x1:"12",x2:"12",y1:"8",y2:"12",key:"1pkeuh"}],["line",{x1:"12",x2:"12.01",y1:"16",y2:"16",key:"4dfq90"}]]);/**
 * @license lucide-react v0.453.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const eA=U_("X",[["path",{d:"M18 6 6 18",key:"1bl5f8"}],["path",{d:"m6 6 12 12",key:"d8bk6v"}]]);function $_(t){var e,n,i="";if(typeof t=="string"||typeof t=="number")i+=t;else if(typeof t=="object")if(Array.isArray(t)){var r=t.length;for(e=0;e<r;e++)t[e]&&(n=$_(t[e]))&&(i&&(i+=" "),i+=n)}else for(n in t)t[n]&&(i&&(i+=" "),i+=n);return i}function tA(){for(var t,e,n=0,i="",r=arguments.length;n<r;n++)(t=arguments[n])&&(e=$_(t))&&(i&&(i+=" "),i+=e);return i}const gp="-",nA=t=>{const e=rA(t),{conflictingClassGroups:n,conflictingClassGroupModifiers:i}=t;return{getClassGroupId:o=>{const a=o.split(gp);return a[0]===""&&a.length!==1&&a.shift(),W_(a,e)||iA(o)},getConflictingClassGroupIds:(o,a)=>{const l=n[o]||[];return a&&i[o]?[...l,...i[o]]:l}}},W_=(t,e)=>{var o;if(t.length===0)return e.classGroupId;const n=t[0],i=e.nextPart.get(n),r=i?W_(t.slice(1),i):void 0;if(r)return r;if(e.validators.length===0)return;const s=t.join(gp);return(o=e.validators.find(({validator:a})=>a(s)))==null?void 0:o.classGroupId},Hg=/^\[(.+)\]$/,iA=t=>{if(Hg.test(t)){const e=Hg.exec(t)[1],n=e==null?void 0:e.substring(0,e.indexOf(":"));if(n)return"arbitrary.."+n}},rA=t=>{const{theme:e,prefix:n}=t,i={nextPart:new Map,validators:[]};return oA(Object.entries(t.classGroups),n).forEach(([s,o])=>{Lf(o,i,s,e)}),i},Lf=(t,e,n,i)=>{t.forEach(r=>{if(typeof r=="string"){const s=r===""?e:qg(e,r);s.classGroupId=n;return}if(typeof r=="function"){if(sA(r)){Lf(r(i),e,n,i);return}e.validators.push({validator:r,classGroupId:n});return}Object.entries(r).forEach(([s,o])=>{Lf(o,qg(e,s),n,i)})})},qg=(t,e)=>{let n=t;return e.split(gp).forEach(i=>{n.nextPart.has(i)||n.nextPart.set(i,{nextPart:new Map,validators:[]}),n=n.nextPart.get(i)}),n},sA=t=>t.isThemeGetter,oA=(t,e)=>e?t.map(([n,i])=>{const r=i.map(s=>typeof s=="string"?e+s:typeof s=="object"?Object.fromEntries(Object.entries(s).map(([o,a])=>[e+o,a])):s);return[n,r]}):t,aA=t=>{if(t<1)return{get:()=>{},set:()=>{}};let e=0,n=new Map,i=new Map;const r=(s,o)=>{n.set(s,o),e++,e>t&&(e=0,i=n,n=new Map)};return{get(s){let o=n.get(s);if(o!==void 0)return o;if((o=i.get(s))!==void 0)return r(s,o),o},set(s,o){n.has(s)?n.set(s,o):r(s,o)}}},H_="!",lA=t=>{const{separator:e,experimentalParseClassName:n}=t,i=e.length===1,r=e[0],s=e.length,o=a=>{const l=[];let u=0,c=0,d;for(let w=0;w<a.length;w++){let g=a[w];if(u===0){if(g===r&&(i||a.slice(w,w+s)===e)){l.push(a.slice(c,w)),c=w+s;continue}if(g==="/"){d=w;continue}}g==="["?u++:g==="]"&&u--}const f=l.length===0?a:a.substring(c),h=f.startsWith(H_),v=h?f.substring(1):f,y=d&&d>c?d-c:void 0;return{modifiers:l,hasImportantModifier:h,baseClassName:v,maybePostfixModifierPosition:y}};return n?a=>n({className:a,parseClassName:o}):o},uA=t=>{if(t.length<=1)return t;const e=[];let n=[];return t.forEach(i=>{i[0]==="["?(e.push(...n.sort(),i),n=[]):n.push(i)}),e.push(...n.sort()),e},cA=t=>({cache:aA(t.cacheSize),parseClassName:lA(t),...nA(t)}),dA=/\s+/,fA=(t,e)=>{const{parseClassName:n,getClassGroupId:i,getConflictingClassGroupIds:r}=e,s=[],o=t.trim().split(dA);let a="";for(let l=o.length-1;l>=0;l-=1){const u=o[l],{modifiers:c,hasImportantModifier:d,baseClassName:f,maybePostfixModifierPosition:h}=n(u);let v=!!h,y=i(v?f.substring(0,h):f);if(!y){if(!v){a=u+(a.length>0?" "+a:a);continue}if(y=i(f),!y){a=u+(a.length>0?" "+a:a);continue}v=!1}const w=uA(c).join(":"),g=d?w+H_:w,m=g+y;if(s.includes(m))continue;s.push(m);const x=r(y,v);for(let b=0;b<x.length;++b){const k=x[b];s.push(g+k)}a=u+(a.length>0?" "+a:a)}return a};function hA(){let t=0,e,n,i="";for(;t<arguments.length;)(e=arguments[t++])&&(n=q_(e))&&(i&&(i+=" "),i+=n);return i}const q_=t=>{if(typeof t=="string")return t;let e,n="";for(let i=0;i<t.length;i++)t[i]&&(e=q_(t[i]))&&(n&&(n+=" "),n+=e);return n};function pA(t,...e){let n,i,r,s=o;function o(l){const u=e.reduce((c,d)=>d(c),t());return n=cA(u),i=n.cache.get,r=n.cache.set,s=a,a(l)}function a(l){const u=i(l);if(u)return u;const c=fA(l,n);return r(l,c),c}return function(){return s(hA.apply(null,arguments))}}const Ce=t=>{const e=n=>n[t]||[];return e.isThemeGetter=!0,e},G_=/^\[(?:([a-z-]+):)?(.+)\]$/i,mA=/^\d+\/\d+$/,gA=new Set(["px","full","screen"]),yA=/^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/,vA=/\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/,xA=/^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/,wA=/^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/,bA=/^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/,ei=t=>ks(t)||gA.has(t)||mA.test(t),ki=t=>io(t,"length",MA),ks=t=>!!t&&!Number.isNaN(Number(t)),nd=t=>io(t,"number",ks),go=t=>!!t&&Number.isInteger(Number(t)),SA=t=>t.endsWith("%")&&ks(t.slice(0,-1)),oe=t=>G_.test(t),Ci=t=>yA.test(t),_A=new Set(["length","size","percentage"]),kA=t=>io(t,_A,Q_),CA=t=>io(t,"position",Q_),TA=new Set(["image","url"]),PA=t=>io(t,TA,NA),EA=t=>io(t,"",DA),yo=()=>!0,io=(t,e,n)=>{const i=G_.exec(t);return i?i[1]?typeof e=="string"?i[1]===e:e.has(i[1]):n(i[2]):!1},MA=t=>vA.test(t)&&!xA.test(t),Q_=()=>!1,DA=t=>wA.test(t),NA=t=>bA.test(t),AA=()=>{const t=Ce("colors"),e=Ce("spacing"),n=Ce("blur"),i=Ce("brightness"),r=Ce("borderColor"),s=Ce("borderRadius"),o=Ce("borderSpacing"),a=Ce("borderWidth"),l=Ce("contrast"),u=Ce("grayscale"),c=Ce("hueRotate"),d=Ce("invert"),f=Ce("gap"),h=Ce("gradientColorStops"),v=Ce("gradientColorStopPositions"),y=Ce("inset"),w=Ce("margin"),g=Ce("opacity"),m=Ce("padding"),x=Ce("saturate"),b=Ce("scale"),k=Ce("sepia"),E=Ce("skew"),M=Ce("space"),P=Ce("translate"),L=()=>["auto","contain","none"],z=()=>["auto","hidden","clip","visible","scroll"],ce=()=>["auto",oe,e],j=()=>[oe,e],ee=()=>["",ei,ki],H=()=>["auto",ks,oe],pe=()=>["bottom","center","left","left-bottom","left-top","right","right-bottom","right-top","top"],ve=()=>["solid","dashed","dotted","double","none"],se=()=>["normal","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","hue","saturation","color","luminosity"],I=()=>["start","end","center","between","around","evenly","stretch"],G=()=>["","0",oe],K=()=>["auto","avoid","all","avoid-page","page","left","right","column"],he=()=>[ks,oe];return{cacheSize:500,separator:":",theme:{colors:[yo],spacing:[ei,ki],blur:["none","",Ci,oe],brightness:he(),borderColor:[t],borderRadius:["none","","full",Ci,oe],borderSpacing:j(),borderWidth:ee(),contrast:he(),grayscale:G(),hueRotate:he(),invert:G(),gap:j(),gradientColorStops:[t],gradientColorStopPositions:[SA,ki],inset:ce(),margin:ce(),opacity:he(),padding:j(),saturate:he(),scale:he(),sepia:G(),skew:he(),space:j(),translate:j()},classGroups:{aspect:[{aspect:["auto","square","video",oe]}],container:["container"],columns:[{columns:[Ci]}],"break-after":[{"break-after":K()}],"break-before":[{"break-before":K()}],"break-inside":[{"break-inside":["auto","avoid","avoid-page","avoid-column"]}],"box-decoration":[{"box-decoration":["slice","clone"]}],box:[{box:["border","content"]}],display:["block","inline-block","inline","flex","inline-flex","table","inline-table","table-caption","table-cell","table-column","table-column-group","table-footer-group","table-header-group","table-row-group","table-row","flow-root","grid","inline-grid","contents","list-item","hidden"],float:[{float:["right","left","none","start","end"]}],clear:[{clear:["left","right","both","none","start","end"]}],isolation:["isolate","isolation-auto"],"object-fit":[{object:["contain","cover","fill","none","scale-down"]}],"object-position":[{object:[...pe(),oe]}],overflow:[{overflow:z()}],"overflow-x":[{"overflow-x":z()}],"overflow-y":[{"overflow-y":z()}],overscroll:[{overscroll:L()}],"overscroll-x":[{"overscroll-x":L()}],"overscroll-y":[{"overscroll-y":L()}],position:["static","fixed","absolute","relative","sticky"],inset:[{inset:[y]}],"inset-x":[{"inset-x":[y]}],"inset-y":[{"inset-y":[y]}],start:[{start:[y]}],end:[{end:[y]}],top:[{top:[y]}],right:[{right:[y]}],bottom:[{bottom:[y]}],left:[{left:[y]}],visibility:["visible","invisible","collapse"],z:[{z:["auto",go,oe]}],basis:[{basis:ce()}],"flex-direction":[{flex:["row","row-reverse","col","col-reverse"]}],"flex-wrap":[{flex:["wrap","wrap-reverse","nowrap"]}],flex:[{flex:["1","auto","initial","none",oe]}],grow:[{grow:G()}],shrink:[{shrink:G()}],order:[{order:["first","last","none",go,oe]}],"grid-cols":[{"grid-cols":[yo]}],"col-start-end":[{col:["auto",{span:["full",go,oe]},oe]}],"col-start":[{"col-start":H()}],"col-end":[{"col-end":H()}],"grid-rows":[{"grid-rows":[yo]}],"row-start-end":[{row:["auto",{span:[go,oe]},oe]}],"row-start":[{"row-start":H()}],"row-end":[{"row-end":H()}],"grid-flow":[{"grid-flow":["row","col","dense","row-dense","col-dense"]}],"auto-cols":[{"auto-cols":["auto","min","max","fr",oe]}],"auto-rows":[{"auto-rows":["auto","min","max","fr",oe]}],gap:[{gap:[f]}],"gap-x":[{"gap-x":[f]}],"gap-y":[{"gap-y":[f]}],"justify-content":[{justify:["normal",...I()]}],"justify-items":[{"justify-items":["start","end","center","stretch"]}],"justify-self":[{"justify-self":["auto","start","end","center","stretch"]}],"align-content":[{content:["normal",...I(),"baseline"]}],"align-items":[{items:["start","end","center","baseline","stretch"]}],"align-self":[{self:["auto","start","end","center","stretch","baseline"]}],"place-content":[{"place-content":[...I(),"baseline"]}],"place-items":[{"place-items":["start","end","center","baseline","stretch"]}],"place-self":[{"place-self":["auto","start","end","center","stretch"]}],p:[{p:[m]}],px:[{px:[m]}],py:[{py:[m]}],ps:[{ps:[m]}],pe:[{pe:[m]}],pt:[{pt:[m]}],pr:[{pr:[m]}],pb:[{pb:[m]}],pl:[{pl:[m]}],m:[{m:[w]}],mx:[{mx:[w]}],my:[{my:[w]}],ms:[{ms:[w]}],me:[{me:[w]}],mt:[{mt:[w]}],mr:[{mr:[w]}],mb:[{mb:[w]}],ml:[{ml:[w]}],"space-x":[{"space-x":[M]}],"space-x-reverse":["space-x-reverse"],"space-y":[{"space-y":[M]}],"space-y-reverse":["space-y-reverse"],w:[{w:["auto","min","max","fit","svw","lvw","dvw",oe,e]}],"min-w":[{"min-w":[oe,e,"min","max","fit"]}],"max-w":[{"max-w":[oe,e,"none","full","min","max","fit","prose",{screen:[Ci]},Ci]}],h:[{h:[oe,e,"auto","min","max","fit","svh","lvh","dvh"]}],"min-h":[{"min-h":[oe,e,"min","max","fit","svh","lvh","dvh"]}],"max-h":[{"max-h":[oe,e,"min","max","fit","svh","lvh","dvh"]}],size:[{size:[oe,e,"auto","min","max","fit"]}],"font-size":[{text:["base",Ci,ki]}],"font-smoothing":["antialiased","subpixel-antialiased"],"font-style":["italic","not-italic"],"font-weight":[{font:["thin","extralight","light","normal","medium","semibold","bold","extrabold","black",nd]}],"font-family":[{font:[yo]}],"fvn-normal":["normal-nums"],"fvn-ordinal":["ordinal"],"fvn-slashed-zero":["slashed-zero"],"fvn-figure":["lining-nums","oldstyle-nums"],"fvn-spacing":["proportional-nums","tabular-nums"],"fvn-fraction":["diagonal-fractions","stacked-fractons"],tracking:[{tracking:["tighter","tight","normal","wide","wider","widest",oe]}],"line-clamp":[{"line-clamp":["none",ks,nd]}],leading:[{leading:["none","tight","snug","normal","relaxed","loose",ei,oe]}],"list-image":[{"list-image":["none",oe]}],"list-style-type":[{list:["none","disc","decimal",oe]}],"list-style-position":[{list:["inside","outside"]}],"placeholder-color":[{placeholder:[t]}],"placeholder-opacity":[{"placeholder-opacity":[g]}],"text-alignment":[{text:["left","center","right","justify","start","end"]}],"text-color":[{text:[t]}],"text-opacity":[{"text-opacity":[g]}],"text-decoration":["underline","overline","line-through","no-underline"],"text-decoration-style":[{decoration:[...ve(),"wavy"]}],"text-decoration-thickness":[{decoration:["auto","from-font",ei,ki]}],"underline-offset":[{"underline-offset":["auto",ei,oe]}],"text-decoration-color":[{decoration:[t]}],"text-transform":["uppercase","lowercase","capitalize","normal-case"],"text-overflow":["truncate","text-ellipsis","text-clip"],"text-wrap":[{text:["wrap","nowrap","balance","pretty"]}],indent:[{indent:j()}],"vertical-align":[{align:["baseline","top","middle","bottom","text-top","text-bottom","sub","super",oe]}],whitespace:[{whitespace:["normal","nowrap","pre","pre-line","pre-wrap","break-spaces"]}],break:[{break:["normal","words","all","keep"]}],hyphens:[{hyphens:["none","manual","auto"]}],content:[{content:["none",oe]}],"bg-attachment":[{bg:["fixed","local","scroll"]}],"bg-clip":[{"bg-clip":["border","padding","content","text"]}],"bg-opacity":[{"bg-opacity":[g]}],"bg-origin":[{"bg-origin":["border","padding","content"]}],"bg-position":[{bg:[...pe(),CA]}],"bg-repeat":[{bg:["no-repeat",{repeat:["","x","y","round","space"]}]}],"bg-size":[{bg:["auto","cover","contain",kA]}],"bg-image":[{bg:["none",{"gradient-to":["t","tr","r","br","b","bl","l","tl"]},PA]}],"bg-color":[{bg:[t]}],"gradient-from-pos":[{from:[v]}],"gradient-via-pos":[{via:[v]}],"gradient-to-pos":[{to:[v]}],"gradient-from":[{from:[h]}],"gradient-via":[{via:[h]}],"gradient-to":[{to:[h]}],rounded:[{rounded:[s]}],"rounded-s":[{"rounded-s":[s]}],"rounded-e":[{"rounded-e":[s]}],"rounded-t":[{"rounded-t":[s]}],"rounded-r":[{"rounded-r":[s]}],"rounded-b":[{"rounded-b":[s]}],"rounded-l":[{"rounded-l":[s]}],"rounded-ss":[{"rounded-ss":[s]}],"rounded-se":[{"rounded-se":[s]}],"rounded-ee":[{"rounded-ee":[s]}],"rounded-es":[{"rounded-es":[s]}],"rounded-tl":[{"rounded-tl":[s]}],"rounded-tr":[{"rounded-tr":[s]}],"rounded-br":[{"rounded-br":[s]}],"rounded-bl":[{"rounded-bl":[s]}],"border-w":[{border:[a]}],"border-w-x":[{"border-x":[a]}],"border-w-y":[{"border-y":[a]}],"border-w-s":[{"border-s":[a]}],"border-w-e":[{"border-e":[a]}],"border-w-t":[{"border-t":[a]}],"border-w-r":[{"border-r":[a]}],"border-w-b":[{"border-b":[a]}],"border-w-l":[{"border-l":[a]}],"border-opacity":[{"border-opacity":[g]}],"border-style":[{border:[...ve(),"hidden"]}],"divide-x":[{"divide-x":[a]}],"divide-x-reverse":["divide-x-reverse"],"divide-y":[{"divide-y":[a]}],"divide-y-reverse":["divide-y-reverse"],"divide-opacity":[{"divide-opacity":[g]}],"divide-style":[{divide:ve()}],"border-color":[{border:[r]}],"border-color-x":[{"border-x":[r]}],"border-color-y":[{"border-y":[r]}],"border-color-s":[{"border-s":[r]}],"border-color-e":[{"border-e":[r]}],"border-color-t":[{"border-t":[r]}],"border-color-r":[{"border-r":[r]}],"border-color-b":[{"border-b":[r]}],"border-color-l":[{"border-l":[r]}],"divide-color":[{divide:[r]}],"outline-style":[{outline:["",...ve()]}],"outline-offset":[{"outline-offset":[ei,oe]}],"outline-w":[{outline:[ei,ki]}],"outline-color":[{outline:[t]}],"ring-w":[{ring:ee()}],"ring-w-inset":["ring-inset"],"ring-color":[{ring:[t]}],"ring-opacity":[{"ring-opacity":[g]}],"ring-offset-w":[{"ring-offset":[ei,ki]}],"ring-offset-color":[{"ring-offset":[t]}],shadow:[{shadow:["","inner","none",Ci,EA]}],"shadow-color":[{shadow:[yo]}],opacity:[{opacity:[g]}],"mix-blend":[{"mix-blend":[...se(),"plus-lighter","plus-darker"]}],"bg-blend":[{"bg-blend":se()}],filter:[{filter:["","none"]}],blur:[{blur:[n]}],brightness:[{brightness:[i]}],contrast:[{contrast:[l]}],"drop-shadow":[{"drop-shadow":["","none",Ci,oe]}],grayscale:[{grayscale:[u]}],"hue-rotate":[{"hue-rotate":[c]}],invert:[{invert:[d]}],saturate:[{saturate:[x]}],sepia:[{sepia:[k]}],"backdrop-filter":[{"backdrop-filter":["","none"]}],"backdrop-blur":[{"backdrop-blur":[n]}],"backdrop-brightness":[{"backdrop-brightness":[i]}],"backdrop-contrast":[{"backdrop-contrast":[l]}],"backdrop-grayscale":[{"backdrop-grayscale":[u]}],"backdrop-hue-rotate":[{"backdrop-hue-rotate":[c]}],"backdrop-invert":[{"backdrop-invert":[d]}],"backdrop-opacity":[{"backdrop-opacity":[g]}],"backdrop-saturate":[{"backdrop-saturate":[x]}],"backdrop-sepia":[{"backdrop-sepia":[k]}],"border-collapse":[{border:["collapse","separate"]}],"border-spacing":[{"border-spacing":[o]}],"border-spacing-x":[{"border-spacing-x":[o]}],"border-spacing-y":[{"border-spacing-y":[o]}],"table-layout":[{table:["auto","fixed"]}],caption:[{caption:["top","bottom"]}],transition:[{transition:["none","all","","colors","opacity","shadow","transform",oe]}],duration:[{duration:he()}],ease:[{ease:["linear","in","out","in-out",oe]}],delay:[{delay:he()}],animate:[{animate:["none","spin","ping","pulse","bounce",oe]}],transform:[{transform:["","gpu","none"]}],scale:[{scale:[b]}],"scale-x":[{"scale-x":[b]}],"scale-y":[{"scale-y":[b]}],rotate:[{rotate:[go,oe]}],"translate-x":[{"translate-x":[P]}],"translate-y":[{"translate-y":[P]}],"skew-x":[{"skew-x":[E]}],"skew-y":[{"skew-y":[E]}],"transform-origin":[{origin:["center","top","top-right","right","bottom-right","bottom","bottom-left","left","top-left",oe]}],accent:[{accent:["auto",t]}],appearance:[{appearance:["none","auto"]}],cursor:[{cursor:["auto","default","pointer","wait","text","move","help","not-allowed","none","context-menu","progress","cell","crosshair","vertical-text","alias","copy","no-drop","grab","grabbing","all-scroll","col-resize","row-resize","n-resize","e-resize","s-resize","w-resize","ne-resize","nw-resize","se-resize","sw-resize","ew-resize","ns-resize","nesw-resize","nwse-resize","zoom-in","zoom-out",oe]}],"caret-color":[{caret:[t]}],"pointer-events":[{"pointer-events":["none","auto"]}],resize:[{resize:["none","y","x",""]}],"scroll-behavior":[{scroll:["auto","smooth"]}],"scroll-m":[{"scroll-m":j()}],"scroll-mx":[{"scroll-mx":j()}],"scroll-my":[{"scroll-my":j()}],"scroll-ms":[{"scroll-ms":j()}],"scroll-me":[{"scroll-me":j()}],"scroll-mt":[{"scroll-mt":j()}],"scroll-mr":[{"scroll-mr":j()}],"scroll-mb":[{"scroll-mb":j()}],"scroll-ml":[{"scroll-ml":j()}],"scroll-p":[{"scroll-p":j()}],"scroll-px":[{"scroll-px":j()}],"scroll-py":[{"scroll-py":j()}],"scroll-ps":[{"scroll-ps":j()}],"scroll-pe":[{"scroll-pe":j()}],"scroll-pt":[{"scroll-pt":j()}],"scroll-pr":[{"scroll-pr":j()}],"scroll-pb":[{"scroll-pb":j()}],"scroll-pl":[{"scroll-pl":j()}],"snap-align":[{snap:["start","end","center","align-none"]}],"snap-stop":[{snap:["normal","always"]}],"snap-type":[{snap:["none","x","y","both"]}],"snap-strictness":[{snap:["mandatory","proximity"]}],touch:[{touch:["auto","none","manipulation"]}],"touch-x":[{"touch-pan":["x","left","right"]}],"touch-y":[{"touch-pan":["y","up","down"]}],"touch-pz":["touch-pinch-zoom"],select:[{select:["none","text","all","auto"]}],"will-change":[{"will-change":["auto","scroll","contents","transform",oe]}],fill:[{fill:[t,"none"]}],"stroke-w":[{stroke:[ei,ki,nd]}],stroke:[{stroke:[t,"none"]}],sr:["sr-only","not-sr-only"],"forced-color-adjust":[{"forced-color-adjust":["auto","none"]}]},conflictingClassGroups:{overflow:["overflow-x","overflow-y"],overscroll:["overscroll-x","overscroll-y"],inset:["inset-x","inset-y","start","end","top","right","bottom","left"],"inset-x":["right","left"],"inset-y":["top","bottom"],flex:["basis","grow","shrink"],gap:["gap-x","gap-y"],p:["px","py","ps","pe","pt","pr","pb","pl"],px:["pr","pl"],py:["pt","pb"],m:["mx","my","ms","me","mt","mr","mb","ml"],mx:["mr","ml"],my:["mt","mb"],size:["w","h"],"font-size":["leading"],"fvn-normal":["fvn-ordinal","fvn-slashed-zero","fvn-figure","fvn-spacing","fvn-fraction"],"fvn-ordinal":["fvn-normal"],"fvn-slashed-zero":["fvn-normal"],"fvn-figure":["fvn-normal"],"fvn-spacing":["fvn-normal"],"fvn-fraction":["fvn-normal"],"line-clamp":["display","overflow"],rounded:["rounded-s","rounded-e","rounded-t","rounded-r","rounded-b","rounded-l","rounded-ss","rounded-se","rounded-ee","rounded-es","rounded-tl","rounded-tr","rounded-br","rounded-bl"],"rounded-s":["rounded-ss","rounded-es"],"rounded-e":["rounded-se","rounded-ee"],"rounded-t":["rounded-tl","rounded-tr"],"rounded-r":["rounded-tr","rounded-br"],"rounded-b":["rounded-br","rounded-bl"],"rounded-l":["rounded-tl","rounded-bl"],"border-spacing":["border-spacing-x","border-spacing-y"],"border-w":["border-w-s","border-w-e","border-w-t","border-w-r","border-w-b","border-w-l"],"border-w-x":["border-w-r","border-w-l"],"border-w-y":["border-w-t","border-w-b"],"border-color":["border-color-s","border-color-e","border-color-t","border-color-r","border-color-b","border-color-l"],"border-color-x":["border-color-r","border-color-l"],"border-color-y":["border-color-t","border-color-b"],"scroll-m":["scroll-mx","scroll-my","scroll-ms","scroll-me","scroll-mt","scroll-mr","scroll-mb","scroll-ml"],"scroll-mx":["scroll-mr","scroll-ml"],"scroll-my":["scroll-mt","scroll-mb"],"scroll-p":["scroll-px","scroll-py","scroll-ps","scroll-pe","scroll-pt","scroll-pr","scroll-pb","scroll-pl"],"scroll-px":["scroll-pr","scroll-pl"],"scroll-py":["scroll-pt","scroll-pb"],touch:["touch-x","touch-y","touch-pz"],"touch-x":["touch"],"touch-y":["touch"],"touch-pz":["touch"]},conflictingClassGroupModifiers:{"font-size":["leading"]}}},RA=pA(AA);function mn(...t){return RA(tA(t))}const FA=GN,K_=S.forwardRef(({className:t,...e},n)=>p.jsx(F_,{ref:n,className:mn("fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",t),...e}));K_.displayName=F_.displayName;const IA=KN("group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",{variants:{variant:{default:"border bg-background text-foreground",destructive:"destructive group border-destructive bg-destructive text-destructive-foreground"}},defaultVariants:{variant:"default"}}),Z_=S.forwardRef(({className:t,variant:e,...n},i)=>p.jsx(I_,{ref:i,className:mn(IA({variant:e}),t),...n}));Z_.displayName=I_.displayName;const OA=S.forwardRef(({className:t,...e},n)=>p.jsx(L_,{ref:n,className:mn("inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",t),...e}));OA.displayName=L_.displayName;const X_=S.forwardRef(({className:t,...e},n)=>p.jsx(z_,{ref:n,className:mn("absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",t),"toast-close":"",...e,children:p.jsx(eA,{className:"h-4 w-4"})}));X_.displayName=z_.displayName;const Y_=S.forwardRef(({className:t,...e},n)=>p.jsx(O_,{ref:n,className:mn("text-sm font-semibold",t),...e}));Y_.displayName=O_.displayName;const J_=S.forwardRef(({className:t,...e},n)=>p.jsx(j_,{ref:n,className:mn("text-sm opacity-90",t),...e}));J_.displayName=j_.displayName;function jA(){const{toasts:t}=f_();return p.jsxs(FA,{children:[t.map(function({id:e,title:n,description:i,action:r,...s}){return p.jsxs(Z_,{...s,children:[p.jsxs("div",{className:"grid gap-1",children:[n&&p.jsx(Y_,{children:n}),i&&p.jsx(J_,{children:i})]}),r,p.jsx(X_,{})]},e)}),p.jsx(K_,{})]})}const zo="generated",LA="pointerdown",zA="pointerup",zf="pointerleave",VA="pointerout",Vr="pointermove",BA="touchstart",Gg="touchend",UA="touchmove",$A="touchcancel",WA="resize",HA="visibilitychange",pn="tsParticles - Error";class $t{constructor(e,n,i){if(this._updateFromAngle=(r,s)=>{this.x=Math.cos(r)*s,this.y=Math.sin(r)*s},!Dn(e)&&e){this.x=e.x,this.y=e.y;const r=e;this.z=r.z?r.z:0}else if(e!==void 0&&n!==void 0)this.x=e,this.y=n,this.z=i??0;else throw new Error(`${pn} Vector3d not initialized correctly`)}static get origin(){return $t.create(0,0,0)}get angle(){return Math.atan2(this.y,this.x)}set angle(e){this._updateFromAngle(e,this.length)}get length(){return Math.sqrt(this.getLengthSq())}set length(e){this._updateFromAngle(this.angle,e)}static clone(e){return $t.create(e.x,e.y,e.z)}static create(e,n,i){return new $t(e,n,i)}add(e){return $t.create(this.x+e.x,this.y+e.y,this.z+e.z)}addTo(e){this.x+=e.x,this.y+=e.y,this.z+=e.z}copy(){return $t.clone(this)}distanceTo(e){return this.sub(e).length}distanceToSq(e){return this.sub(e).getLengthSq()}div(e){return $t.create(this.x/e,this.y/e,this.z/e)}divTo(e){this.x/=e,this.y/=e,this.z/=e}getLengthSq(){return this.x**2+this.y**2}mult(e){return $t.create(this.x*e,this.y*e,this.z*e)}multTo(e){this.x*=e,this.y*=e,this.z*=e}normalize(){const e=this.length;e!=0&&this.multTo(1/e)}rotate(e){return $t.create(this.x*Math.cos(e)-this.y*Math.sin(e),this.x*Math.sin(e)+this.y*Math.cos(e),0)}setTo(e){this.x=e.x,this.y=e.y;const n=e;this.z=n.z?n.z:0}sub(e){return $t.create(this.x-e.x,this.y-e.y,this.z-e.z)}subFrom(e){this.x-=e.x,this.y-=e.y,this.z-=e.z}}class nt extends $t{constructor(e,n){super(e,n,0)}static get origin(){return nt.create(0,0)}static clone(e){return nt.create(e.x,e.y)}static create(e,n){return new nt(e,n)}}let qA=Math.random;const Vf=new Map;function id(t,e){Vf.get(t)||Vf.set(t,e)}function e2(t){return Vf.get(t)||(e=>e)}function Ee(){return Fn(qA(),0,1-1e-16)}function Fn(t,e,n){return Math.min(Math.max(t,e),n)}function rd(t,e,n,i){return Math.floor((t*n+e*i)/(n+i))}function jt(t){const e=Bi(t);let n=yp(t);return e===n&&(n=0),Ee()*(e-n)+n}function X(t){return Dn(t)?t:jt(t)}function yp(t){return Dn(t)?t:t.min}function Bi(t){return Dn(t)?t:t.max}function le(t,e){if(t===e||e===void 0&&Dn(t))return t;const n=yp(t),i=Bi(t);return e!==void 0?{min:Math.min(n,e),max:Math.max(i,e)}:le(n,i)}function Br(t){const e=t.random,{enable:n,minimumValue:i}=Zi(e)?{enable:e,minimumValue:0}:e;return X(n?le(t.value,i):t.value)}function Dt(t,e){const n=t.x-e.x,i=t.y-e.y;return{dx:n,dy:i,distance:Math.sqrt(n**2+i**2)}}function Qt(t,e){return Dt(t,e).distance}function GA(t,e,n){if(Dn(t))return t*Math.PI/180;switch(t){case"top":return-Math.PI/2;case"top-right":return-Math.PI/4;case"right":return 0;case"bottom-right":return Math.PI/4;case"bottom":return Math.PI/2;case"bottom-left":return 3*Math.PI/4;case"left":return Math.PI;case"top-left":return-3*Math.PI/4;case"inside":return Math.atan2(n.y-e.y,n.x-e.x);case"outside":return Math.atan2(e.y-n.y,e.x-n.x);default:return Ee()*Math.PI*2}}function QA(t){const e=nt.origin;return e.length=1,e.angle=t,e}function Qg(t,e,n,i){return nt.create(t.x*(n-i)/(n+i)+e.x*2*i/(n+i),t.y)}function KA(t){var e,n;return{x:((e=t.position)==null?void 0:e.x)??Ee()*t.size.width,y:((n=t.position)==null?void 0:n.y)??Ee()*t.size.height}}function t2(t){return t?t.endsWith("%")?parseFloat(t)/100:parseFloat(t):1}const ZA={debug:console.debug,error:console.error,info:console.info,log:console.log,verbose:console.log,warning:console.warn};function Ur(){return ZA}function Kg(t){const e={bounced:!1},{pSide:n,pOtherSide:i,rectSide:r,rectOtherSide:s,velocity:o,factor:a}=t;return i.min<s.min||i.min>s.max||i.max<s.min||i.max>s.max||(n.max>=r.min&&n.max<=(r.max+r.min)/2&&o>0||n.min<=r.max&&n.min>(r.max+r.min)/2&&o<0)&&(e.velocity=o*-a,e.bounced=!0),e}function XA(t,e){const n=it(e,i=>t.matches(i));return Kt(n)?n.some(i=>i):n}function Hs(){return typeof window>"u"||!window||typeof window.document>"u"||!window.document}function YA(){return!Hs()&&typeof matchMedia<"u"}function n2(t){if(YA())return matchMedia(t)}function JA(t){if(!(Hs()||typeof MutationObserver>"u"))return new MutationObserver(t)}function He(t,e){return t===e||Kt(e)&&e.indexOf(t)>-1}async function e3(t,e){try{await document.fonts.load(`${e??"400"} 36px '${t??"Verdana"}'`)}catch{}}function t3(t){return Math.floor(Ee()*t.length)}function uc(t,e,n=!0){return t[e!==void 0&&n?e%t.length:t3(t)]}function vp(t,e,n,i,r){return n3(za(t,i??0),e,n,r)}function n3(t,e,n,i){let r=!0;return(!i||i==="bottom")&&(r=t.top<e.height+n.x),r&&(!i||i==="left")&&(r=t.right>n.x),r&&(!i||i==="right")&&(r=t.left<e.width+n.y),r&&(!i||i==="top")&&(r=t.bottom>n.y),r}function za(t,e){return{bottom:t.y+e,left:t.x-e,right:t.x+e,top:t.y-e}}function xt(t,...e){for(const n of e){if(n==null)continue;if(!cs(n)){t=n;continue}const i=Array.isArray(n);i&&(cs(t)||!t||!Array.isArray(t))?t=[]:!i&&(cs(t)||!t||Array.isArray(t))&&(t={});for(const r in n){if(r==="__proto__")continue;const s=n,o=s[r],a=t;a[r]=cs(o)&&Array.isArray(o)?o.map(l=>xt(a[r],l)):xt(a[r],o)}}return t}function xp(t,e){return!!s2(e,n=>n.enable&&He(t,n.mode))}function wp(t,e,n){it(e,i=>{const r=i.mode;i.enable&&He(t,r)&&i3(i,n)})}function i3(t,e){const n=t.selectors;it(n,i=>{e(i,t)})}function i2(t,e){if(!(!e||!t))return s2(t,n=>XA(e,n.selectors))}function Bf(t){return{position:t.getPosition(),radius:t.getRadius(),mass:t.getMass(),velocity:t.velocity,factor:nt.create(Br(t.options.bounce.horizontal),Br(t.options.bounce.vertical))}}function r2(t,e){const{x:n,y:i}=t.velocity.sub(e.velocity),[r,s]=[t.position,e.position],{dx:o,dy:a}=Dt(s,r);if(n*o+i*a<0)return;const l=-Math.atan2(a,o),u=t.mass,c=e.mass,d=t.velocity.rotate(l),f=e.velocity.rotate(l),h=Qg(d,f,u,c),v=Qg(f,d,u,c),y=h.rotate(-l),w=v.rotate(-l);t.velocity.x=y.x*t.factor.x,t.velocity.y=y.y*t.factor.y,e.velocity.x=w.x*e.factor.x,e.velocity.y=w.y*e.factor.y}function r3(t,e){const n=t.getPosition(),i=t.getRadius(),r=za(n,i),s=Kg({pSide:{min:r.left,max:r.right},pOtherSide:{min:r.top,max:r.bottom},rectSide:{min:e.left,max:e.right},rectOtherSide:{min:e.top,max:e.bottom},velocity:t.velocity.x,factor:Br(t.options.bounce.horizontal)});s.bounced&&(s.velocity!==void 0&&(t.velocity.x=s.velocity),s.position!==void 0&&(t.position.x=s.position));const o=Kg({pSide:{min:r.top,max:r.bottom},pOtherSide:{min:r.left,max:r.right},rectSide:{min:e.top,max:e.bottom},rectOtherSide:{min:e.left,max:e.right},velocity:t.velocity.y,factor:Br(t.options.bounce.vertical)});o.bounced&&(o.velocity!==void 0&&(t.velocity.y=o.velocity),o.position!==void 0&&(t.position.y=o.position))}function it(t,e){return Kt(t)?t.map((n,i)=>e(n,i)):e(t,0)}function di(t,e,n){return Kt(t)?uc(t,e,n):t}function s2(t,e){return Kt(t)?t.find((n,i)=>e(n,i)):e(t,0)?t:void 0}function o2(t,e){const n=t.value,i=t.animation,r={delayTime:X(i.delay)*1e3,enable:i.enable,value:X(t.value)*e,max:Bi(n)*e,min:yp(n)*e,loops:0,maxLoops:X(i.count),time:0};if(i.enable){switch(r.decay=1-X(i.decay),i.mode){case"increase":r.status="increasing";break;case"decrease":r.status="decreasing";break;case"random":r.status=Ee()>=.5?"increasing":"decreasing";break}const s=i.mode==="auto";switch(i.startValue){case"min":r.value=r.min,s&&(r.status="increasing");break;case"max":r.value=r.max,s&&(r.status="decreasing");break;case"random":default:r.value=jt(r),s&&(r.status=Ee()>=.5?"increasing":"decreasing");break}}return r.initialValue=r.value,r}function s3(t,e){if(!(t.mode==="percent")){const{mode:r,...s}=t;return s}return"x"in t?{x:t.x/100*e.width,y:t.y/100*e.height}:{width:t.width/100*e.width,height:t.height/100*e.height}}function a2(t,e){return s3(t,e)}function Zi(t){return typeof t=="boolean"}function Mn(t){return typeof t=="string"}function Dn(t){return typeof t=="number"}function l2(t){return typeof t=="function"}function cs(t){return typeof t=="object"&&t!==null}function Kt(t){return Array.isArray(t)}const hu="random",Rl="mid",cc=new Map;function Zg(t){cc.set(t.key,t)}function sd(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+(e-t)*6*n:n<1/2?e:n<2/3?t+(e-t)*(2/3-n)*6:t}function o3(t){for(const[,s]of cc)if(t.startsWith(s.stringPrefix))return s.parseString(t);const e=/^#?([a-f\d])([a-f\d])([a-f\d])([a-f\d])?$/i,n=t.replace(e,(s,o,a,l,u)=>o+o+a+a+l+l+(u!==void 0?u+u:"")),i=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i,r=i.exec(n);return r?{a:r[4]!==void 0?parseInt(r[4],16)/255:1,b:parseInt(r[3],16),g:parseInt(r[2],16),r:parseInt(r[1],16)}:void 0}function Nn(t,e,n=!0){if(!t)return;const i=Mn(t)?{value:t}:t;if(Mn(i.value))return u2(i.value,e,n);if(Kt(i.value))return Nn({value:uc(i.value,e,n)});for(const[,r]of cc){const s=r.handleRangeColor(i);if(s)return s}}function u2(t,e,n=!0){if(!t)return;const i=Mn(t)?{value:t}:t;if(Mn(i.value))return i.value===hu?d2():a3(i.value);if(Kt(i.value))return u2({value:uc(i.value,e,n)});for(const[,r]of cc){const s=r.handleColor(i);if(s)return s}}function ca(t,e,n=!0){const i=Nn(t,e,n);return i?c2(i):void 0}function c2(t){const e=t.r/255,n=t.g/255,i=t.b/255,r=Math.max(e,n,i),s=Math.min(e,n,i),o={h:0,l:(r+s)/2,s:0};return r!==s&&(o.s=o.l<.5?(r-s)/(r+s):(r-s)/(2-r-s),o.h=e===r?(n-i)/(r-s):o.h=n===r?2+(i-e)/(r-s):4+(e-n)/(r-s)),o.l*=100,o.s*=100,o.h*=60,o.h<0&&(o.h+=360),o.h>=360&&(o.h-=360),o}function a3(t){return o3(t)}function qs(t){const e={b:0,g:0,r:0},n={h:t.h/360,l:t.l/100,s:t.s/100};if(!n.s)e.r=e.g=e.b=n.l;else{const i=n.l<.5?n.l*(1+n.s):n.l+n.s-n.l*n.s,r=2*n.l-i;e.r=sd(r,i,n.h+1/3),e.g=sd(r,i,n.h),e.b=sd(r,i,n.h-1/3)}return e.r=Math.floor(e.r*255),e.g=Math.floor(e.g*255),e.b=Math.floor(e.b*255),e}function l3(t){const e=qs(t);return{a:t.a,b:e.b,g:e.g,r:e.r}}function d2(t){return{b:Math.floor(jt(le(0,256))),g:Math.floor(jt(le(0,256))),r:Math.floor(jt(le(0,256)))}}function fi(t,e){return`rgba(${t.r}, ${t.g}, ${t.b}, ${e??1})`}function da(t,e){return`hsla(${t.h}, ${t.s}%, ${t.l}%, ${e??1})`}function bp(t,e,n,i){let r=t,s=e;return r.r===void 0&&(r=qs(t)),s.r===void 0&&(s=qs(e)),{b:rd(r.b,s.b,n,i),g:rd(r.g,s.g,n,i),r:rd(r.r,s.r,n,i)}}function Uf(t,e,n){if(n===hu)return d2();if(n===Rl){const i=t.getFillColor()??t.getStrokeColor(),r=(e==null?void 0:e.getFillColor())??(e==null?void 0:e.getStrokeColor());if(i&&r&&e)return bp(i,r,t.getRadius(),e.getRadius());{const s=i??r;if(s)return qs(s)}}else return n}function f2(t,e,n){const i=Mn(t)?t:t.value;return i===hu?n?Nn({value:i}):e?hu:Rl:i===Rl?Rl:Nn({value:i})}function Xg(t){return t!==void 0?{h:t.h.value,s:t.s.value,l:t.l.value}:void 0}function h2(t,e,n){const i={h:{enable:!1,value:t.h},s:{enable:!1,value:t.s},l:{enable:!1,value:t.l}};return e&&(od(i.h,e.h,n),od(i.s,e.s,n),od(i.l,e.l,n)),i}function od(t,e,n){t.enable=e.enable,t.enable?(t.velocity=X(e.speed)/100*n,t.decay=1-X(e.decay),t.status="increasing",t.loops=0,t.maxLoops=X(e.count),t.time=0,t.delayTime=X(e.delay)*1e3,e.sync||(t.velocity*=Ee(),t.value*=Ee()),t.initialValue=t.value):t.velocity=0}function Vo(t,e,n){t.beginPath(),t.moveTo(e.x,e.y),t.lineTo(n.x,n.y),t.closePath()}function u3(t,e,n,i){t.beginPath(),t.moveTo(e.x,e.y),t.lineTo(n.x,n.y),t.lineTo(i.x,i.y),t.closePath()}function c3(t,e,n){t.fillStyle=n??"rgba(0,0,0,0)",t.fillRect(0,0,e.width,e.height)}function d3(t,e,n,i){n&&(t.globalAlpha=i,t.drawImage(n,0,0,e.width,e.height),t.globalAlpha=1)}function ad(t,e){t.clearRect(0,0,e.width,e.height)}function f3(t){const{container:e,context:n,particle:i,delta:r,colorStyles:s,backgroundMask:o,composite:a,radius:l,opacity:u,shadow:c,transform:d}=t,f=i.getPosition(),h=i.rotation+(i.pathRotation?i.velocity.angle:0),v={sin:Math.sin(h),cos:Math.cos(h)},y={a:v.cos*(d.a??1),b:v.sin*(d.b??1),c:-v.sin*(d.c??1),d:v.cos*(d.d??1)};n.setTransform(y.a,y.b,y.c,y.d,f.x,f.y),n.beginPath(),o&&(n.globalCompositeOperation=a);const w=i.shadowColor;c.enable&&w&&(n.shadowBlur=c.blur,n.shadowColor=fi(w),n.shadowOffsetX=c.offset.x,n.shadowOffsetY=c.offset.y),s.fill&&(n.fillStyle=s.fill);const g=i.strokeWidth??0;n.lineWidth=g,s.stroke&&(n.strokeStyle=s.stroke),h3(e,n,i,l,u,r),g>0&&n.stroke(),i.close&&n.closePath(),i.fill&&n.fill(),p3(e,n,i,l,u,r),n.globalCompositeOperation="source-over",n.setTransform(1,0,0,1,0,0)}function h3(t,e,n,i,r,s){if(!n.shape)return;const o=t.drawers.get(n.shape);o&&o.draw(e,n,i,r,s,t.retina.pixelRatio)}function p3(t,e,n,i,r,s){if(!n.shape)return;const o=t.drawers.get(n.shape);!o||!o.afterEffect||o.afterEffect(e,n,i,r,s,t.retina.pixelRatio)}function m3(t,e,n){e.draw&&e.draw(t,n)}function g3(t,e,n,i){e.drawParticle&&e.drawParticle(t,n,i)}function y3(t,e,n){return{h:t.h,s:t.s,l:t.l+(e==="darken"?-1:1)*n}}function v3(t,e,n){const i=e[n];i!==void 0&&(t[n]=(t[n]??1)*i)}class x3{constructor(e){this.container=e,this._applyPostDrawUpdaters=n=>{for(const i of this._postDrawUpdaters)i.afterDraw&&i.afterDraw(n)},this._applyPreDrawUpdaters=(n,i,r,s,o,a)=>{for(const l of this._preDrawUpdaters){if(l.getColorStyles){const{fill:u,stroke:c}=l.getColorStyles(i,n,r,s);u&&(o.fill=u),c&&(o.stroke=c)}if(l.getTransformValues){const u=l.getTransformValues(i);for(const c in u)v3(a,u,c)}l.beforeDraw&&l.beforeDraw(i)}},this._applyResizePlugins=()=>{for(const n of this._resizePlugins)n.resize&&n.resize()},this._getPluginParticleColors=n=>{let i,r;for(const s of this._colorPlugins)if(!i&&s.particleFillColor&&(i=ca(s.particleFillColor(n))),!r&&s.particleStrokeColor&&(r=ca(s.particleStrokeColor(n))),i&&r)break;return[i,r]},this._initCover=()=>{const n=this.container.actualOptions,i=n.backgroundMask.cover,r=i.color,s=Nn(r);if(s){const o={...s,a:i.opacity};this._coverColorStyle=fi(o,o.a)}},this._initStyle=()=>{const n=this.element,i=this.container.actualOptions;if(n){this._fullScreen?(this._originalStyle=xt({},n.style),this._setFullScreenStyle()):this._resetOriginalStyle();for(const r in i.style){if(!r||!i.style)continue;const s=i.style[r];s&&n.style.setProperty(r,s,"important")}}},this._initTrail=async()=>{const n=this.container.actualOptions,i=n.particles.move.trail,r=i.fill;if(i.enable)if(r.color){const s=Nn(r.color);if(!s)return;const o=n.particles.move.trail;this._trailFill={color:{...s},opacity:1/o.length}}else await new Promise((s,o)=>{if(!r.image)return;const a=document.createElement("img");a.addEventListener("load",()=>{this._trailFill={image:a,opacity:1/i.length},s()}),a.addEventListener("error",l=>{o(l.error)}),a.src=r.image})},this._paintBase=n=>{this.draw(i=>c3(i,this.size,n))},this._paintImage=(n,i)=>{this.draw(r=>d3(r,this.size,n,i))},this._repairStyle=()=>{const n=this.element;n&&(this._safeMutationObserver(i=>i.disconnect()),this._initStyle(),this.initBackground(),this._safeMutationObserver(i=>i.observe(n,{attributes:!0})))},this._resetOriginalStyle=()=>{const n=this.element,i=this._originalStyle;if(!(n&&i))return;const r=n.style;r.position=i.position,r.zIndex=i.zIndex,r.top=i.top,r.left=i.left,r.width=i.width,r.height=i.height},this._safeMutationObserver=n=>{this._mutationObserver&&n(this._mutationObserver)},this._setFullScreenStyle=()=>{const n=this.element;if(!n)return;const i="important",r=n.style;r.setProperty("position","fixed",i),r.setProperty("z-index",this.container.actualOptions.fullScreen.zIndex.toString(10),i),r.setProperty("top","0",i),r.setProperty("left","0",i),r.setProperty("width","100%",i),r.setProperty("height","100%",i)},this.size={height:0,width:0},this._context=null,this._generated=!1,this._preDrawUpdaters=[],this._postDrawUpdaters=[],this._resizePlugins=[],this._colorPlugins=[]}get _fullScreen(){return this.container.actualOptions.fullScreen.enable}clear(){const e=this.container.actualOptions,n=e.particles.move.trail,i=this._trailFill;e.backgroundMask.enable?this.paint():n.enable&&n.length>0&&i?i.color?this._paintBase(fi(i.color,i.opacity)):i.image&&this._paintImage(i.image,i.opacity):this.draw(r=>{ad(r,this.size)})}destroy(){if(this.stop(),this._generated){const e=this.element;e&&e.remove()}else this._resetOriginalStyle();this._preDrawUpdaters=[],this._postDrawUpdaters=[],this._resizePlugins=[],this._colorPlugins=[]}draw(e){const n=this._context;if(n)return e(n)}drawParticle(e,n){if(e.spawning||e.destroyed)return;const i=e.getRadius();if(i<=0)return;const r=e.getFillColor(),s=e.getStrokeColor()??r;let[o,a]=this._getPluginParticleColors(e);o||(o=r),a||(a=s),!(!o&&!a)&&this.draw(l=>{var x;const u=this.container,c=u.actualOptions,d=e.options.zIndex,f=(1-e.zIndexFactor)**d.opacityRate,h=e.bubble.opacity??((x=e.opacity)==null?void 0:x.value)??1,v=e.strokeOpacity??h,y=h*f,w=v*f,g={},m={fill:o?da(o,y):void 0};m.stroke=a?da(a,w):m.fill,this._applyPreDrawUpdaters(l,e,i,y,m,g),f3({container:u,context:l,particle:e,delta:n,colorStyles:m,backgroundMask:c.backgroundMask.enable,composite:c.backgroundMask.composite,radius:i*(1-e.zIndexFactor)**d.sizeRate,opacity:y,shadow:e.options.shadow,transform:g}),this._applyPostDrawUpdaters(e)})}drawParticlePlugin(e,n,i){this.draw(r=>g3(r,e,n,i))}drawPlugin(e,n){this.draw(i=>m3(i,e,n))}async init(){this._safeMutationObserver(e=>e.disconnect()),this._mutationObserver=JA(e=>{for(const n of e)n.type==="attributes"&&n.attributeName==="style"&&this._repairStyle()}),this.resize(),this._initStyle(),this._initCover();try{await this._initTrail()}catch(e){Ur().error(e)}this.initBackground(),this._safeMutationObserver(e=>{this.element&&e.observe(this.element,{attributes:!0})}),this.initUpdaters(),this.initPlugins(),this.paint()}initBackground(){const e=this.container.actualOptions,n=e.background,i=this.element;if(!i)return;const r=i.style;if(r){if(n.color){const s=Nn(n.color);r.backgroundColor=s?fi(s,n.opacity):""}else r.backgroundColor="";r.backgroundImage=n.image||"",r.backgroundPosition=n.position||"",r.backgroundRepeat=n.repeat||"",r.backgroundSize=n.size||""}}initPlugins(){this._resizePlugins=[];for(const[,e]of this.container.plugins)e.resize&&this._resizePlugins.push(e),(e.particleFillColor||e.particleStrokeColor)&&this._colorPlugins.push(e)}initUpdaters(){this._preDrawUpdaters=[],this._postDrawUpdaters=[];for(const e of this.container.particles.updaters)e.afterDraw&&this._postDrawUpdaters.push(e),(e.getColorStyles||e.getTransformValues||e.beforeDraw)&&this._preDrawUpdaters.push(e)}loadCanvas(e){this._generated&&this.element&&this.element.remove(),this._generated=e.dataset&&zo in e.dataset?e.dataset[zo]==="true":this._generated,this.element=e,this.element.ariaHidden="true",this._originalStyle=xt({},this.element.style),this.size.height=e.offsetHeight,this.size.width=e.offsetWidth,this._context=this.element.getContext("2d"),this._safeMutationObserver(n=>{this.element&&n.observe(this.element,{attributes:!0})}),this.container.retina.init(),this.initBackground()}paint(){const e=this.container.actualOptions;this.draw(n=>{e.backgroundMask.enable&&e.backgroundMask.cover?(ad(n,this.size),this._paintBase(this._coverColorStyle)):this._paintBase()})}resize(){if(!this.element)return!1;const e=this.container,n=e.retina.pixelRatio,i=e.canvas.size,r={width:this.element.offsetWidth*n,height:this.element.offsetHeight*n};if(r.height===i.height&&r.width===i.width&&r.height===this.element.height&&r.width===this.element.width)return!1;const s={...i};return this.element.width=i.width=this.element.offsetWidth*n,this.element.height=i.height=this.element.offsetHeight*n,this.container.started&&(this.resizeFactor={width:i.width/s.width,height:i.height/s.height}),!0}stop(){this._safeMutationObserver(e=>e.disconnect()),this._mutationObserver=void 0,this.draw(e=>ad(e,this.size))}async windowResize(){if(!this.element||!this.resize())return;const e=this.container,n=e.updateActualOptions();e.particles.setDensity(),this._applyResizePlugins(),n&&await e.refresh()}}function tn(t,e,n,i,r){if(i){let s={passive:!0};Zi(r)?s.capture=r:r!==void 0&&(s=r),t.addEventListener(e,n,s)}else{const s=r;t.removeEventListener(e,n,s)}}class w3{constructor(e){this.container=e,this._doMouseTouchClick=n=>{const i=this.container,r=i.actualOptions;if(this._canPush){const s=i.interactivity.mouse,o=s.position;if(!o)return;s.clickPosition={...o},s.clickTime=new Date().getTime();const a=r.interactivity.events.onClick;it(a.mode,l=>this.container.handleClickMode(l))}n.type==="touchend"&&setTimeout(()=>this._mouseTouchFinish(),500)},this._handleThemeChange=n=>{const i=n,r=this.container,s=r.options,o=s.defaultThemes,a=i.matches?o.dark:o.light,l=s.themes.find(u=>u.name===a);l&&l.default.auto&&r.loadTheme(a)},this._handleVisibilityChange=()=>{const n=this.container,i=n.actualOptions;this._mouseTouchFinish(),i.pauseOnBlur&&(document&&document.hidden?(n.pageHidden=!0,n.pause()):(n.pageHidden=!1,n.getAnimationStatus()?n.play(!0):n.draw(!0)))},this._handleWindowResize=async()=>{this._resizeTimeout&&(clearTimeout(this._resizeTimeout),delete this._resizeTimeout),this._resizeTimeout=setTimeout(async()=>{const n=this.container.canvas;n&&await n.windowResize()},this.container.actualOptions.interactivity.events.resize.delay*1e3)},this._manageInteractivityListeners=(n,i)=>{const r=this._handlers,s=this.container,o=s.actualOptions,a=s.interactivity.element;if(!a)return;const l=a,u=s.canvas.element;u&&(u.style.pointerEvents=l===u?"initial":"none"),(o.interactivity.events.onHover.enable||o.interactivity.events.onClick.enable)&&(tn(a,Vr,r.mouseMove,i),tn(a,BA,r.touchStart,i),tn(a,UA,r.touchMove,i),o.interactivity.events.onClick.enable?(tn(a,Gg,r.touchEndClick,i),tn(a,zA,r.mouseUp,i),tn(a,LA,r.mouseDown,i)):tn(a,Gg,r.touchEnd,i),tn(a,n,r.mouseLeave,i),tn(a,$A,r.touchCancel,i))},this._manageListeners=n=>{const i=this._handlers,r=this.container,s=r.actualOptions,o=s.interactivity.detectsOn,a=r.canvas.element;let l=zf;o==="window"?(r.interactivity.element=window,l=VA):o==="parent"&&a?r.interactivity.element=a.parentElement??a.parentNode:r.interactivity.element=a,this._manageMediaMatch(n),this._manageResize(n),this._manageInteractivityListeners(l,n),document&&tn(document,HA,i.visibilityChange,n,!1)},this._manageMediaMatch=n=>{const i=this._handlers,r=n2("(prefers-color-scheme: dark)");if(r){if(r.addEventListener!==void 0){tn(r,"change",i.themeChange,n);return}r.addListener!==void 0&&(n?r.addListener(i.oldThemeChange):r.removeListener(i.oldThemeChange))}},this._manageResize=n=>{const i=this._handlers,r=this.container;if(!r.actualOptions.interactivity.events.resize)return;if(typeof ResizeObserver>"u"){tn(window,WA,i.resize,n);return}const o=r.canvas.element;this._resizeObserver&&!n?(o&&this._resizeObserver.unobserve(o),this._resizeObserver.disconnect(),delete this._resizeObserver):!this._resizeObserver&&n&&o&&(this._resizeObserver=new ResizeObserver(async a=>{a.find(u=>u.target===o)&&await this._handleWindowResize()}),this._resizeObserver.observe(o))},this._mouseDown=()=>{const{interactivity:n}=this.container;if(!n)return;const{mouse:i}=n;i.clicking=!0,i.downPosition=i.position},this._mouseTouchClick=n=>{const i=this.container,r=i.actualOptions,{mouse:s}=i.interactivity;s.inside=!0;let o=!1;const a=s.position;if(!(!a||!r.interactivity.events.onClick.enable)){for(const[,l]of i.plugins)if(l.clickPositionValid&&(o=l.clickPositionValid(a),o))break;o||this._doMouseTouchClick(n),s.clicking=!1}},this._mouseTouchFinish=()=>{const n=this.container.interactivity;if(!n)return;const i=n.mouse;delete i.position,delete i.clickPosition,delete i.downPosition,n.status=zf,i.inside=!1,i.clicking=!1},this._mouseTouchMove=n=>{const i=this.container,r=i.actualOptions,s=i.interactivity,o=i.canvas.element;if(!s||!s.element)return;s.mouse.inside=!0;let a;if(n.type.startsWith("pointer")){this._canPush=!0;const u=n;if(s.element===window){if(o){const c=o.getBoundingClientRect();a={x:u.clientX-c.left,y:u.clientY-c.top}}}else if(r.interactivity.detectsOn==="parent"){const c=u.target,d=u.currentTarget;if(c&&d&&o){const f=c.getBoundingClientRect(),h=d.getBoundingClientRect(),v=o.getBoundingClientRect();a={x:u.offsetX+2*f.left-(h.left+v.left),y:u.offsetY+2*f.top-(h.top+v.top)}}else a={x:u.offsetX??u.clientX,y:u.offsetY??u.clientY}}else u.target===o&&(a={x:u.offsetX??u.clientX,y:u.offsetY??u.clientY})}else if(this._canPush=n.type!=="touchmove",o){const u=n,c=u.touches[u.touches.length-1],d=o.getBoundingClientRect();a={x:c.clientX-(d.left??0),y:c.clientY-(d.top??0)}}const l=i.retina.pixelRatio;a&&(a.x*=l,a.y*=l),s.mouse.position=a,s.status=Vr},this._touchEnd=n=>{const i=n,r=Array.from(i.changedTouches);for(const s of r)this._touches.delete(s.identifier);this._mouseTouchFinish()},this._touchEndClick=n=>{const i=n,r=Array.from(i.changedTouches);for(const s of r)this._touches.delete(s.identifier);this._mouseTouchClick(n)},this._touchStart=n=>{const i=n,r=Array.from(i.changedTouches);for(const s of r)this._touches.set(s.identifier,performance.now());this._mouseTouchMove(n)},this._canPush=!0,this._touches=new Map,this._handlers={mouseDown:()=>this._mouseDown(),mouseLeave:()=>this._mouseTouchFinish(),mouseMove:n=>this._mouseTouchMove(n),mouseUp:n=>this._mouseTouchClick(n),touchStart:n=>this._touchStart(n),touchMove:n=>this._mouseTouchMove(n),touchEnd:n=>this._touchEnd(n),touchCancel:n=>this._touchEnd(n),touchEndClick:n=>this._touchEndClick(n),visibilityChange:()=>this._handleVisibilityChange(),themeChange:n=>this._handleThemeChange(n),oldThemeChange:n=>this._handleThemeChange(n),resize:()=>{this._handleWindowResize()}}}addListeners(){this._manageListeners(!0)}removeListeners(){this._manageListeners(!1)}}class ct{constructor(){this.value=""}static create(e,n){const i=new ct;return i.load(e),n!==void 0&&(Mn(n)||Kt(n)?i.load({value:n}):i.load(n)),i}load(e){(e==null?void 0:e.value)!==void 0&&(this.value=e.value)}}class b3{constructor(){this.color=new ct,this.color.value="",this.image="",this.position="",this.repeat="",this.size="",this.opacity=1}load(e){e&&(e.color!==void 0&&(this.color=ct.create(this.color,e.color)),e.image!==void 0&&(this.image=e.image),e.position!==void 0&&(this.position=e.position),e.repeat!==void 0&&(this.repeat=e.repeat),e.size!==void 0&&(this.size=e.size),e.opacity!==void 0&&(this.opacity=e.opacity))}}class S3{constructor(){this.color=new ct,this.color.value="#fff",this.opacity=1}load(e){e&&(e.color!==void 0&&(this.color=ct.create(this.color,e.color)),e.opacity!==void 0&&(this.opacity=e.opacity))}}class _3{constructor(){this.composite="destination-out",this.cover=new S3,this.enable=!1}load(e){if(e){if(e.composite!==void 0&&(this.composite=e.composite),e.cover!==void 0){const n=e.cover,i=Mn(e.cover)?{color:e.cover}:e.cover;this.cover.load(n.color!==void 0?n:{color:i})}e.enable!==void 0&&(this.enable=e.enable)}}}class k3{constructor(){this.enable=!0,this.zIndex=0}load(e){e&&(e.enable!==void 0&&(this.enable=e.enable),e.zIndex!==void 0&&(this.zIndex=e.zIndex))}}class C3{constructor(){this.enable=!1,this.mode=[]}load(e){e&&(e.enable!==void 0&&(this.enable=e.enable),e.mode!==void 0&&(this.mode=e.mode))}}class Yg{constructor(){this.selectors=[],this.enable=!1,this.mode=[],this.type="circle"}get el(){return this.elementId}set el(e){this.elementId=e}get elementId(){return this.ids}set elementId(e){this.ids=e}get ids(){return it(this.selectors,e=>e.replace("#",""))}set ids(e){this.selectors=it(e,n=>`#${n}`)}load(e){if(!e)return;const n=e.ids??e.elementId??e.el;n!==void 0&&(this.ids=n),e.selectors!==void 0&&(this.selectors=e.selectors),e.enable!==void 0&&(this.enable=e.enable),e.mode!==void 0&&(this.mode=e.mode),e.type!==void 0&&(this.type=e.type)}}class T3{constructor(){this.enable=!1,this.force=2,this.smooth=10}load(e){e&&(e.enable!==void 0&&(this.enable=e.enable),e.force!==void 0&&(this.force=e.force),e.smooth!==void 0&&(this.smooth=e.smooth))}}class P3{constructor(){this.enable=!1,this.mode=[],this.parallax=new T3}load(e){e&&(e.enable!==void 0&&(this.enable=e.enable),e.mode!==void 0&&(this.mode=e.mode),this.parallax.load(e.parallax))}}class E3{constructor(){this.delay=.5,this.enable=!0}load(e){e!==void 0&&(e.delay!==void 0&&(this.delay=e.delay),e.enable!==void 0&&(this.enable=e.enable))}}class M3{constructor(){this.onClick=new C3,this.onDiv=new Yg,this.onHover=new P3,this.resize=new E3}get onclick(){return this.onClick}set onclick(e){this.onClick=e}get ondiv(){return this.onDiv}set ondiv(e){this.onDiv=e}get onhover(){return this.onHover}set onhover(e){this.onHover=e}load(e){if(!e)return;this.onClick.load(e.onClick??e.onclick);const n=e.onDiv??e.ondiv;n!==void 0&&(this.onDiv=it(n,i=>{const r=new Yg;return r.load(i),r})),this.onHover.load(e.onHover??e.onhover),Zi(e.resize)?this.resize.enable=e.resize:this.resize.load(e.resize)}}class D3{constructor(e,n){this._engine=e,this._container=n}load(e){if(!e||!this._container)return;const n=this._engine.plugins.interactors.get(this._container);if(n)for(const i of n)i.loadModeOptions&&i.loadModeOptions(this,e)}}class p2{constructor(e,n){this.detectsOn="window",this.events=new M3,this.modes=new D3(e,n)}get detect_on(){return this.detectsOn}set detect_on(e){this.detectsOn=e}load(e){if(!e)return;const n=e.detectsOn??e.detect_on;n!==void 0&&(this.detectsOn=n),this.events.load(e.events),this.modes.load(e.modes)}}class N3{load(e){e&&(e.position&&(this.position={x:e.position.x??50,y:e.position.y??50,mode:e.position.mode??"percent"}),e.options&&(this.options=xt({},e.options)))}}class A3{constructor(){this.maxWidth=1/0,this.options={},this.mode="canvas"}load(e){e&&(e.maxWidth!==void 0&&(this.maxWidth=e.maxWidth),e.mode!==void 0&&(e.mode==="screen"?this.mode="screen":this.mode="canvas"),e.options!==void 0&&(this.options=xt({},e.options)))}}class R3{constructor(){this.auto=!1,this.mode="any",this.value=!1}load(e){e&&(e.auto!==void 0&&(this.auto=e.auto),e.mode!==void 0&&(this.mode=e.mode),e.value!==void 0&&(this.value=e.value))}}class F3{constructor(){this.name="",this.default=new R3}load(e){e&&(e.name!==void 0&&(this.name=e.name),this.default.load(e.default),e.options!==void 0&&(this.options=xt({},e.options)))}}class ld{constructor(){this.count=0,this.enable=!1,this.offset=0,this.speed=1,this.delay=0,this.decay=0,this.sync=!0}load(e){e&&(e.count!==void 0&&(this.count=le(e.count)),e.enable!==void 0&&(this.enable=e.enable),e.offset!==void 0&&(this.offset=le(e.offset)),e.speed!==void 0&&(this.speed=le(e.speed)),e.decay!==void 0&&(this.decay=le(e.decay)),e.delay!==void 0&&(this.delay=le(e.delay)),e.sync!==void 0&&(this.sync=e.sync))}}class I3{constructor(){this.h=new ld,this.s=new ld,this.l=new ld}load(e){e&&(this.h.load(e.h),this.s.load(e.s),this.l.load(e.l))}}class fa extends ct{constructor(){super(),this.animation=new I3}static create(e,n){const i=new fa;return i.load(e),n!==void 0&&(Mn(n)||Kt(n)?i.load({value:n}):i.load(n)),i}load(e){if(super.load(e),!e)return;const n=e.animation;n!==void 0&&(n.enable!==void 0?this.animation.h.load(n):this.animation.load(e.animation))}}class O3{constructor(){this.speed=2}load(e){e&&e.speed!==void 0&&(this.speed=e.speed)}}class j3{constructor(){this.enable=!0,this.retries=0}load(e){e&&(e.enable!==void 0&&(this.enable=e.enable),e.retries!==void 0&&(this.retries=e.retries))}}class L3{constructor(){this.count=0,this.enable=!1,this.speed=1,this.decay=0,this.delay=0,this.sync=!1}load(e){e&&(e.count!==void 0&&(this.count=le(e.count)),e.enable!==void 0&&(this.enable=e.enable),e.speed!==void 0&&(this.speed=le(e.speed)),e.decay!==void 0&&(this.decay=le(e.decay)),e.delay!==void 0&&(this.delay=le(e.delay)),e.sync!==void 0&&(this.sync=e.sync))}}class m2 extends L3{constructor(){super(),this.mode="auto",this.startValue="random"}load(e){super.load(e),e&&(e.minimumValue!==void 0&&(this.minimumValue=e.minimumValue),e.mode!==void 0&&(this.mode=e.mode),e.startValue!==void 0&&(this.startValue=e.startValue))}}class z3{constructor(){this.enable=!1,this.minimumValue=0}load(e){e&&(e.enable!==void 0&&(this.enable=e.enable),e.minimumValue!==void 0&&(this.minimumValue=e.minimumValue))}}class cr{constructor(){this.random=new z3,this.value=0}load(e){e&&(Zi(e.random)?this.random.enable=e.random:this.random.load(e.random),e.value!==void 0&&(this.value=le(e.value,this.random.enable?this.random.minimumValue:void 0)))}}class Jg extends cr{constructor(){super(),this.random.minimumValue=.1,this.value=1}}class g2{constructor(){this.horizontal=new Jg,this.vertical=new Jg}load(e){e&&(this.horizontal.load(e.horizontal),this.vertical.load(e.vertical))}}class V3{constructor(){this.absorb=new O3,this.bounce=new g2,this.enable=!1,this.maxSpeed=50,this.mode="bounce",this.overlap=new j3}load(e){e&&(this.absorb.load(e.absorb),this.bounce.load(e.bounce),e.enable!==void 0&&(this.enable=e.enable),e.maxSpeed!==void 0&&(this.maxSpeed=le(e.maxSpeed)),e.mode!==void 0&&(this.mode=e.mode),this.overlap.load(e.overlap))}}class B3{constructor(){this.offset=0,this.value=90}load(e){e&&(e.offset!==void 0&&(this.offset=le(e.offset)),e.value!==void 0&&(this.value=le(e.value)))}}class U3{constructor(){this.distance=200,this.enable=!1,this.rotate={x:3e3,y:3e3}}get rotateX(){return this.rotate.x}set rotateX(e){this.rotate.x=e}get rotateY(){return this.rotate.y}set rotateY(e){this.rotate.y=e}load(e){var r,s;if(!e)return;e.distance!==void 0&&(this.distance=le(e.distance)),e.enable!==void 0&&(this.enable=e.enable);const n=((r=e.rotate)==null?void 0:r.x)??e.rotateX;n!==void 0&&(this.rotate.x=n);const i=((s=e.rotate)==null?void 0:s.y)??e.rotateY;i!==void 0&&(this.rotate.y=i)}}class $3{constructor(){this.x=50,this.y=50,this.mode="percent",this.radius=0}load(e){e&&(e.x!==void 0&&(this.x=e.x),e.y!==void 0&&(this.y=e.y),e.mode!==void 0&&(this.mode=e.mode),e.radius!==void 0&&(this.radius=e.radius))}}class W3{constructor(){this.acceleration=9.81,this.enable=!1,this.inverse=!1,this.maxSpeed=50}load(e){e&&(e.acceleration!==void 0&&(this.acceleration=le(e.acceleration)),e.enable!==void 0&&(this.enable=e.enable),e.inverse!==void 0&&(this.inverse=e.inverse),e.maxSpeed!==void 0&&(this.maxSpeed=le(e.maxSpeed)))}}class H3{constructor(){this.clamp=!0,this.delay=new cr,this.enable=!1,this.options={}}load(e){e&&(e.clamp!==void 0&&(this.clamp=e.clamp),this.delay.load(e.delay),e.enable!==void 0&&(this.enable=e.enable),this.generator=e.generator,e.options&&(this.options=xt(this.options,e.options)))}}class q3{load(e){e&&(e.color!==void 0&&(this.color=ct.create(this.color,e.color)),e.image!==void 0&&(this.image=e.image))}}class G3{constructor(){this.enable=!1,this.length=10,this.fill=new q3}get fillColor(){return this.fill.color}set fillColor(e){this.fill.load({color:e})}load(e){e&&(e.enable!==void 0&&(this.enable=e.enable),(e.fill!==void 0||e.fillColor!==void 0)&&this.fill.load(e.fill||{color:e.fillColor}),e.length!==void 0&&(this.length=e.length))}}class Q3{constructor(){this.default="out"}load(e){e&&(e.default!==void 0&&(this.default=e.default),this.bottom=e.bottom??e.default,this.left=e.left??e.default,this.right=e.right??e.default,this.top=e.top??e.default)}}class K3{constructor(){this.acceleration=0,this.enable=!1}load(e){e&&(e.acceleration!==void 0&&(this.acceleration=le(e.acceleration)),e.enable!==void 0&&(this.enable=e.enable),e.position&&(this.position=xt({},e.position)))}}class Z3{constructor(){this.angle=new B3,this.attract=new U3,this.center=new $3,this.decay=0,this.distance={},this.direction="none",this.drift=0,this.enable=!1,this.gravity=new W3,this.path=new H3,this.outModes=new Q3,this.random=!1,this.size=!1,this.speed=2,this.spin=new K3,this.straight=!1,this.trail=new G3,this.vibrate=!1,this.warp=!1}get bounce(){return this.collisions}set bounce(e){this.collisions=e}get collisions(){return!1}set collisions(e){}get noise(){return this.path}set noise(e){this.path=e}get outMode(){return this.outModes.default}set outMode(e){this.outModes.default=e}get out_mode(){return this.outMode}set out_mode(e){this.outMode=e}load(e){if(!e)return;this.angle.load(Dn(e.angle)?{value:e.angle}:e.angle),this.attract.load(e.attract),this.center.load(e.center),e.decay!==void 0&&(this.decay=le(e.decay)),e.direction!==void 0&&(this.direction=e.direction),e.distance!==void 0&&(this.distance=Dn(e.distance)?{horizontal:e.distance,vertical:e.distance}:{...e.distance}),e.drift!==void 0&&(this.drift=le(e.drift)),e.enable!==void 0&&(this.enable=e.enable),this.gravity.load(e.gravity);const n=e.outModes??e.outMode??e.out_mode;n!==void 0&&(cs(n)?this.outModes.load(n):this.outModes.load({default:n})),this.path.load(e.path??e.noise),e.random!==void 0&&(this.random=e.random),e.size!==void 0&&(this.size=e.size),e.speed!==void 0&&(this.speed=le(e.speed)),this.spin.load(e.spin),e.straight!==void 0&&(this.straight=e.straight),this.trail.load(e.trail),e.vibrate!==void 0&&(this.vibrate=e.vibrate),e.warp!==void 0&&(this.warp=e.warp)}}class X3 extends m2{constructor(){super(),this.destroy="none",this.speed=2}get opacity_min(){return this.minimumValue}set opacity_min(e){this.minimumValue=e}load(e){(e==null?void 0:e.opacity_min)!==void 0&&e.minimumValue===void 0&&(e.minimumValue=e.opacity_min),super.load(e),e&&e.destroy!==void 0&&(this.destroy=e.destroy)}}class Y3 extends cr{constructor(){super(),this.animation=new X3,this.random.minimumValue=.1,this.value=1}get anim(){return this.animation}set anim(e){this.animation=e}load(e){if(!e)return;super.load(e);const n=e.animation??e.anim;n!==void 0&&(this.animation.load(n),this.value=le(this.value,this.animation.enable?this.animation.minimumValue:void 0))}}class J3{constructor(){this.enable=!1,this.width=1920,this.height=1080}get area(){return this.width}set area(e){this.width=e}get factor(){return this.height}set factor(e){this.height=e}get value_area(){return this.area}set value_area(e){this.area=e}load(e){if(!e)return;e.enable!==void 0&&(this.enable=e.enable);const n=e.width??e.area??e.value_area;n!==void 0&&(this.width=n);const i=e.height??e.factor;i!==void 0&&(this.height=i)}}class eR{constructor(){this.density=new J3,this.limit=0,this.value=0}get max(){return this.limit}set max(e){this.limit=e}load(e){if(!e)return;this.density.load(e.density);const n=e.limit??e.max;n!==void 0&&(this.limit=n),e.value!==void 0&&(this.value=e.value)}}class tR{constructor(){this.blur=0,this.color=new ct,this.enable=!1,this.offset={x:0,y:0},this.color.value="#000"}load(e){e&&(e.blur!==void 0&&(this.blur=e.blur),this.color=ct.create(this.color,e.color),e.enable!==void 0&&(this.enable=e.enable),e.offset!==void 0&&(e.offset.x!==void 0&&(this.offset.x=e.offset.x),e.offset.y!==void 0&&(this.offset.y=e.offset.y)))}}const ud="character",cd="char",dd="image",fd="images",hd="polygon",pd="star";class nR{constructor(){this.loadShape=(e,n,i,r)=>{if(!e)return;const s=Kt(e),o=s?[]:{},a=s!==Kt(this.options[n]),l=s!==Kt(this.options[i]);a&&(this.options[n]=o),l&&r&&(this.options[i]=o),this.options[n]=xt(this.options[n]??o,e),(!this.options[i]||r)&&(this.options[i]=xt(this.options[i]??o,e))},this.close=!0,this.fill=!0,this.options={},this.type="circle"}get character(){return this.options[ud]??this.options[cd]}set character(e){this.options[cd]=this.options[ud]=e}get custom(){return this.options}set custom(e){this.options=e}get image(){return this.options[dd]??this.options[fd]}set image(e){this.options[fd]=this.options[dd]=e}get images(){return this.image}set images(e){this.image=e}get polygon(){return this.options[hd]??this.options[pd]}set polygon(e){this.options[pd]=this.options[hd]=e}get stroke(){return[]}set stroke(e){}load(e){if(!e)return;const n=e.options??e.custom;if(n!==void 0)for(const i in n){const r=n[i];r&&(this.options[i]=xt(this.options[i]??{},r))}this.loadShape(e.character,ud,cd,!0),this.loadShape(e.polygon,hd,pd,!1),this.loadShape(e.image??e.images,dd,fd,!0),e.close!==void 0&&(this.close=e.close),e.fill!==void 0&&(this.fill=e.fill),e.type!==void 0&&(this.type=e.type)}}class iR extends m2{constructor(){super(),this.destroy="none",this.speed=5}get size_min(){return this.minimumValue}set size_min(e){this.minimumValue=e}load(e){(e==null?void 0:e.size_min)!==void 0&&e.minimumValue===void 0&&(e.minimumValue=e.size_min),super.load(e),e&&e.destroy!==void 0&&(this.destroy=e.destroy)}}class rR extends cr{constructor(){super(),this.animation=new iR,this.random.minimumValue=1,this.value=3}get anim(){return this.animation}set anim(e){this.animation=e}load(e){if(super.load(e),!e)return;const n=e.animation??e.anim;n!==void 0&&(this.animation.load(n),this.value=le(this.value,this.animation.enable?this.animation.minimumValue:void 0))}}class ey{constructor(){this.width=0}load(e){e&&(e.color!==void 0&&(this.color=fa.create(this.color,e.color)),e.width!==void 0&&(this.width=le(e.width)),e.opacity!==void 0&&(this.opacity=le(e.opacity)))}}class sR extends cr{constructor(){super(),this.opacityRate=1,this.sizeRate=1,this.velocityRate=1}load(e){super.load(e),e&&(e.opacityRate!==void 0&&(this.opacityRate=e.opacityRate),e.sizeRate!==void 0&&(this.sizeRate=e.sizeRate),e.velocityRate!==void 0&&(this.velocityRate=e.velocityRate))}}class oR{constructor(e,n){this._engine=e,this._container=n,this.bounce=new g2,this.collisions=new V3,this.color=new fa,this.color.value="#fff",this.groups={},this.move=new Z3,this.number=new eR,this.opacity=new Y3,this.reduceDuplicates=!1,this.shadow=new tR,this.shape=new nR,this.size=new rR,this.stroke=new ey,this.zIndex=new sR}load(e){var r,s,o;if(!e)return;if(this.bounce.load(e.bounce),this.color.load(fa.create(this.color,e.color)),e.groups!==void 0)for(const a in e.groups){const l=e.groups[a];l!==void 0&&(this.groups[a]=xt(this.groups[a]??{},l))}this.move.load(e.move),this.number.load(e.number),this.opacity.load(e.opacity),e.reduceDuplicates!==void 0&&(this.reduceDuplicates=e.reduceDuplicates),this.shape.load(e.shape),this.size.load(e.size),this.shadow.load(e.shadow),this.zIndex.load(e.zIndex);const n=((r=e.move)==null?void 0:r.collisions)??((s=e.move)==null?void 0:s.bounce);n!==void 0&&(this.collisions.enable=n),this.collisions.load(e.collisions),e.interactivity!==void 0&&(this.interactivity=xt({},e.interactivity));const i=e.stroke??((o=e.shape)==null?void 0:o.stroke);if(i&&(this.stroke=it(i,a=>{const l=new ey;return l.load(a),l})),this._container){const a=this._engine.plugins.updaters.get(this._container);if(a)for(const u of a)u.loadOptions&&u.loadOptions(this,e);const l=this._engine.plugins.interactors.get(this._container);if(l)for(const u of l)u.loadParticlesOptions&&u.loadParticlesOptions(this,e)}}}function y2(t,...e){for(const n of e)t.load(n)}function v2(t,e,...n){const i=new oR(t,e);return y2(i,...n),i}class aR{constructor(e,n){this._findDefaultTheme=i=>this.themes.find(r=>r.default.value&&r.default.mode===i)??this.themes.find(r=>r.default.value&&r.default.mode==="any"),this._importPreset=i=>{this.load(this._engine.plugins.getPreset(i))},this._engine=e,this._container=n,this.autoPlay=!0,this.background=new b3,this.backgroundMask=new _3,this.defaultThemes={},this.delay=0,this.fullScreen=new k3,this.detectRetina=!0,this.duration=0,this.fpsLimit=120,this.interactivity=new p2(e,n),this.manualParticles=[],this.particles=v2(this._engine,this._container),this.pauseOnBlur=!0,this.pauseOnOutsideViewport=!0,this.responsive=[],this.smooth=!1,this.style={},this.themes=[],this.zLayers=100}get backgroundMode(){return this.fullScreen}set backgroundMode(e){this.fullScreen.load(e)}get fps_limit(){return this.fpsLimit}set fps_limit(e){this.fpsLimit=e}get retina_detect(){return this.detectRetina}set retina_detect(e){this.detectRetina=e}load(e){var o,a;if(!e)return;e.preset!==void 0&&it(e.preset,l=>this._importPreset(l)),e.autoPlay!==void 0&&(this.autoPlay=e.autoPlay),e.delay!==void 0&&(this.delay=le(e.delay));const n=e.detectRetina??e.retina_detect;n!==void 0&&(this.detectRetina=n),e.duration!==void 0&&(this.duration=le(e.duration));const i=e.fpsLimit??e.fps_limit;i!==void 0&&(this.fpsLimit=i),e.pauseOnBlur!==void 0&&(this.pauseOnBlur=e.pauseOnBlur),e.pauseOnOutsideViewport!==void 0&&(this.pauseOnOutsideViewport=e.pauseOnOutsideViewport),e.zLayers!==void 0&&(this.zLayers=e.zLayers),this.background.load(e.background);const r=e.fullScreen??e.backgroundMode;Zi(r)?this.fullScreen.enable=r:this.fullScreen.load(r),this.backgroundMask.load(e.backgroundMask),this.interactivity.load(e.interactivity),e.manualParticles&&(this.manualParticles=e.manualParticles.map(l=>{const u=new N3;return u.load(l),u})),this.particles.load(e.particles),this.style=xt(this.style,e.style),this._engine.plugins.loadOptions(this,e),e.smooth!==void 0&&(this.smooth=e.smooth);const s=this._engine.plugins.interactors.get(this._container);if(s)for(const l of s)l.loadOptions&&l.loadOptions(this,e);if(e.responsive!==void 0)for(const l of e.responsive){const u=new A3;u.load(l),this.responsive.push(u)}if(this.responsive.sort((l,u)=>l.maxWidth-u.maxWidth),e.themes!==void 0)for(const l of e.themes){const u=this.themes.find(c=>c.name===l.name);if(u)u.load(l);else{const c=new F3;c.load(l),this.themes.push(c)}}this.defaultThemes.dark=(o=this._findDefaultTheme("dark"))==null?void 0:o.name,this.defaultThemes.light=(a=this._findDefaultTheme("light"))==null?void 0:a.name}setResponsive(e,n,i){this.load(i);const r=this.responsive.find(s=>s.mode==="screen"&&screen?s.maxWidth>screen.availWidth:s.maxWidth*n>e);return this.load(r==null?void 0:r.options),r==null?void 0:r.maxWidth}setTheme(e){if(e){const n=this.themes.find(i=>i.name===e);n&&this.load(n.options)}else{const n=n2("(prefers-color-scheme: dark)"),i=n&&n.matches,r=this._findDefaultTheme(i?"dark":"light");r&&this.load(r.options)}}}class lR{constructor(e,n){this.container=n,this._engine=e,this._interactors=e.plugins.getInteractors(this.container,!0),this._externalInteractors=[],this._particleInteractors=[]}async externalInteract(e){for(const n of this._externalInteractors)n.isEnabled()&&await n.interact(e)}handleClickMode(e){for(const n of this._externalInteractors)n.handleClickMode&&n.handleClickMode(e)}init(){this._externalInteractors=[],this._particleInteractors=[];for(const e of this._interactors){switch(e.type){case"external":this._externalInteractors.push(e);break;case"particles":this._particleInteractors.push(e);break}e.init()}}async particlesInteract(e,n){for(const i of this._externalInteractors)i.clear(e,n);for(const i of this._particleInteractors)i.isEnabled(e)&&await i.interact(e,n)}async reset(e){for(const n of this._externalInteractors)n.isEnabled()&&n.reset(e);for(const n of this._particleInteractors)n.isEnabled(e)&&n.reset(e)}}const ty=t=>{if(!He(t.outMode,t.checkModes))return;const e=t.radius*2;t.coord>t.maxCoord-e?t.setCb(-t.radius):t.coord<e&&t.setCb(t.radius)};class uR{constructor(e,n,i,r,s,o){this.container=i,this._calcPosition=(a,l,u,c=0)=>{for(const[,m]of a.plugins){const x=m.particlePosition!==void 0?m.particlePosition(l,this):void 0;if(x)return $t.create(x.x,x.y,u)}const d=a.canvas.size,f=KA({size:d,position:l}),h=$t.create(f.x,f.y,u),v=this.getRadius(),y=this.options.move.outModes,w=m=>{ty({outMode:m,checkModes:["bounce","bounce-horizontal"],coord:h.x,maxCoord:a.canvas.size.width,setCb:x=>h.x+=x,radius:v})},g=m=>{ty({outMode:m,checkModes:["bounce","bounce-vertical"],coord:h.y,maxCoord:a.canvas.size.height,setCb:x=>h.y+=x,radius:v})};return w(y.left??y.default),w(y.right??y.default),g(y.top??y.default),g(y.bottom??y.default),this._checkOverlap(h,c)?this._calcPosition(a,void 0,u,c+1):h},this._calculateVelocity=()=>{const a=QA(this.direction),l=a.copy(),u=this.options.move;if(u.direction==="inside"||u.direction==="outside")return l;const c=Math.PI/180*X(u.angle.value),d=Math.PI/180*X(u.angle.offset),f={left:d-c/2,right:d+c/2};return u.straight||(l.angle+=jt(le(f.left,f.right))),u.random&&typeof u.speed=="number"&&(l.length*=Ee()),l},this._checkOverlap=(a,l=0)=>{const u=this.options.collisions,c=this.getRadius();if(!u.enable)return!1;const d=u.overlap;if(d.enable)return!1;const f=d.retries;if(f>=0&&l>f)throw new Error(`${pn} particle is overlapping and can't be placed`);return!!this.container.particles.find(h=>Qt(a,h.position)<c+h.getRadius())},this._getRollColor=a=>{if(!a||!this.roll||!this.backColor&&!this.roll.alter)return a;const l=this.roll.horizontal&&this.roll.vertical?2:1,u=this.roll.horizontal?Math.PI/2:0;return Math.floor(((this.roll.angle??0)+u)/(Math.PI/l))%2?this.backColor?this.backColor:this.roll.alter?y3(a,this.roll.alter.type,this.roll.alter.value):a:a},this._initPosition=a=>{const l=this.container,u=X(this.options.zIndex.value);this.position=this._calcPosition(l,a,Fn(u,0,l.zLayers)),this.initialPosition=this.position.copy();const c=l.canvas.size;switch(this.moveCenter={...a2(this.options.move.center,c),radius:this.options.move.center.radius??0,mode:this.options.move.center.mode??"percent"},this.direction=GA(this.options.move.direction,this.position,this.moveCenter),this.options.move.direction){case"inside":this.outType="inside";break;case"outside":this.outType="outside";break}this.offset=nt.origin},this._loadShapeData=(a,l)=>{const u=a.options[this.shape];if(u)return xt({close:a.close,fill:a.fill},di(u,this.id,l))},this._engine=e,this.init(n,r,s,o)}destroy(e){if(this.unbreakable||this.destroyed)return;this.destroyed=!0,this.bubble.inRange=!1,this.slow.inRange=!1;const n=this.container,i=this.pathGenerator;for(const[,r]of n.plugins)r.particleDestroyed&&r.particleDestroyed(this,e);for(const r of n.particles.updaters)r.particleDestroyed&&r.particleDestroyed(this,e);i&&i.reset(this)}draw(e){const n=this.container;for(const[,i]of n.plugins)n.canvas.drawParticlePlugin(i,this,e);n.canvas.drawParticle(this,e)}getFillColor(){return this._getRollColor(this.bubble.color??Xg(this.color))}getMass(){return this.getRadius()**2*Math.PI/2}getPosition(){return{x:this.position.x+this.offset.x,y:this.position.y+this.offset.y,z:this.position.z}}getRadius(){return this.bubble.radius??this.size.value}getStrokeColor(){return this._getRollColor(this.bubble.color??Xg(this.strokeColor))}init(e,n,i,r){const s=this.container,o=this._engine;this.id=e,this.group=r,this.fill=!0,this.pathRotation=!1,this.close=!0,this.lastPathTime=0,this.destroyed=!1,this.unbreakable=!1,this.rotation=0,this.misplaced=!1,this.retina={maxDistance:{}},this.outType="normal",this.ignoresResizeRatio=!0;const a=s.retina.pixelRatio,l=s.actualOptions,u=v2(this._engine,s,l.particles),c=u.shape.type,{reduceDuplicates:d}=u;this.shape=di(c,this.id,d);const f=u.shape;if(i&&i.shape&&i.shape.type){const x=i.shape.type,b=di(x,this.id,d);b&&(this.shape=b,f.load(i.shape))}this.shapeData=this._loadShapeData(f,d),u.load(i);const h=this.shapeData;h&&u.load(h.particles);const v=new p2(o,s);v.load(s.actualOptions.interactivity),v.load(u.interactivity),this.interactivity=v,this.fill=(h==null?void 0:h.fill)??u.shape.fill,this.close=(h==null?void 0:h.close)??u.shape.close,this.options=u;const y=this.options.move.path;this.pathDelay=Br(y.delay)*1e3,y.generator&&(this.pathGenerator=this._engine.plugins.getPathGenerator(y.generator),this.pathGenerator&&s.addPath(y.generator,this.pathGenerator)&&this.pathGenerator.init(s)),s.retina.initParticle(this),this.size=o2(this.options.size,a),this.bubble={inRange:!1},this.slow={inRange:!1,factor:1},this._initPosition(n),this.initialVelocity=this._calculateVelocity(),this.velocity=this.initialVelocity.copy(),this.moveDecay=1-X(this.options.move.decay);const w=s.particles;w.needsSort=w.needsSort||w.lastZIndex<this.position.z,w.lastZIndex=this.position.z,this.zIndexFactor=this.position.z/s.zLayers,this.sides=24;let g=s.drawers.get(this.shape);g||(g=this._engine.plugins.getShapeDrawer(this.shape),g&&s.drawers.set(this.shape,g)),g&&g.loadShape&&g.loadShape(this);const m=g==null?void 0:g.getSidesCount;m&&(this.sides=m(this)),this.spawning=!1,this.shadowColor=Nn(this.options.shadow.color);for(const x of s.particles.updaters)x.init(this);for(const x of s.particles.movers)x.init&&x.init(this);g&&g.particleInit&&g.particleInit(s,this);for(const[,x]of s.plugins)x.particleCreated&&x.particleCreated(this)}isInsideCanvas(){const e=this.getRadius(),n=this.container.canvas.size,i=this.position;return i.x>=-e&&i.y>=-e&&i.y<=n.height+e&&i.x<=n.width+e}isVisible(){return!this.destroyed&&!this.spawning&&this.isInsideCanvas()}reset(){for(const e of this.container.particles.updaters)e.reset&&e.reset(this)}}class cR{constructor(e,n){this.position=e,this.particle=n}}class x2{constructor(e,n){this.position={x:e,y:n}}}class In extends x2{constructor(e,n,i,r){super(e,n),this.size={height:r,width:i}}contains(e){const n=this.size.width,i=this.size.height,r=this.position;return e.x>=r.x&&e.x<=r.x+n&&e.y>=r.y&&e.y<=r.y+i}intersects(e){e instanceof wt&&e.intersects(this);const n=this.size.width,i=this.size.height,r=this.position,s=e.position,o=e instanceof In?e.size:{width:0,height:0},a=o.width,l=o.height;return s.x<r.x+n&&s.x+a>r.x&&s.y<r.y+i&&s.y+l>r.y}}class wt extends x2{constructor(e,n,i){super(e,n),this.radius=i}contains(e){return Qt(e,this.position)<=this.radius}intersects(e){const n=this.position,i=e.position,r={x:Math.abs(i.x-n.x),y:Math.abs(i.y-n.y)},s=this.radius;if(e instanceof wt){const o=s+e.radius,a=Math.sqrt(r.x**2+r.y**2);return o>a}else if(e instanceof In){const{width:o,height:a}=e.size;return Math.pow(r.x-o,2)+Math.pow(r.y-a,2)<=s**2||r.x<=s+o&&r.y<=s+a||r.x<=o||r.y<=a}return!1}}class pu{constructor(e,n){this.rectangle=e,this.capacity=n,this._subdivide=()=>{const{x:i,y:r}=this.rectangle.position,{width:s,height:o}=this.rectangle.size,{capacity:a}=this;for(let l=0;l<4;l++)this._subs.push(new pu(new In(i+s/2*(l%2),r+o/2*(Math.round(l/2)-l%2),s/2,o/2),a));this._divided=!0},this._points=[],this._divided=!1,this._subs=[]}insert(e){return this.rectangle.contains(e.position)?this._points.length<this.capacity?(this._points.push(e),!0):(this._divided||this._subdivide(),this._subs.some(n=>n.insert(e))):!1}query(e,n,i){const r=i||[];if(!e.intersects(this.rectangle))return[];for(const s of this._points)!e.contains(s.position)&&Qt(e.position,s.position)>s.particle.getRadius()&&(!n||n(s.particle))||r.push(s.particle);if(this._divided)for(const s of this._subs)s.query(e,n,r);return r}queryCircle(e,n,i){return this.query(new wt(e.x,e.y,n),i)}queryRectangle(e,n,i){return this.query(new In(e.x,e.y,n.width,n.height),i)}}const ny=4,iy=t=>new In(-t.width/4,-t.height/4,t.width*3/2,t.height*3/2);let dR=class{constructor(e,n){this._applyDensity=(r,s,o)=>{var h;if(!((h=r.number.density)!=null&&h.enable))return;const a=r.number,l=this._initDensityFactor(a.density),u=a.value,c=a.limit>0?a.limit:u,d=Math.min(u,c)*l+s,f=Math.min(this.count,this.filter(v=>v.group===o).length);this.limit=a.limit*l,f<d?this.push(Math.abs(d-f),void 0,r,o):f>d&&this.removeQuantity(f-d,o)},this._initDensityFactor=r=>{const s=this._container;if(!s.canvas.element||!r.enable)return 1;const o=s.canvas.element,a=s.retina.pixelRatio;return o.width*o.height/(r.factor*a**2*r.area)},this._pushParticle=(r,s,o,a)=>{try{let l=this.pool.pop();l?l.init(this._nextId,r,s,o):l=new uR(this._engine,this._nextId,this._container,r,s,o);let u=!0;return a&&(u=a(l)),u?(this._array.push(l),this._zArray.push(l),this._nextId++,this._engine.dispatchEvent("particleAdded",{container:this._container,data:{particle:l}}),l):void 0}catch(l){Ur().warning(`${pn} adding particle: ${l}`);return}},this._removeParticle=(r,s,o)=>{const a=this._array[r];if(!a||a.group!==s)return!1;a.destroy(o);const l=this._zArray.indexOf(a);return this._array.splice(r,1),this._zArray.splice(l,1),this.pool.push(a),this._engine.dispatchEvent("particleRemoved",{container:this._container,data:{particle:a}}),!0},this._engine=e,this._container=n,this._nextId=0,this._array=[],this._zArray=[],this.pool=[],this.limit=0,this.needsSort=!1,this.lastZIndex=0,this._interactionManager=new lR(e,n);const i=n.canvas.size;this.quadTree=new pu(iy(i),ny),this.movers=this._engine.plugins.getMovers(n,!0),this.updaters=this._engine.plugins.getUpdaters(n,!0)}get count(){return this._array.length}addManualParticles(){const e=this._container,n=e.actualOptions;for(const i of n.manualParticles)this.addParticle(i.position?a2(i.position,e.canvas.size):void 0,i.options)}addParticle(e,n,i,r){const s=this._container,o=s.actualOptions,a=o.particles.number.limit;if(a>0){const l=this.count+1-a;l>0&&this.removeQuantity(l)}return this._pushParticle(e,n,i,r)}clear(){this._array=[],this._zArray=[]}destroy(){this._array=[],this._zArray=[],this.movers=[],this.updaters=[]}async draw(e){const n=this._container;n.canvas.clear(),await this.update(e);for(const[,i]of n.plugins)n.canvas.drawPlugin(i,e);for(const i of this._zArray)i.draw(e)}filter(e){return this._array.filter(e)}find(e){return this._array.find(e)}handleClickMode(e){this._interactionManager.handleClickMode(e)}init(){var r;const e=this._container,n=e.actualOptions;this.lastZIndex=0,this.needsSort=!1;let i=!1;this.updaters=this._engine.plugins.getUpdaters(e,!0),this._interactionManager.init();for(const[,s]of e.plugins)if(s.particlesInitialization!==void 0&&(i=s.particlesInitialization()),i)break;this._interactionManager.init();for(const[,s]of e.pathGenerators)s.init(e);if(this.addManualParticles(),!i){for(const s in n.particles.groups){const o=n.particles.groups[s];for(let a=this.count,l=0;l<((r=o.number)==null?void 0:r.value)&&a<n.particles.number.value;a++,l++)this.addParticle(void 0,o,s)}for(let s=this.count;s<n.particles.number.value;s++)this.addParticle()}}push(e,n,i,r){this.pushing=!0;for(let s=0;s<e;s++)this.addParticle(n==null?void 0:n.position,i,r);this.pushing=!1}async redraw(){this.clear(),this.init(),await this.draw({value:0,factor:0})}remove(e,n,i){this.removeAt(this._array.indexOf(e),void 0,n,i)}removeAt(e,n=1,i,r){if(e<0||e>this.count)return;let s=0;for(let o=e;s<n&&o<this.count;o++)this._removeParticle(o--,i,r)&&s++}removeQuantity(e,n){this.removeAt(0,e,n)}setDensity(){const e=this._container.actualOptions,n=e.particles.groups;for(const i in n)this._applyDensity(n[i],0,i);this._applyDensity(e.particles,e.manualParticles.length)}async update(e){const n=this._container,i=new Set;this.quadTree=new pu(iy(n.canvas.size),ny);for(const[,r]of n.pathGenerators)r.update();for(const[,r]of n.plugins)r.update&&r.update(e);for(const r of this._array){const s=n.canvas.resizeFactor;s&&!r.ignoresResizeRatio&&(r.position.x*=s.width,r.position.y*=s.height,r.initialPosition.x*=s.width,r.initialPosition.y*=s.height),r.ignoresResizeRatio=!1,await this._interactionManager.reset(r);for(const[,o]of this._container.plugins){if(r.destroyed)break;o.particleUpdate&&o.particleUpdate(r,e)}for(const o of this.movers)o.isEnabled(r)&&o.move(r,e);if(r.destroyed){i.add(r);continue}this.quadTree.insert(new cR(r.getPosition(),r))}if(i.size){const r=s=>!i.has(s);this._array=this.filter(r),this._zArray=this._zArray.filter(r),this.pool.push(...i)}await this._interactionManager.externalInteract(e);for(const r of this._array){for(const s of this.updaters)s.update(r,e);!r.destroyed&&!r.spawning&&await this._interactionManager.particlesInteract(r,e)}if(delete n.canvas.resizeFactor,this.needsSort){const r=this._zArray;r.sort((s,o)=>o.position.z-s.position.z||s.id-o.id),this.lastZIndex=r[r.length-1].position.z,this.needsSort=!1}}};class fR{constructor(e){this.container=e,this.pixelRatio=1,this.reduceFactor=1}init(){const e=this.container,n=e.actualOptions;this.pixelRatio=!n.detectRetina||Hs()?1:window.devicePixelRatio,this.reduceFactor=1;const i=this.pixelRatio;if(e.canvas.element){const o=e.canvas.element;e.canvas.size.width=o.offsetWidth*i,e.canvas.size.height=o.offsetHeight*i}const r=n.particles,s=r.move;this.attractDistance=X(s.attract.distance)*i,this.maxSpeed=X(s.gravity.maxSpeed)*i,this.sizeAnimationSpeed=X(r.size.animation.speed)*i}initParticle(e){const n=e.options,i=this.pixelRatio,r=n.move,s=r.distance,o=e.retina;o.attractDistance=X(r.attract.distance)*i,o.moveDrift=X(r.drift)*i,o.moveSpeed=X(r.speed)*i,o.sizeAnimationSpeed=X(n.size.animation.speed)*i;const a=o.maxDistance;a.horizontal=s.horizontal!==void 0?s.horizontal*i:void 0,a.vertical=s.vertical!==void 0?s.vertical*i:void 0,o.maxSpeed=X(r.gravity.maxSpeed)*i}}function Ne(t){return t&&!t.destroyed}function hR(t,e=60,n=!1){return{value:t,factor:n?60/e:60*t/1e3}}function Kr(t,e,...n){const i=new aR(t,e);return y2(i,...n),i}const pR="default",ry={generate:t=>t.velocity,init:()=>{},update:()=>{},reset:()=>{}};class mR{constructor(e,n,i){this.id=n,this._intersectionManager=r=>{if(!(!Ne(this)||!this.actualOptions.pauseOnOutsideViewport))for(const s of r)s.target===this.interactivity.element&&(s.isIntersecting?this.play:this.pause)()},this._nextFrame=async r=>{try{if(!this.smooth&&this.lastFrameTime!==void 0&&r<this.lastFrameTime+1e3/this.fpsLimit){this.draw(!1);return}this.lastFrameTime??(this.lastFrameTime=r);const s=hR(r-this.lastFrameTime,this.fpsLimit,this.smooth);if(this.addLifeTime(s.value),this.lastFrameTime=r,s.value>1e3){this.draw(!1);return}if(await this.particles.draw(s),!this.alive()){this.destroy();return}this.getAnimationStatus()&&this.draw(!1)}catch(s){Ur().error(`${pn} in animation loop`,s)}},this._engine=e,this.fpsLimit=120,this.smooth=!1,this._delay=0,this._duration=0,this._lifeTime=0,this._firstStart=!0,this.started=!1,this.destroyed=!1,this._paused=!0,this.lastFrameTime=0,this.zLayers=100,this.pageHidden=!1,this._sourceOptions=i,this._initialSourceOptions=i,this.retina=new fR(this),this.canvas=new x3(this),this.particles=new dR(this._engine,this),this.pathGenerators=new Map,this.interactivity={mouse:{clicking:!1,inside:!1}},this.plugins=new Map,this.drawers=new Map,this._options=Kr(this._engine,this),this.actualOptions=Kr(this._engine,this),this._eventListeners=new w3(this),typeof IntersectionObserver<"u"&&IntersectionObserver&&(this._intersectionObserver=new IntersectionObserver(r=>this._intersectionManager(r))),this._engine.dispatchEvent("containerBuilt",{container:this})}get options(){return this._options}get sourceOptions(){return this._sourceOptions}addClickHandler(e){if(!Ne(this))return;const n=this.interactivity.element;if(!n)return;const i=(d,f,h)=>{if(!Ne(this))return;const v=this.retina.pixelRatio,y={x:f.x*v,y:f.y*v},w=this.particles.quadTree.queryCircle(y,h*v);e(d,w)},r=d=>{if(!Ne(this))return;const f=d,h={x:f.offsetX||f.clientX,y:f.offsetY||f.clientY};i(d,h,1)},s=()=>{Ne(this)&&(u=!0,c=!1)},o=()=>{Ne(this)&&(c=!0)},a=d=>{if(Ne(this)){if(u&&!c){const f=d;let h=f.touches[f.touches.length-1];if(!h&&(h=f.changedTouches[f.changedTouches.length-1],!h))return;const v=this.canvas.element,y=v?v.getBoundingClientRect():void 0,w={x:h.clientX-(y?y.left:0),y:h.clientY-(y?y.top:0)};i(d,w,Math.max(h.radiusX,h.radiusY))}u=!1,c=!1}},l=()=>{Ne(this)&&(u=!1,c=!1)};let u=!1,c=!1;n.addEventListener("click",r),n.addEventListener("touchstart",s),n.addEventListener("touchmove",o),n.addEventListener("touchend",a),n.addEventListener("touchcancel",l)}addLifeTime(e){this._lifeTime+=e}addPath(e,n,i=!1){return!Ne(this)||!i&&this.pathGenerators.has(e)?!1:(this.pathGenerators.set(e,n??ry),!0)}alive(){return!this._duration||this._lifeTime<=this._duration}destroy(){if(!Ne(this))return;this.stop(),this.particles.destroy(),this.canvas.destroy();for(const[,i]of this.drawers)i.destroy&&i.destroy(this);for(const i of this.drawers.keys())this.drawers.delete(i);this._engine.plugins.destroy(this),this.destroyed=!0;const e=this._engine.dom(),n=e.findIndex(i=>i===this);n>=0&&e.splice(n,1),this._engine.dispatchEvent("containerDestroyed",{container:this})}draw(e){if(!Ne(this))return;let n=e;this._drawAnimationFrame=requestAnimationFrame(async i=>{n&&(this.lastFrameTime=void 0,n=!1),await this._nextFrame(i)})}async export(e,n={}){for(const[,i]of this.plugins){if(!i.export)continue;const r=await i.export(e,n);if(r.supported)return r.blob}Ur().error(`${pn} - Export plugin with type ${e} not found`)}getAnimationStatus(){return!this._paused&&!this.pageHidden&&Ne(this)}handleClickMode(e){if(Ne(this)){this.particles.handleClickMode(e);for(const[,n]of this.plugins)n.handleClickMode&&n.handleClickMode(e)}}async init(){if(!Ne(this))return;const e=this._engine.plugins.getSupportedShapes();for(const i of e){const r=this._engine.plugins.getShapeDrawer(i);r&&this.drawers.set(i,r)}this._options=Kr(this._engine,this,this._initialSourceOptions,this.sourceOptions),this.actualOptions=Kr(this._engine,this,this._options);const n=this._engine.plugins.getAvailablePlugins(this);for(const[i,r]of n)this.plugins.set(i,r);this.retina.init(),await this.canvas.init(),this.updateActualOptions(),this.canvas.initBackground(),this.canvas.resize(),this.zLayers=this.actualOptions.zLayers,this._duration=X(this.actualOptions.duration)*1e3,this._delay=X(this.actualOptions.delay)*1e3,this._lifeTime=0,this.fpsLimit=this.actualOptions.fpsLimit>0?this.actualOptions.fpsLimit:120,this.smooth=this.actualOptions.smooth;for(const[,i]of this.drawers)i.init&&await i.init(this);for(const[,i]of this.plugins)i.init&&await i.init();this._engine.dispatchEvent("containerInit",{container:this}),this.particles.init(),this.particles.setDensity();for(const[,i]of this.plugins)i.particlesSetup&&i.particlesSetup();this._engine.dispatchEvent("particlesSetup",{container:this})}async loadTheme(e){Ne(this)&&(this._currentTheme=e,await this.refresh())}pause(){if(Ne(this)&&(this._drawAnimationFrame!==void 0&&(cancelAnimationFrame(this._drawAnimationFrame),delete this._drawAnimationFrame),!this._paused)){for(const[,e]of this.plugins)e.pause&&e.pause();this.pageHidden||(this._paused=!0),this._engine.dispatchEvent("containerPaused",{container:this})}}play(e){if(!Ne(this))return;const n=this._paused||e;if(this._firstStart&&!this.actualOptions.autoPlay){this._firstStart=!1;return}if(this._paused&&(this._paused=!1),n)for(const[,i]of this.plugins)i.play&&i.play();this._engine.dispatchEvent("containerPlay",{container:this}),this.draw(n||!1)}async refresh(){if(Ne(this))return this.stop(),this.start()}async reset(){if(Ne(this))return this._initialSourceOptions=void 0,this._options=Kr(this._engine,this),this.actualOptions=Kr(this._engine,this,this._options),this.refresh()}setNoise(e,n,i){Ne(this)&&this.setPath(e,n,i)}setPath(e,n,i){if(!e||!Ne(this))return;const r={...ry};if(l2(e))r.generate=e,n&&(r.init=n),i&&(r.update=i);else{const s=r;r.generate=e.generate||s.generate,r.init=e.init||s.init,r.update=e.update||s.update}this.addPath(pR,r,!0)}async start(){!Ne(this)||this.started||(await this.init(),this.started=!0,await new Promise(e=>{this._delayTimeout=setTimeout(async()=>{this._eventListeners.addListeners(),this.interactivity.element instanceof HTMLElement&&this._intersectionObserver&&this._intersectionObserver.observe(this.interactivity.element);for(const[,n]of this.plugins)n.start&&await n.start();this._engine.dispatchEvent("containerStarted",{container:this}),this.play(),e()},this._delay)}))}stop(){if(!(!Ne(this)||!this.started)){this._delayTimeout&&(clearTimeout(this._delayTimeout),delete this._delayTimeout),this._firstStart=!0,this.started=!1,this._eventListeners.removeListeners(),this.pause(),this.particles.clear(),this.canvas.stop(),this.interactivity.element instanceof HTMLElement&&this._intersectionObserver&&this._intersectionObserver.unobserve(this.interactivity.element);for(const[,e]of this.plugins)e.stop&&e.stop();for(const e of this.plugins.keys())this.plugins.delete(e);this._sourceOptions=this._options,this._engine.dispatchEvent("containerStopped",{container:this})}}updateActualOptions(){this.actualOptions.responsive=[];const e=this.actualOptions.setResponsive(this.canvas.size.width,this.retina.pixelRatio,this._options);return this.actualOptions.setTheme(this._currentTheme),this.responsiveMaxWidth===e?!1:(this.responsiveMaxWidth=e,!0)}}class gR{constructor(){this._listeners=new Map}addEventListener(e,n){this.removeEventListener(e,n);let i=this._listeners.get(e);i||(i=[],this._listeners.set(e,i)),i.push(n)}dispatchEvent(e,n){const i=this._listeners.get(e);i&&i.forEach(r=>r(n))}hasEventListener(e){return!!this._listeners.get(e)}removeAllEventListeners(e){e?this._listeners.delete(e):this._listeners=new Map}removeEventListener(e,n){const i=this._listeners.get(e);if(!i)return;const r=i.length,s=i.indexOf(n);s<0||(r===1?this._listeners.delete(e):i.splice(s,1))}}function md(t,e,n,i=!1){let r=e.get(t);return(!r||i)&&(r=[...n.values()].map(s=>s(t)),e.set(t,r)),r}class yR{constructor(e){this._engine=e,this.plugins=[],this._initializers={interactors:new Map,movers:new Map,updaters:new Map},this.interactors=new Map,this.movers=new Map,this.updaters=new Map,this.presets=new Map,this.drawers=new Map,this.pathGenerators=new Map}addInteractor(e,n){this._initializers.interactors.set(e,n)}addParticleMover(e,n){this._initializers.movers.set(e,n)}addParticleUpdater(e,n){this._initializers.updaters.set(e,n)}addPathGenerator(e,n){!this.getPathGenerator(e)&&this.pathGenerators.set(e,n)}addPlugin(e){!this.getPlugin(e.id)&&this.plugins.push(e)}addPreset(e,n,i=!1){(i||!this.getPreset(e))&&this.presets.set(e,n)}addShapeDrawer(e,n){it(e,i=>{!this.getShapeDrawer(i)&&this.drawers.set(i,n)})}destroy(e){this.updaters.delete(e),this.movers.delete(e),this.interactors.delete(e)}getAvailablePlugins(e){const n=new Map;for(const i of this.plugins)i.needsPlugin(e.actualOptions)&&n.set(i.id,i.getPlugin(e));return n}getInteractors(e,n=!1){return md(e,this.interactors,this._initializers.interactors,n)}getMovers(e,n=!1){return md(e,this.movers,this._initializers.movers,n)}getPathGenerator(e){return this.pathGenerators.get(e)}getPlugin(e){return this.plugins.find(n=>n.id===e)}getPreset(e){return this.presets.get(e)}getShapeDrawer(e){return this.drawers.get(e)}getSupportedShapes(){return this.drawers.keys()}getUpdaters(e,n=!1){return md(e,this.updaters,this._initializers.updaters,n)}loadOptions(e,n){for(const i of this.plugins)i.loadOptions(e,n)}loadParticlesOptions(e,n,...i){const r=this.updaters.get(e);if(r)for(const s of r)s.loadOptions&&s.loadOptions(n,...i)}}async function vR(t){const e=di(t.url,t.index);if(!e)return t.fallback;const n=await fetch(e);return n.ok?n.json():(Ur().error(`${pn} ${n.status} while retrieving config file`),t.fallback)}function xR(t){return!t.id&&!t.element&&!t.url&&!t.options}function wR(t){return!xR(t)}class bR{constructor(){this._configs=new Map,this._domArray=[],this._eventDispatcher=new gR,this._initialized=!1,this.plugins=new yR(this)}get configs(){const e={};for(const[n,i]of this._configs)e[n]=i;return e}get version(){return"2.12.0"}addConfig(e,n){Mn(e)?n&&(n.name=e,this._configs.set(e,n)):this._configs.set(e.name??"default",e)}addEventListener(e,n){this._eventDispatcher.addEventListener(e,n)}async addInteractor(e,n,i=!0){this.plugins.addInteractor(e,n),await this.refresh(i)}async addMover(e,n,i=!0){this.plugins.addParticleMover(e,n),await this.refresh(i)}async addParticleUpdater(e,n,i=!0){this.plugins.addParticleUpdater(e,n),await this.refresh(i)}async addPathGenerator(e,n,i=!0){this.plugins.addPathGenerator(e,n),await this.refresh(i)}async addPlugin(e,n=!0){this.plugins.addPlugin(e),await this.refresh(n)}async addPreset(e,n,i=!1,r=!0){this.plugins.addPreset(e,n,i),await this.refresh(r)}async addShape(e,n,i,r,s,o=!0){let a,l=o,u,c,d;Zi(i)?(l=i,u=void 0):u=i,Zi(r)?(l=r,c=void 0):c=r,Zi(s)?(l=s,d=void 0):d=s,l2(n)?a={afterEffect:c,destroy:d,draw:n,init:u}:a=n,this.plugins.addShapeDrawer(e,a),await this.refresh(l)}dispatchEvent(e,n){this._eventDispatcher.dispatchEvent(e,n)}dom(){return this._domArray}domItem(e){const n=this.dom(),i=n[e];if(!i||i.destroyed){n.splice(e,1);return}return i}init(){this._initialized||(this._initialized=!0)}async load(e,n){return this.loadFromArray(e,n)}async loadFromArray(e,n,i){let r;return wR(e)?r=e:(r={},Mn(e)?r.id=e:r.options=e,Dn(n)?r.index=n:r.options=n??r.options,r.index=i??r.index),this._loadParams(r)}async loadJSON(e,n,i){let r,s;return Dn(n)||n===void 0?r=e:(s=e,r=n),this._loadParams({id:s,url:r,index:i})}async refresh(e=!0){e&&this.dom().forEach(n=>n.refresh())}removeEventListener(e,n){this._eventDispatcher.removeEventListener(e,n)}async set(e,n,i,r){const s={index:r};return Mn(e)?s.id=e:s.element=e,n instanceof HTMLElement?s.element=n:s.options=n,Dn(i)?s.index=i:s.options=i??s.options,this._loadParams(s)}async setJSON(e,n,i,r){const s={};return e instanceof HTMLElement?(s.element=e,s.url=n,s.index=i):(s.id=e,s.element=n,s.url=i,s.index=r),this._loadParams(s)}setOnClickHandler(e){const n=this.dom();if(!n.length)throw new Error(`${pn} can only set click handlers after calling tsParticles.load()`);for(const i of n)i.addClickHandler(e)}async _loadParams(e){const n=e.id??`tsparticles${Math.floor(Ee()*1e4)}`,{index:i,url:r}=e,s=r?await vR({fallback:e.options,url:r,index:i}):e.options;let o=e.element??document.getElementById(n);o||(o=document.createElement("div"),o.id=n,document.body.append(o));const a=di(s,i),l=this.dom(),u=l.findIndex(f=>f.id===n);if(u>=0){const f=this.domItem(u);f&&!f.destroyed&&(f.destroy(),l.splice(u,1))}let c;if(o.tagName.toLowerCase()==="canvas")c=o,c.dataset[zo]="false";else{const f=o.getElementsByTagName("canvas");f.length?(c=f[0],c.dataset[zo]="false"):(c=document.createElement("canvas"),c.dataset[zo]="true",o.appendChild(c))}c.style.width||(c.style.width="100%"),c.style.height||(c.style.height="100%");const d=new mR(this,n,a);return u>=0?l.splice(u,0,d):l.push(d),d.canvas.loadCanvas(c),await d.start(),d}}class SR{constructor(){this.key="hsl",this.stringPrefix="hsl"}handleColor(e){const n=e.value,i=n.hsl??e.value;if(i.h!==void 0&&i.s!==void 0&&i.l!==void 0)return qs(i)}handleRangeColor(e){const n=e.value,i=n.hsl??e.value;if(i.h!==void 0&&i.l!==void 0)return qs({h:X(i.h),l:X(i.l),s:X(i.s)})}parseString(e){if(!e.startsWith("hsl"))return;const n=/hsla?\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([\d.%]+)\s*)?\)/i,i=n.exec(e);return i?l3({a:i.length>4?t2(i[5]):1,h:parseInt(i[1],10),l:parseInt(i[3],10),s:parseInt(i[2],10)}):void 0}}class _R{constructor(){this.key="rgb",this.stringPrefix="rgb"}handleColor(e){const n=e.value,i=n.rgb??e.value;if(i.r!==void 0)return i}handleRangeColor(e){const n=e.value,i=n.rgb??e.value;if(i.r!==void 0)return{r:X(i.r),g:X(i.g),b:X(i.b)}}parseString(e){if(!e.startsWith(this.stringPrefix))return;const n=/rgba?\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([\d.%]+)\s*)?\)/i,i=n.exec(e);return i?{a:i.length>4?t2(i[5]):1,b:parseInt(i[3],10),g:parseInt(i[2],10),r:parseInt(i[1],10)}:void 0}}function kR(){const t=new _R,e=new SR;Zg(t),Zg(e);const n=new bR;return n.init(),n}class Jn{constructor(e){this.container=e,this.type="external"}}class Sp{constructor(e){this.container=e,this.type="particles"}}const mu=kR();Hs()||(window.tsParticles=mu);const ds=t=>typeof t=="object"&&t!==null;function gu(t,e,n=()=>!1){if(!ds(t)||!ds(e))return t===e;const i=Object.keys(t).filter(s=>!n(s)),r=Object.keys(e).filter(s=>!n(s));if(i.length!==r.length)return!1;for(const s of i){const o=t[s],a=e[s];if(ds(o)&&ds(a)){if(o===e&&a===t)continue;if(!gu(o,a,n))return!1}else if(Array.isArray(o)&&Array.isArray(a)){if(!w2(o,a,n))return!1}else if(o!==a)return!1}return!0}function w2(t,e,n){if(t.length!==e.length)return!1;for(let i=0;i<t.length;i++){const r=t[i],s=e[i];if(Array.isArray(r)&&Array.isArray(s)){if(!w2(r,s,n))return!1}else if(ds(r)&&ds(s)){if(!gu(r,s,n))return!1}else if(r!==s)return!1}return!0}const b2="tsparticles";let S2=class _2 extends S.Component{constructor(e){super(e),this.state={init:!1,library:void 0}}destroy(){this.state.library&&(this.state.library.destroy(),this.setState({library:void 0}))}shouldComponentUpdate(e){const n=e.options??e.params,i=this.props.options??this.props.params;return e.url!==this.props.url||e.id!==this.props.id||e.canvasClassName!==this.props.canvasClassName||e.className!==this.props.className||e.height!==this.props.height||e.width!==this.props.width||!gu(e.style,this.props.style)||e.init!==this.props.init||e.loaded!==this.props.loaded||!gu(n,i,r=>r.startsWith("_"))}componentDidUpdate(){this.refresh()}forceUpdate(){this.refresh().then(()=>{super.forceUpdate()})}componentDidMount(){(async()=>(this.props.init&&await this.props.init(mu),this.setState({init:!0},async()=>{await this.loadParticles()})))()}componentWillUnmount(){this.destroy()}render(){const{width:e,height:n,className:i,canvasClassName:r,id:s}=this.props;return Me.createElement("div",{className:i,id:s},Me.createElement("canvas",{className:r,style:{...this.props.style,width:e,height:n}}))}async refresh(){this.destroy(),await this.loadParticles()}async loadParticles(){if(!this.state.init)return;const e=this.props.id??_2.defaultProps.id??b2,n=await mu.load({url:this.props.url,id:e,options:this.props.options??this.props.params});this.props.container&&(this.props.container.current=n),this.setState({library:n}),this.props.loaded&&await this.props.loaded(n)}};S2.defaultProps={width:"100%",height:"100%",options:{},style:{},url:void 0,id:b2};class yu{static init(e){var s;const n=new yu,i=e.selector;if(!i)throw new Error("No selector provided");const r=document.querySelector(i);if(!r)throw new Error("No element found for selector");return mu.set(i.replace(".","").replace("!",""),r,{fullScreen:{enable:!1},particles:{color:{value:e.color??"!000000"},links:{color:"random",distance:e.minDistance??120,enable:e.connectParticles??!1},move:{enable:!0,speed:e.speed??.5},number:{value:e.maxParticles??100},size:{value:{min:1,max:e.sizeVariations??3}}},responsive:(s=e.responsive)==null?void 0:s.map(o=>{var a,l,u,c,d;return{maxWidth:o.breakpoint,options:{particles:{color:{value:(a=o.options)==null?void 0:a.color},links:{distance:(l=o.options)==null?void 0:l.minDistance,enable:(u=o.options)==null?void 0:u.connectParticles},number:{value:e.maxParticles},move:{enable:!0,speed:(c=o.options)==null?void 0:c.speed},size:{value:(d=o.options)==null?void 0:d.sizeVariations}}}}})}).then(o=>{n._container=o}),n}destroy(){const e=this._container;e&&e.destroy()}pauseAnimation(){const e=this._container;e&&e.pause()}resumeAnimation(){const e=this._container;e&&e.play()}}const CR=t=>{const e=(i,r)=>t.load(i,r);e.load=(i,r,s)=>{t.loadJSON(i,r).then(o=>{o&&s(o)}).catch(()=>{s(void 0)})},e.setOnClickHandler=i=>{t.setOnClickHandler(i)};const n=t.dom();return{particlesJS:e,pJSDom:n}},TR=t=>{const{particlesJS:e,pJSDom:n}=CR(t);return window.particlesJS=e,window.pJSDom=n,window.Particles=yu,{particlesJS:e,pJSDom:n,Particles:yu}};function PR(t){const e=t.initialPosition,{dx:n,dy:i}=Dt(e,t.position),r=Math.abs(n),s=Math.abs(i),{maxDistance:o}=t.retina,a=o.horizontal,l=o.vertical;if(!(!a&&!l)){if((a&&r>=a||l&&s>=l)&&!t.misplaced)t.misplaced=!!a&&r>a||!!l&&s>l,a&&(t.velocity.x=t.velocity.y/2-t.velocity.x),l&&(t.velocity.y=t.velocity.x/2-t.velocity.y);else if((!a||r<a)&&(!l||s<l)&&t.misplaced)t.misplaced=!1;else if(t.misplaced){const u=t.position,c=t.velocity;a&&(u.x<e.x&&c.x<0||u.x>e.x&&c.x>0)&&(c.x*=-Ee()),l&&(u.y<e.y&&c.y<0||u.y>e.y&&c.y>0)&&(c.y*=-Ee())}}}function ER(t,e,n,i,r,s){DR(t,s);const o=t.gravity,a=o!=null&&o.enable&&o.inverse?-1:1;r&&n&&(t.velocity.x+=r*s.factor/(60*n)),o!=null&&o.enable&&n&&(t.velocity.y+=a*(o.acceleration*s.factor)/(60*n));const l=t.moveDecay;t.velocity.multTo(l);const u=t.velocity.mult(n);o!=null&&o.enable&&i>0&&(!o.inverse&&u.y>=0&&u.y>=i||o.inverse&&u.y<=0&&u.y<=-i)&&(u.y=a*i,n&&(t.velocity.y=u.y/n));const c=t.options.zIndex,d=(1-t.zIndexFactor)**c.velocityRate;u.multTo(d);const{position:f}=t;f.addTo(u),e.vibrate&&(f.x+=Math.sin(f.x*Math.cos(f.y)),f.y+=Math.cos(f.y*Math.sin(f.x)))}function MR(t,e){const n=t.container;if(!t.spin)return;const i={x:t.spin.direction==="clockwise"?Math.cos:Math.sin,y:t.spin.direction==="clockwise"?Math.sin:Math.cos};t.position.x=t.spin.center.x+t.spin.radius*i.x(t.spin.angle),t.position.y=t.spin.center.y+t.spin.radius*i.y(t.spin.angle),t.spin.radius+=t.spin.acceleration;const r=Math.max(n.canvas.size.width,n.canvas.size.height);t.spin.radius>r/2?(t.spin.radius=r/2,t.spin.acceleration*=-1):t.spin.radius<0&&(t.spin.radius=0,t.spin.acceleration*=-1),t.spin.angle+=e/100*(1-t.spin.radius/r)}function DR(t,e){var o;const n=t.options,i=n.move.path;if(!i.enable)return;if(t.lastPathTime<=t.pathDelay){t.lastPathTime+=e.value;return}const s=(o=t.pathGenerator)==null?void 0:o.generate(t,e);s&&t.velocity.addTo(s),i.clamp&&(t.velocity.x=Fn(t.velocity.x,-1,1),t.velocity.y=Fn(t.velocity.y,-1,1)),t.lastPathTime-=t.pathDelay}function NR(t){return t.slow.inRange?t.slow.factor:1}const AR=2;class RR{constructor(){this._initSpin=e=>{const n=e.container,i=e.options,r=i.move.spin;if(!r.enable)return;const s=r.position??{x:50,y:50},o={x:s.x/100*n.canvas.size.width,y:s.y/100*n.canvas.size.height},a=e.getPosition(),l=Qt(a,o),u=X(r.acceleration);e.retina.spinAcceleration=u*n.retina.pixelRatio,e.spin={center:o,direction:e.velocity.x>=0?"clockwise":"counter-clockwise",angle:e.velocity.angle,radius:l,acceleration:e.retina.spinAcceleration}}}init(e){const n=e.options,i=n.move.gravity;e.gravity={enable:i.enable,acceleration:X(i.acceleration),inverse:i.inverse},this._initSpin(e)}isEnabled(e){return!e.destroyed&&e.options.move.enable}move(e,n){var v,y;const i=e.options,r=i.move;if(!r.enable)return;const s=e.container,o=s.retina.pixelRatio,a=NR(e),l=((v=e.retina).moveSpeed??(v.moveSpeed=X(r.speed)*o))*s.retina.reduceFactor,u=(y=e.retina).moveDrift??(y.moveDrift=X(e.options.move.drift)*o),c=Bi(i.size.value)*o,d=r.size?e.getRadius()/c:1,f=l*d*a*(n.factor||1)/AR,h=e.retina.maxSpeed??s.retina.maxSpeed;r.spin.enable?MR(e,f):ER(e,r,f,h,u,n),PR(e)}}async function FR(t,e=!0){await t.addMover("base",()=>new RR,e)}class IR{draw(e,n,i){n.circleRange||(n.circleRange={min:0,max:Math.PI*2});const r=n.circleRange;e.arc(0,0,i,r.min,r.max,!1)}getSidesCount(){return 12}particleInit(e,n){const i=n.shapeData,r=(i==null?void 0:i.angle)??{max:360,min:0};n.circleRange=cs(r)?{min:r.min*Math.PI/180,max:r.max*Math.PI/180}:{min:0,max:r*Math.PI/180}}}async function OR(t,e=!0){await t.addShape("circle",new IR,e)}function gd(t,e,n,i,r){if(!e||!n.enable||(e.maxLoops??0)>0&&(e.loops??0)>(e.maxLoops??0)||(e.time||(e.time=0),(e.delayTime??0)>0&&e.time<(e.delayTime??0)&&(e.time+=t.value),(e.delayTime??0)>0&&e.time<(e.delayTime??0)))return;const s=jt(n.offset),o=(e.velocity??0)*t.factor+s*3.6,a=e.decay??1;!r||e.status==="increasing"?(e.value+=o,e.value>i&&(e.loops||(e.loops=0),e.loops++,r&&(e.status="decreasing",e.value-=e.value%i))):(e.value-=o,e.value<0&&(e.loops||(e.loops=0),e.loops++,e.status="increasing",e.value+=e.value)),e.velocity&&a!==1&&(e.velocity*=a),e.value>i&&(e.value%=i)}function jR(t,e){const{h:n,s:i,l:r}=t.options.color.animation,{color:s}=t;if(!s)return;const{h:o,s:a,l}=s;o&&gd(e,o,n,360,!1),a&&gd(e,a,i,100,!0),l&&gd(e,l,r,100,!0)}class LR{constructor(e){this.container=e}init(e){const n=ca(e.options.color,e.id,e.options.reduceDuplicates);n&&(e.color=h2(n,e.options.color.animation,this.container.retina.reduceFactor))}isEnabled(e){const{h:n,s:i,l:r}=e.options.color.animation,{color:s}=e;return!e.destroyed&&!e.spawning&&((s==null?void 0:s.h.value)!==void 0&&n.enable||(s==null?void 0:s.s.value)!==void 0&&i.enable||(s==null?void 0:s.l.value)!==void 0&&r.enable)}update(e,n){jR(e,n)}}async function zR(t,e=!0){await t.addParticleUpdater("color",n=>new LR(n),e)}function VR(t,e,n,i){switch(t.options.opacity.animation.destroy){case"max":e>=i&&t.destroy();break;case"min":e<=n&&t.destroy();break}}function BR(t,e){const n=t.opacity;if(t.destroyed||!(n!=null&&n.enable)||(n.maxLoops??0)>0&&(n.loops??0)>(n.maxLoops??0))return;const i=n.min,r=n.max,s=n.decay??1;if(n.time||(n.time=0),(n.delayTime??0)>0&&n.time<(n.delayTime??0)&&(n.time+=e.value),!((n.delayTime??0)>0&&n.time<(n.delayTime??0))){switch(n.status){case"increasing":n.value>=r?(n.status="decreasing",n.loops||(n.loops=0),n.loops++):n.value+=(n.velocity??0)*e.factor;break;case"decreasing":n.value<=i?(n.status="increasing",n.loops||(n.loops=0),n.loops++):n.value-=(n.velocity??0)*e.factor;break}n.velocity&&n.decay!==1&&(n.velocity*=s),VR(t,n.value,i,r),t.destroyed||(n.value=Fn(n.value,i,r))}}class UR{constructor(e){this.container=e}init(e){const n=e.options.opacity;e.opacity=o2(n,1);const i=n.animation;i.enable&&(e.opacity.velocity=X(i.speed)/100*this.container.retina.reduceFactor,i.sync||(e.opacity.velocity*=Ee()))}isEnabled(e){return!e.destroyed&&!e.spawning&&!!e.opacity&&e.opacity.enable&&((e.opacity.maxLoops??0)<=0||(e.opacity.maxLoops??0)>0&&(e.opacity.loops??0)<(e.opacity.maxLoops??0))}reset(e){e.opacity&&(e.opacity.time=0,e.opacity.loops=0)}update(e,n){this.isEnabled(e)&&BR(e,n)}}async function $R(t,e=!0){await t.addParticleUpdater("opacity",n=>new UR(n),e)}function WR(t){if(t.outMode!=="bounce"&&t.outMode!=="bounce-horizontal"&&t.outMode!=="bounceHorizontal"&&t.outMode!=="split"||t.direction!=="left"&&t.direction!=="right")return;t.bounds.right<0&&t.direction==="left"?t.particle.position.x=t.size+t.offset.x:t.bounds.left>t.canvasSize.width&&t.direction==="right"&&(t.particle.position.x=t.canvasSize.width-t.size-t.offset.x);const e=t.particle.velocity.x;let n=!1;if(t.direction==="right"&&t.bounds.right>=t.canvasSize.width&&e>0||t.direction==="left"&&t.bounds.left<=0&&e<0){const r=Br(t.particle.options.bounce.horizontal);t.particle.velocity.x*=-r,n=!0}if(!n)return;const i=t.offset.x+t.size;t.bounds.right>=t.canvasSize.width&&t.direction==="right"?t.particle.position.x=t.canvasSize.width-i:t.bounds.left<=0&&t.direction==="left"&&(t.particle.position.x=i),t.outMode==="split"&&t.particle.destroy()}function HR(t){if(t.outMode!=="bounce"&&t.outMode!=="bounce-vertical"&&t.outMode!=="bounceVertical"&&t.outMode!=="split"||t.direction!=="bottom"&&t.direction!=="top")return;t.bounds.bottom<0&&t.direction==="top"?t.particle.position.y=t.size+t.offset.y:t.bounds.top>t.canvasSize.height&&t.direction==="bottom"&&(t.particle.position.y=t.canvasSize.height-t.size-t.offset.y);const e=t.particle.velocity.y;let n=!1;if(t.direction==="bottom"&&t.bounds.bottom>=t.canvasSize.height&&e>0||t.direction==="top"&&t.bounds.top<=0&&e<0){const r=Br(t.particle.options.bounce.vertical);t.particle.velocity.y*=-r,n=!0}if(!n)return;const i=t.offset.y+t.size;t.bounds.bottom>=t.canvasSize.height&&t.direction==="bottom"?t.particle.position.y=t.canvasSize.height-i:t.bounds.top<=0&&t.direction==="top"&&(t.particle.position.y=i),t.outMode==="split"&&t.particle.destroy()}class qR{constructor(e){this.container=e,this.modes=["bounce","bounce-vertical","bounce-horizontal","bounceVertical","bounceHorizontal","split"]}update(e,n,i,r){if(!this.modes.includes(r))return;const s=this.container;let o=!1;for(const[,f]of s.plugins)if(f.particleBounce!==void 0&&(o=f.particleBounce(e,i,n)),o)break;if(o)return;const a=e.getPosition(),l=e.offset,u=e.getRadius(),c=za(a,u),d=s.canvas.size;WR({particle:e,outMode:r,direction:n,bounds:c,canvasSize:d,offset:l,size:u}),HR({particle:e,outMode:r,direction:n,bounds:c,canvasSize:d,offset:l,size:u})}}class GR{constructor(e){this.container=e,this.modes=["destroy"]}update(e,n,i,r){if(!this.modes.includes(r))return;const s=this.container;switch(e.outType){case"normal":case"outside":if(vp(e.position,s.canvas.size,nt.origin,e.getRadius(),n))return;break;case"inside":{const{dx:o,dy:a}=Dt(e.position,e.moveCenter),{x:l,y:u}=e.velocity;if(l<0&&o>e.moveCenter.radius||u<0&&a>e.moveCenter.radius||l>=0&&o<-e.moveCenter.radius||u>=0&&a<-e.moveCenter.radius)return;break}}s.particles.remove(e,void 0,!0)}}class QR{constructor(e){this.container=e,this.modes=["none"]}update(e,n,i,r){if(!this.modes.includes(r)||e.options.move.distance.horizontal&&(n==="left"||n==="right")||e.options.move.distance.vertical&&(n==="top"||n==="bottom"))return;const s=e.options.move.gravity,o=this.container,a=o.canvas.size,l=e.getRadius();if(s.enable){const u=e.position;(!s.inverse&&u.y>a.height+l&&n==="bottom"||s.inverse&&u.y<-l&&n==="top")&&o.particles.remove(e)}else{if(e.velocity.y>0&&e.position.y<=a.height+l||e.velocity.y<0&&e.position.y>=-l||e.velocity.x>0&&e.position.x<=a.width+l||e.velocity.x<0&&e.position.x>=-l)return;vp(e.position,o.canvas.size,nt.origin,l,n)||o.particles.remove(e)}}}class KR{constructor(e){this.container=e,this.modes=["out"]}update(e,n,i,r){if(!this.modes.includes(r))return;const s=this.container;switch(e.outType){case"inside":{const{x:o,y:a}=e.velocity,l=nt.origin;l.length=e.moveCenter.radius,l.angle=e.velocity.angle+Math.PI,l.addTo(nt.create(e.moveCenter));const{dx:u,dy:c}=Dt(e.position,l);if(o<=0&&u>=0||a<=0&&c>=0||o>=0&&u<=0||a>=0&&c<=0)return;e.position.x=Math.floor(jt({min:0,max:s.canvas.size.width})),e.position.y=Math.floor(jt({min:0,max:s.canvas.size.height}));const{dx:d,dy:f}=Dt(e.position,e.moveCenter);e.direction=Math.atan2(-f,-d),e.velocity.angle=e.direction;break}default:{if(vp(e.position,s.canvas.size,nt.origin,e.getRadius(),n))return;switch(e.outType){case"outside":{e.position.x=Math.floor(jt({min:-e.moveCenter.radius,max:e.moveCenter.radius}))+e.moveCenter.x,e.position.y=Math.floor(jt({min:-e.moveCenter.radius,max:e.moveCenter.radius}))+e.moveCenter.y;const{dx:o,dy:a}=Dt(e.position,e.moveCenter);e.moveCenter.radius&&(e.direction=Math.atan2(a,o),e.velocity.angle=e.direction);break}case"normal":{const o=e.options.move.warp,a=s.canvas.size,l={bottom:a.height+e.getRadius()+e.offset.y,left:-e.getRadius()-e.offset.x,right:a.width+e.getRadius()+e.offset.x,top:-e.getRadius()-e.offset.y},u=e.getRadius(),c=za(e.position,u);n==="right"&&c.left>a.width+e.offset.x?(e.position.x=l.left,e.initialPosition.x=e.position.x,o||(e.position.y=Ee()*a.height,e.initialPosition.y=e.position.y)):n==="left"&&c.right<-e.offset.x&&(e.position.x=l.right,e.initialPosition.x=e.position.x,o||(e.position.y=Ee()*a.height,e.initialPosition.y=e.position.y)),n==="bottom"&&c.top>a.height+e.offset.y?(o||(e.position.x=Ee()*a.width,e.initialPosition.x=e.position.x),e.position.y=l.top,e.initialPosition.y=e.position.y):n==="top"&&c.bottom<-e.offset.y&&(o||(e.position.x=Ee()*a.width,e.initialPosition.x=e.position.x),e.position.y=l.bottom,e.initialPosition.y=e.position.y);break}}break}}}}class ZR{constructor(e){this.container=e,this._updateOutMode=(n,i,r,s)=>{for(const o of this.updaters)o.update(n,s,i,r)},this.updaters=[new qR(e),new GR(e),new KR(e),new QR(e)]}init(){}isEnabled(e){return!e.destroyed&&!e.spawning}update(e,n){const i=e.options.move.outModes;this._updateOutMode(e,n,i.bottom??i.default,"bottom"),this._updateOutMode(e,n,i.left??i.default,"left"),this._updateOutMode(e,n,i.right??i.default,"right"),this._updateOutMode(e,n,i.top??i.default,"top")}}async function XR(t,e=!0){await t.addParticleUpdater("outModes",n=>new ZR(n),e)}function YR(t,e,n,i){switch(t.options.size.animation.destroy){case"max":e>=i&&t.destroy();break;case"min":e<=n&&t.destroy();break}}function JR(t,e){const n=t.size;if(t.destroyed||!n||!n.enable||(n.maxLoops??0)>0&&(n.loops??0)>(n.maxLoops??0))return;const i=(n.velocity??0)*e.factor,r=n.min,s=n.max,o=n.decay??1;if(n.time||(n.time=0),(n.delayTime??0)>0&&n.time<(n.delayTime??0)&&(n.time+=e.value),!((n.delayTime??0)>0&&n.time<(n.delayTime??0))){switch(n.status){case"increasing":n.value>=s?(n.status="decreasing",n.loops||(n.loops=0),n.loops++):n.value+=i;break;case"decreasing":n.value<=r?(n.status="increasing",n.loops||(n.loops=0),n.loops++):n.value-=i}n.velocity&&o!==1&&(n.velocity*=o),YR(t,n.value,r,s),t.destroyed||(n.value=Fn(n.value,r,s))}}class e5{init(e){const n=e.container,i=e.options.size,r=i.animation;r.enable&&(e.size.velocity=(e.retina.sizeAnimationSpeed??n.retina.sizeAnimationSpeed)/100*n.retina.reduceFactor,r.sync||(e.size.velocity*=Ee()))}isEnabled(e){return!e.destroyed&&!e.spawning&&e.size.enable&&((e.size.maxLoops??0)<=0||(e.size.maxLoops??0)>0&&(e.size.loops??0)<(e.size.maxLoops??0))}reset(e){e.size.loops=0}update(e,n){this.isEnabled(e)&&JR(e,n)}}async function t5(t,e=!0){await t.addParticleUpdater("size",()=>new e5,e)}async function n5(t,e=!0){await FR(t,!1),await OR(t,!1),await zR(t,!1),await $R(t,!1),await XR(t,!1),await t5(t,!1),await t.refresh(e)}async function i5(){id("ease-in-quad",t=>t**2),id("ease-out-quad",t=>1-(1-t)**2),id("ease-in-out-quad",t=>t<.5?2*t**2:1-(-2*t+2)**2/2)}class r5{constructor(){this.distance=200,this.duration=.4,this.easing="ease-out-quad",this.factor=1,this.maxSpeed=50,this.speed=1}load(e){e&&(e.distance!==void 0&&(this.distance=e.distance),e.duration!==void 0&&(this.duration=e.duration),e.easing!==void 0&&(this.easing=e.easing),e.factor!==void 0&&(this.factor=e.factor),e.maxSpeed!==void 0&&(this.maxSpeed=e.maxSpeed),e.speed!==void 0&&(this.speed=e.speed))}}let s5=class extends Jn{constructor(e,n){super(n),this._clickAttract=()=>{const i=this.container;i.attract||(i.attract={particles:[]});const{attract:r}=i;if(r.finish||(r.count||(r.count=0),r.count++,r.count===i.particles.count&&(r.finish=!0)),r.clicking){const s=i.interactivity.mouse.clickPosition,o=i.retina.attractModeDistance;if(!o||o<0||!s)return;this._processAttract(s,o,new wt(s.x,s.y,o))}else r.clicking===!1&&(r.particles=[])},this._hoverAttract=()=>{const i=this.container,r=i.interactivity.mouse.position,s=i.retina.attractModeDistance;!s||s<0||!r||this._processAttract(r,s,new wt(r.x,r.y,s))},this._processAttract=(i,r,s)=>{const o=this.container,a=o.actualOptions.interactivity.modes.attract;if(!a)return;const l=o.particles.quadTree.query(s,u=>this.isEnabled(u));for(const u of l){const{dx:c,dy:d,distance:f}=Dt(u.position,i),h=a.speed*a.factor,v=Fn(e2(a.easing)(1-f/r)*h,0,a.maxSpeed),y=nt.create(f===0?h:c/f*v,f===0?h:d/f*v);u.position.subFrom(y)}},this._engine=e,n.attract||(n.attract={particles:[]}),this.handleClickMode=i=>{const r=this.container.actualOptions,s=r.interactivity.modes.attract;if(!(!s||i!=="attract")){n.attract||(n.attract={particles:[]}),n.attract.clicking=!0,n.attract.count=0;for(const o of n.attract.particles)this.isEnabled(o)&&o.velocity.setTo(o.initialVelocity);n.attract.particles=[],n.attract.finish=!1,setTimeout(()=>{n.destroyed||(n.attract||(n.attract={particles:[]}),n.attract.clicking=!1)},s.duration*1e3)}}}clear(){}init(){const e=this.container,n=e.actualOptions.interactivity.modes.attract;n&&(e.retina.attractModeDistance=n.distance*e.retina.pixelRatio)}async interact(){const e=this.container,n=e.actualOptions,i=e.interactivity.status===Vr,r=n.interactivity.events,s=r.onHover.enable,o=r.onHover.mode,a=r.onClick.enable,l=r.onClick.mode;i&&s&&He("attract",o)?this._hoverAttract():a&&He("attract",l)&&this._clickAttract()}isEnabled(e){const n=this.container,i=n.actualOptions,r=n.interactivity.mouse,s=((e==null?void 0:e.interactivity)??i.interactivity).events;if((!r.position||!s.onHover.enable)&&(!r.clickPosition||!s.onClick.enable))return!1;const o=s.onHover.mode,a=s.onClick.mode;return He("attract",o)||He("attract",a)}loadModeOptions(e,...n){e.attract||(e.attract=new r5);for(const i of n)e.attract.load(i==null?void 0:i.attract)}reset(){}};async function o5(t,e=!0){await t.addInteractor("externalAttract",n=>new s5(t,n),e)}class a5{constructor(){this.distance=200}load(e){e&&e.distance!==void 0&&(this.distance=e.distance)}}class l5 extends Jn{constructor(e){super(e),this._processBounce=(n,i,r)=>{const s=this.container.particles.quadTree.query(r,o=>this.isEnabled(o));for(const o of s)r instanceof wt?r2(Bf(o),{position:n,radius:i,mass:i**2*Math.PI/2,velocity:nt.origin,factor:nt.origin}):r instanceof In&&r3(o,za(n,i))},this._processMouseBounce=()=>{const n=this.container,i=n.retina.pixelRatio,r=10*i,s=n.interactivity.mouse.position,o=n.retina.bounceModeDistance;!o||o<0||!s||this._processBounce(s,o,new wt(s.x,s.y,o+r))},this._singleSelectorBounce=(n,i)=>{const r=this.container,s=document.querySelectorAll(n);s.length&&s.forEach(o=>{const a=o,l=r.retina.pixelRatio,u={x:(a.offsetLeft+a.offsetWidth/2)*l,y:(a.offsetTop+a.offsetHeight/2)*l},c=a.offsetWidth/2*l,d=10*l,f=i.type==="circle"?new wt(u.x,u.y,c+d):new In(a.offsetLeft*l-d,a.offsetTop*l-d,a.offsetWidth*l+d*2,a.offsetHeight*l+d*2);this._processBounce(u,c,f)})}}clear(){}init(){const e=this.container,n=e.actualOptions.interactivity.modes.bounce;n&&(e.retina.bounceModeDistance=n.distance*e.retina.pixelRatio)}async interact(){const e=this.container,n=e.actualOptions,i=n.interactivity.events,r=e.interactivity.status===Vr,s=i.onHover.enable,o=i.onHover.mode,a=i.onDiv;r&&s&&He("bounce",o)?this._processMouseBounce():wp("bounce",a,(l,u)=>this._singleSelectorBounce(l,u))}isEnabled(e){const n=this.container,i=n.actualOptions,r=n.interactivity.mouse,s=((e==null?void 0:e.interactivity)??i.interactivity).events,o=s.onDiv;return r.position&&s.onHover.enable&&He("bounce",s.onHover.mode)||xp("bounce",o)}loadModeOptions(e,...n){e.bounce||(e.bounce=new a5);for(const i of n)e.bounce.load(i==null?void 0:i.bounce)}reset(){}}async function u5(t,e=!0){await t.addInteractor("externalBounce",n=>new l5(n),e)}class k2{constructor(){this.distance=200,this.duration=.4,this.mix=!1}load(e){if(e){if(e.distance!==void 0&&(this.distance=e.distance),e.duration!==void 0&&(this.duration=e.duration),e.mix!==void 0&&(this.mix=e.mix),e.opacity!==void 0&&(this.opacity=e.opacity),e.color!==void 0){const n=Kt(this.color)?void 0:this.color;this.color=it(e.color,i=>ct.create(n,i))}e.size!==void 0&&(this.size=e.size)}}}class c5 extends k2{constructor(){super(),this.selectors=[]}get ids(){return it(this.selectors,e=>e.replace("#",""))}set ids(e){this.selectors=it(e,n=>`#${n}`)}load(e){super.load(e),e&&(e.ids!==void 0&&(this.ids=e.ids),e.selectors!==void 0&&(this.selectors=e.selectors))}}class d5 extends k2{load(e){super.load(e),e&&(this.divs=it(e.divs,n=>{const i=new c5;return i.load(n),i}))}}function sy(t,e,n,i){if(e>=n){const r=t+(e-n)*i;return Fn(r,t,e)}else if(e<n){const r=t-(n-e)*i;return Fn(r,e,t)}}class f5 extends Jn{constructor(e){super(e),this._clickBubble=()=>{var u;const n=this.container,i=n.actualOptions,r=n.interactivity.mouse.clickPosition,s=i.interactivity.modes.bubble;if(!s||!r)return;n.bubble||(n.bubble={});const o=n.retina.bubbleModeDistance;if(!o||o<0)return;const a=n.particles.quadTree.queryCircle(r,o,c=>this.isEnabled(c)),{bubble:l}=n;for(const c of a){if(!l.clicking)continue;c.bubble.inRange=!l.durationEnd;const d=c.getPosition(),f=Qt(d,r),h=(new Date().getTime()-(n.interactivity.mouse.clickTime||0))/1e3;h>s.duration&&(l.durationEnd=!0),h>s.duration*2&&(l.clicking=!1,l.durationEnd=!1);const v={bubbleObj:{optValue:n.retina.bubbleModeSize,value:c.bubble.radius},particlesObj:{optValue:Bi(c.options.size.value)*n.retina.pixelRatio,value:c.size.value},type:"size"};this._process(c,f,h,v);const y={bubbleObj:{optValue:s.opacity,value:c.bubble.opacity},particlesObj:{optValue:Bi(c.options.opacity.value),value:((u=c.opacity)==null?void 0:u.value)??1},type:"opacity"};this._process(c,f,h,y),!l.durationEnd&&f<=o?this._hoverBubbleColor(c,f):delete c.bubble.color}},this._hoverBubble=()=>{const n=this.container,i=n.interactivity.mouse.position,r=n.retina.bubbleModeDistance;if(!r||r<0||i===void 0)return;const s=n.particles.quadTree.queryCircle(i,r,o=>this.isEnabled(o));for(const o of s){o.bubble.inRange=!0;const a=o.getPosition(),l=Qt(a,i),u=1-l/r;l<=r?u>=0&&n.interactivity.status===Vr&&(this._hoverBubbleSize(o,u),this._hoverBubbleOpacity(o,u),this._hoverBubbleColor(o,u)):this.reset(o),n.interactivity.status===zf&&this.reset(o)}},this._hoverBubbleColor=(n,i,r)=>{const s=this.container.actualOptions,o=r??s.interactivity.modes.bubble;if(o){if(!n.bubble.finalColor){const a=o.color;if(!a)return;const l=di(a);n.bubble.finalColor=ca(l)}if(n.bubble.finalColor)if(o.mix){n.bubble.color=void 0;const a=n.getFillColor();n.bubble.color=a?c2(bp(a,n.bubble.finalColor,1-i,i)):n.bubble.finalColor}else n.bubble.color=n.bubble.finalColor}},this._hoverBubbleOpacity=(n,i,r)=>{var d,f;const s=this.container,o=s.actualOptions,a=(r==null?void 0:r.opacity)??((d=o.interactivity.modes.bubble)==null?void 0:d.opacity);if(!a)return;const l=n.options.opacity.value,u=((f=n.opacity)==null?void 0:f.value)??1,c=sy(u,a,Bi(l),i);c!==void 0&&(n.bubble.opacity=c)},this._hoverBubbleSize=(n,i,r)=>{const s=this.container,o=r!=null&&r.size?r.size*s.retina.pixelRatio:s.retina.bubbleModeSize;if(o===void 0)return;const a=Bi(n.options.size.value)*s.retina.pixelRatio,l=n.size.value,u=sy(l,o,a,i);u!==void 0&&(n.bubble.radius=u)},this._process=(n,i,r,s)=>{const o=this.container,a=s.bubbleObj.optValue,l=o.actualOptions,u=l.interactivity.modes.bubble;if(!u||a===void 0)return;const c=u.duration,d=o.retina.bubbleModeDistance,f=s.particlesObj.optValue,h=s.bubbleObj.value,v=s.particlesObj.value||0,y=s.type;if(!(!d||d<0||a===f))if(o.bubble||(o.bubble={}),o.bubble.durationEnd)h&&(y==="size"&&delete n.bubble.radius,y==="opacity"&&delete n.bubble.opacity);else if(i<=d){if((h??v)!==a){const g=v-r*(v-a)/c;y==="size"&&(n.bubble.radius=g),y==="opacity"&&(n.bubble.opacity=g)}}else y==="size"&&delete n.bubble.radius,y==="opacity"&&delete n.bubble.opacity},this._singleSelectorHover=(n,i,r)=>{const s=this.container,o=document.querySelectorAll(i),a=s.actualOptions.interactivity.modes.bubble;!a||!o.length||o.forEach(l=>{const u=l,c=s.retina.pixelRatio,d={x:(u.offsetLeft+u.offsetWidth/2)*c,y:(u.offsetTop+u.offsetHeight/2)*c},f=u.offsetWidth/2*c,h=r.type==="circle"?new wt(d.x,d.y,f):new In(u.offsetLeft*c,u.offsetTop*c,u.offsetWidth*c,u.offsetHeight*c),v=s.particles.quadTree.query(h,y=>this.isEnabled(y));for(const y of v){if(!h.contains(y.getPosition()))continue;y.bubble.inRange=!0;const w=a.divs,g=i2(w,u);(!y.bubble.div||y.bubble.div!==u)&&(this.clear(y,n,!0),y.bubble.div=u),this._hoverBubbleSize(y,1,g),this._hoverBubbleOpacity(y,1,g),this._hoverBubbleColor(y,1,g)}})},e.bubble||(e.bubble={}),this.handleClickMode=n=>{n==="bubble"&&(e.bubble||(e.bubble={}),e.bubble.clicking=!0)}}clear(e,n,i){e.bubble.inRange&&!i||(delete e.bubble.div,delete e.bubble.opacity,delete e.bubble.radius,delete e.bubble.color)}init(){const e=this.container,n=e.actualOptions.interactivity.modes.bubble;n&&(e.retina.bubbleModeDistance=n.distance*e.retina.pixelRatio,n.size!==void 0&&(e.retina.bubbleModeSize=n.size*e.retina.pixelRatio))}async interact(e){const n=this.container.actualOptions,i=n.interactivity.events,r=i.onHover,s=i.onClick,o=r.enable,a=r.mode,l=s.enable,u=s.mode,c=i.onDiv;o&&He("bubble",a)?this._hoverBubble():l&&He("bubble",u)?this._clickBubble():wp("bubble",c,(d,f)=>this._singleSelectorHover(e,d,f))}isEnabled(e){const n=this.container,i=n.actualOptions,r=n.interactivity.mouse,s=((e==null?void 0:e.interactivity)??i.interactivity).events,{onClick:o,onDiv:a,onHover:l}=s,u=xp("bubble",a);return u||l.enable&&r.position||o.enable&&r.clickPosition?He("bubble",l.mode)||He("bubble",o.mode)||u:!1}loadModeOptions(e,...n){e.bubble||(e.bubble=new d5);for(const i of n)e.bubble.load(i==null?void 0:i.bubble)}reset(e){e.bubble.inRange=!1}}async function h5(t,e=!0){await t.addInteractor("externalBubble",n=>new f5(n),e)}class p5{constructor(){this.opacity=.5}load(e){e&&e.opacity!==void 0&&(this.opacity=e.opacity)}}class m5{constructor(){this.distance=80,this.links=new p5,this.radius=60}get lineLinked(){return this.links}set lineLinked(e){this.links=e}get line_linked(){return this.links}set line_linked(e){this.links=e}load(e){e&&(e.distance!==void 0&&(this.distance=e.distance),this.links.load(e.links??e.lineLinked??e.line_linked),e.radius!==void 0&&(this.radius=e.radius))}}function g5(t,e,n,i){const r=Math.floor(n.getRadius()/e.getRadius()),s=e.getFillColor(),o=n.getFillColor();if(!s||!o)return;const a=e.getPosition(),l=n.getPosition(),u=bp(s,o,e.getRadius(),n.getRadius()),c=t.createLinearGradient(a.x,a.y,l.x,l.y);return c.addColorStop(0,da(s,i)),c.addColorStop(r>1?1:r,fi(u,i)),c.addColorStop(1,da(o,i)),c}function y5(t,e,n,i,r){Vo(t,i,r),t.lineWidth=e,t.strokeStyle=n,t.stroke()}function v5(t,e,n,i){const r=t.actualOptions,s=r.interactivity.modes.connect;if(s)return g5(e,n,i,s.links.opacity)}function x5(t,e,n){t.canvas.draw(i=>{const r=v5(t,i,e,n);if(!r)return;const s=e.getPosition(),o=n.getPosition();y5(i,e.retina.linksWidth??0,r,s,o)})}class w5 extends Jn{constructor(e){super(e)}clear(){}init(){const e=this.container,n=e.actualOptions.interactivity.modes.connect;n&&(e.retina.connectModeDistance=n.distance*e.retina.pixelRatio,e.retina.connectModeRadius=n.radius*e.retina.pixelRatio)}async interact(){const e=this.container;if(e.actualOptions.interactivity.events.onHover.enable&&e.interactivity.status==="pointermove"){const i=e.interactivity.mouse.position;if(!e.retina.connectModeDistance||e.retina.connectModeDistance<0||!e.retina.connectModeRadius||e.retina.connectModeRadius<0||!i)return;const r=Math.abs(e.retina.connectModeRadius),s=e.particles.quadTree.queryCircle(i,r,a=>this.isEnabled(a));let o=0;for(const a of s){const l=a.getPosition();for(const u of s.slice(o+1)){const c=u.getPosition(),d=Math.abs(e.retina.connectModeDistance),f=Math.abs(l.x-c.x),h=Math.abs(l.y-c.y);f<d&&h<d&&x5(e,a,u)}++o}}}isEnabled(e){const n=this.container,i=n.interactivity.mouse,r=((e==null?void 0:e.interactivity)??n.actualOptions.interactivity).events;return r.onHover.enable&&i.position?He("connect",r.onHover.mode):!1}loadModeOptions(e,...n){e.connect||(e.connect=new m5);for(const i of n)e.connect.load(i==null?void 0:i.connect)}reset(){}}async function b5(t,e=!0){await t.addInteractor("externalConnect",n=>new w5(n),e)}class S5{constructor(){this.blink=!1,this.consent=!1,this.opacity=1}load(e){e&&(e.blink!==void 0&&(this.blink=e.blink),e.color!==void 0&&(this.color=ct.create(this.color,e.color)),e.consent!==void 0&&(this.consent=e.consent),e.opacity!==void 0&&(this.opacity=e.opacity))}}class _5{constructor(){this.distance=100,this.links=new S5}get lineLinked(){return this.links}set lineLinked(e){this.links=e}get line_linked(){return this.links}set line_linked(e){this.links=e}load(e){e&&(e.distance!==void 0&&(this.distance=e.distance),this.links.load(e.links??e.lineLinked??e.line_linked))}}function k5(t,e,n,i,r,s){Vo(t,n,i),t.strokeStyle=fi(r,s),t.lineWidth=e,t.stroke()}function C5(t,e,n,i,r){t.canvas.draw(s=>{const o=e.getPosition();k5(s,e.retina.linksWidth??0,o,r,n,i)})}class T5 extends Jn{constructor(e){super(e)}clear(){}init(){const e=this.container,n=e.actualOptions.interactivity.modes.grab;n&&(e.retina.grabModeDistance=n.distance*e.retina.pixelRatio)}async interact(){var a;const e=this.container,n=e.actualOptions,i=n.interactivity;if(!i.modes.grab||!i.events.onHover.enable||e.interactivity.status!==Vr)return;const r=e.interactivity.mouse.position;if(!r)return;const s=e.retina.grabModeDistance;if(!s||s<0)return;const o=e.particles.quadTree.queryCircle(r,s,l=>this.isEnabled(l));for(const l of o){const u=l.getPosition(),c=Qt(u,r);if(c>s)continue;const d=i.modes.grab.links,f=d.opacity,h=f-c*f/s;if(h<=0)continue;const v=d.color??((a=l.options.links)==null?void 0:a.color);if(!e.particles.grabLineColor&&v){const w=i.modes.grab.links;e.particles.grabLineColor=f2(v,w.blink,w.consent)}const y=Uf(l,void 0,e.particles.grabLineColor);y&&C5(e,l,y,h,r)}}isEnabled(e){const n=this.container,i=n.interactivity.mouse,r=((e==null?void 0:e.interactivity)??n.actualOptions.interactivity).events;return r.onHover.enable&&!!i.position&&He("grab",r.onHover.mode)}loadModeOptions(e,...n){e.grab||(e.grab=new _5);for(const i of n)e.grab.load(i==null?void 0:i.grab)}reset(){}}async function P5(t,e=!0){await t.addInteractor("externalGrab",n=>new T5(n),e)}class E5 extends Jn{constructor(e){super(e),this.handleClickMode=n=>{if(n!=="pause")return;const i=this.container;i.getAnimationStatus()?i.pause():i.play()}}clear(){}init(){}async interact(){}isEnabled(){return!0}reset(){}}async function M5(t,e=!0){await t.addInteractor("externalPause",n=>new E5(n),e)}class D5{constructor(){this.default=!0,this.groups=[],this.quantity=4}get particles_nb(){return this.quantity}set particles_nb(e){this.quantity=le(e)}load(e){if(!e)return;e.default!==void 0&&(this.default=e.default),e.groups!==void 0&&(this.groups=e.groups.map(i=>i)),this.groups.length||(this.default=!0);const n=e.quantity??e.particles_nb;n!==void 0&&(this.quantity=le(n))}}class N5 extends Jn{constructor(e){super(e),this.handleClickMode=n=>{if(n!=="push")return;const i=this.container,r=i.actualOptions,s=r.interactivity.modes.push;if(!s)return;const o=X(s.quantity);if(o<=0)return;const a=uc([void 0,...s.groups]),l=a!==void 0?i.actualOptions.particles.groups[a]:void 0;i.particles.push(o,i.interactivity.mouse,l,a)}}clear(){}init(){}async interact(){}isEnabled(){return!0}loadModeOptions(e,...n){e.push||(e.push=new D5);for(const i of n)e.push.load(i==null?void 0:i.push)}reset(){}}async function A5(t,e=!0){await t.addInteractor("externalPush",n=>new N5(n),e)}class R5{constructor(){this.quantity=2}get particles_nb(){return this.quantity}set particles_nb(e){this.quantity=le(e)}load(e){if(!e)return;const n=e.quantity??e.particles_nb;n!==void 0&&(this.quantity=le(n))}}class F5 extends Jn{constructor(e){super(e),this.handleClickMode=n=>{const i=this.container,r=i.actualOptions;if(!r.interactivity.modes.remove||n!=="remove")return;const s=X(r.interactivity.modes.remove.quantity);i.particles.removeQuantity(s)}}clear(){}init(){}async interact(){}isEnabled(){return!0}loadModeOptions(e,...n){e.remove||(e.remove=new R5);for(const i of n)e.remove.load(i==null?void 0:i.remove)}reset(){}}async function I5(t,e=!0){await t.addInteractor("externalRemove",n=>new F5(n),e)}class C2{constructor(){this.distance=200,this.duration=.4,this.factor=100,this.speed=1,this.maxSpeed=50,this.easing="ease-out-quad"}load(e){e&&(e.distance!==void 0&&(this.distance=e.distance),e.duration!==void 0&&(this.duration=e.duration),e.easing!==void 0&&(this.easing=e.easing),e.factor!==void 0&&(this.factor=e.factor),e.speed!==void 0&&(this.speed=e.speed),e.maxSpeed!==void 0&&(this.maxSpeed=e.maxSpeed))}}class O5 extends C2{constructor(){super(),this.selectors=[]}get ids(){return it(this.selectors,e=>e.replace("#",""))}set ids(e){this.selectors=it(e,n=>`#${n}`)}load(e){super.load(e),e&&(e.ids!==void 0&&(this.ids=e.ids),e.selectors!==void 0&&(this.selectors=e.selectors))}}class j5 extends C2{load(e){super.load(e),e&&(this.divs=it(e.divs,n=>{const i=new O5;return i.load(n),i}))}}class L5 extends Jn{constructor(e,n){super(n),this._clickRepulse=()=>{const i=this.container,r=i.actualOptions.interactivity.modes.repulse;if(!r)return;const s=i.repulse||{particles:[]};if(s.finish||(s.count||(s.count=0),s.count++,s.count===i.particles.count&&(s.finish=!0)),s.clicking){const o=i.retina.repulseModeDistance;if(!o||o<0)return;const a=Math.pow(o/6,3),l=i.interactivity.mouse.clickPosition;if(l===void 0)return;const u=new wt(l.x,l.y,a),c=i.particles.quadTree.query(u,d=>this.isEnabled(d));for(const d of c){const{dx:f,dy:h,distance:v}=Dt(l,d.position),y=v**2,w=r.speed,g=-a*w/y;if(y<=a){s.particles.push(d);const m=nt.create(f,h);m.length=g,d.velocity.setTo(m)}}}else if(s.clicking===!1){for(const o of s.particles)o.velocity.setTo(o.initialVelocity);s.particles=[]}},this._hoverRepulse=()=>{const i=this.container,r=i.interactivity.mouse.position,s=i.retina.repulseModeDistance;!s||s<0||!r||this._processRepulse(r,s,new wt(r.x,r.y,s))},this._processRepulse=(i,r,s,o)=>{const a=this.container,l=a.particles.quadTree.query(s,c=>this.isEnabled(c)),u=a.actualOptions.interactivity.modes.repulse;if(u)for(const c of l){const{dx:d,dy:f,distance:h}=Dt(c.position,i),v=((o==null?void 0:o.speed)??u.speed)*u.factor,y=Fn(e2(u.easing)(1-h/r)*v,0,u.maxSpeed),w=nt.create(h===0?v:d/h*y,h===0?v:f/h*y);c.position.addTo(w)}},this._singleSelectorRepulse=(i,r)=>{const s=this.container,o=s.actualOptions.interactivity.modes.repulse;if(!o)return;const a=document.querySelectorAll(i);a.length&&a.forEach(l=>{const u=l,c=s.retina.pixelRatio,d={x:(u.offsetLeft+u.offsetWidth/2)*c,y:(u.offsetTop+u.offsetHeight/2)*c},f=u.offsetWidth/2*c,h=r.type==="circle"?new wt(d.x,d.y,f):new In(u.offsetLeft*c,u.offsetTop*c,u.offsetWidth*c,u.offsetHeight*c),v=o.divs,y=i2(v,u);this._processRepulse(d,f,h,y)})},this._engine=e,n.repulse||(n.repulse={particles:[]}),this.handleClickMode=i=>{const r=this.container.actualOptions,s=r.interactivity.modes.repulse;if(!s||i!=="repulse")return;n.repulse||(n.repulse={particles:[]});const o=n.repulse;o.clicking=!0,o.count=0;for(const a of n.repulse.particles)this.isEnabled(a)&&a.velocity.setTo(a.initialVelocity);o.particles=[],o.finish=!1,setTimeout(()=>{n.destroyed||(o.clicking=!1)},s.duration*1e3)}}clear(){}init(){const e=this.container,n=e.actualOptions.interactivity.modes.repulse;n&&(e.retina.repulseModeDistance=n.distance*e.retina.pixelRatio)}async interact(){const e=this.container,n=e.actualOptions,i=e.interactivity.status===Vr,r=n.interactivity.events,s=r.onHover,o=s.enable,a=s.mode,l=r.onClick,u=l.enable,c=l.mode,d=r.onDiv;i&&o&&He("repulse",a)?this._hoverRepulse():u&&He("repulse",c)?this._clickRepulse():wp("repulse",d,(f,h)=>this._singleSelectorRepulse(f,h))}isEnabled(e){const n=this.container,i=n.actualOptions,r=n.interactivity.mouse,s=((e==null?void 0:e.interactivity)??i.interactivity).events,o=s.onDiv,a=s.onHover,l=s.onClick,u=xp("repulse",o);if(!(u||a.enable&&r.position||l.enable&&r.clickPosition))return!1;const c=a.mode,d=l.mode;return He("repulse",c)||He("repulse",d)||u}loadModeOptions(e,...n){e.repulse||(e.repulse=new j5);for(const i of n)e.repulse.load(i==null?void 0:i.repulse)}reset(){}}async function z5(t,e=!0){await t.addInteractor("externalRepulse",n=>new L5(t,n),e)}class V5{constructor(){this.factor=3,this.radius=200}load(e){e&&(e.factor!==void 0&&(this.factor=e.factor),e.radius!==void 0&&(this.radius=e.radius))}}class B5 extends Jn{constructor(e){super(e)}clear(e,n,i){e.slow.inRange&&!i||(e.slow.factor=1)}init(){const e=this.container,n=e.actualOptions.interactivity.modes.slow;n&&(e.retina.slowModeRadius=n.radius*e.retina.pixelRatio)}async interact(){}isEnabled(e){const n=this.container,i=n.interactivity.mouse,r=((e==null?void 0:e.interactivity)??n.actualOptions.interactivity).events;return r.onHover.enable&&!!i.position&&He("slow",r.onHover.mode)}loadModeOptions(e,...n){e.slow||(e.slow=new V5);for(const i of n)e.slow.load(i==null?void 0:i.slow)}reset(e){e.slow.inRange=!1;const n=this.container,i=n.actualOptions,r=n.interactivity.mouse.position,s=n.retina.slowModeRadius,o=i.interactivity.modes.slow;if(!o||!s||s<0||!r)return;const a=e.getPosition(),l=Qt(r,a),u=l/s,c=o.factor,{slow:d}=e;l>s||(d.inRange=!0,d.factor=u/c)}}async function U5(t,e=!0){await t.addInteractor("externalSlow",n=>new B5(n),e)}const yd=[0,4,2,1],oy=[8,8,4,2];class $5{constructor(e){this.pos=0,this.data=new Uint8ClampedArray(e)}getString(e){const n=this.data.slice(this.pos,this.pos+e);return this.pos+=n.length,n.reduce((i,r)=>i+String.fromCharCode(r),"")}nextByte(){return this.data[this.pos++]}nextTwoBytes(){return this.pos+=2,this.data[this.pos-2]+(this.data[this.pos-1]<<8)}readSubBlocks(){let e="",n=0;do{n=this.data[this.pos++];for(let i=n;--i>=0;e+=String.fromCharCode(this.data[this.pos++]));}while(n!==0);return e}readSubBlocksBin(){let e=0,n=0;for(let r=0;(e=this.data[this.pos+r])!==0;r+=e+1)n+=e;const i=new Uint8Array(n);for(let r=0;(e=this.data[this.pos++])!==0;)for(let s=e;--s>=0;i[r++]=this.data[this.pos++]);return i}skipSubBlocks(){for(;this.data[this.pos]!==0;this.pos+=this.data[this.pos]+1);this.pos++}}function T2(t,e){const n=[];for(let i=0;i<e;i++)n.push({r:t.data[t.pos],g:t.data[t.pos+1],b:t.data[t.pos+2]}),t.pos+=3;return n}async function W5(t,e,n,i){switch(t.nextByte()){case 249:{const r=e.frames[n(!1)];t.pos++;const s=t.nextByte();r.GCreserved=(s&224)>>>5,r.disposalMethod=(s&28)>>>2,r.userInputDelayFlag=(s&2)===2;const o=(s&1)===1;r.delayTime=t.nextTwoBytes()*10;const a=t.nextByte();o&&i(a),t.pos++;break}case 255:{t.pos++;const r={identifier:t.getString(8),authenticationCode:t.getString(3),data:t.readSubBlocksBin()};e.applicationExtensions.push(r);break}case 254:{e.comments.push([n(!1),t.readSubBlocks()]);break}case 1:{if(e.globalColorTable.length===0)throw new EvalError("plain text extension without global color table");t.pos++,e.frames[n(!1)].plainTextData={left:t.nextTwoBytes(),top:t.nextTwoBytes(),width:t.nextTwoBytes(),height:t.nextTwoBytes(),charSize:{width:t.nextTwoBytes(),height:t.nextTwoBytes()},foregroundColor:t.nextByte(),backgroundColor:t.nextByte(),text:t.readSubBlocks()};break}default:t.skipSubBlocks();break}}async function H5(t,e,n,i,r,s){const o=e.frames[i(!0)];o.left=t.nextTwoBytes(),o.top=t.nextTwoBytes(),o.width=t.nextTwoBytes(),o.height=t.nextTwoBytes();const a=t.nextByte(),l=(a&128)===128,u=(a&64)===64;o.sortFlag=(a&32)===32,o.reserved=(a&24)>>>3;const c=1<<(a&7)+1;l&&(o.localColorTable=T2(t,c));const d=g=>{const{r:m,g:x,b}=(l?o.localColorTable:e.globalColorTable)[g];return{r:m,g:x,b,a:g===r(null)?n?~~((m+x+b)/3):0:255}},f=(()=>{try{return new ImageData(o.width,o.height,{colorSpace:"srgb"})}catch(g){if(g instanceof DOMException&&g.name==="IndexSizeError")return null;throw g}})();if(f==null)throw new EvalError("GIF frame size is to large");const h=t.nextByte(),v=t.readSubBlocksBin(),y=1<<h,w=(g,m)=>{const x=g>>>3,b=g&7;return(v[x]+(v[x+1]<<8)+(v[x+2]<<16)&(1<<m)-1<<b)>>>b};if(u){for(let g=0,m=h+1,x=0,b=[[0]],k=0;k<4;k++)if(yd[k]<o.height)for(let E=0,M=0;;){const P=g;if(g=w(x,m),x+=m+1,g===y){m=h+1,b.length=y+2;for(let L=0;L<b.length;L++)b[L]=L<y?[L]:[]}else{g>=b.length?b.push(b[P].concat(b[P][0])):P!==y&&b.push(b[P].concat(b[g][0]));for(let L=0;L<b[g].length;L++){const{r:z,g:ce,b:j,a:ee}=d(b[g][L]);f.data.set([z,ce,j,ee],yd[k]*o.width+oy[k]*M+E%(o.width*4)),E+=4}b.length===1<<m&&m<12&&m++}if(E===o.width*4*(M+1)&&(M++,yd[k]+oy[k]*M>=o.height))break}o.image=f,o.bitmap=await createImageBitmap(f)}else{for(let g=0,m=h+1,x=0,b=[[0]],k=-4;;){const E=g;if(g=w(x,m),x+=m,g===y){m=h+1,b.length=y+2;for(let M=0;M<b.length;M++)b[M]=M<y?[M]:[]}else{if(g===y+1)break;g>=b.length?b.push(b[E].concat(b[E][0])):E!==y&&b.push(b[E].concat(b[g][0]));for(let M=0;M<b[g].length;M++){const{r:P,g:L,b:z,a:ce}=d(b[g][M]);f.data.set([P,L,z,ce],k+=4)}b.length>=1<<m&&m<12&&m++}}o.image=f,o.bitmap=await createImageBitmap(f)}}async function q5(t,e,n,i,r,s){switch(t.nextByte()){case 59:return!0;case 44:await H5(t,e,n,i,r);break;case 33:await W5(t,e,i,r);break;default:throw new EvalError("undefined block found")}return!1}function G5(t){for(const e of t.applicationExtensions)if(e.identifier+e.authenticationCode==="NETSCAPE2.0")return e.data[1]+(e.data[2]<<8);return NaN}async function Q5(t,e,n){n||(n=!1);const i=await fetch(t);if(!i.ok&&i.status===404)throw new EvalError("file not found");const r=await i.arrayBuffer(),s={width:0,height:0,totalTime:0,colorRes:0,pixelAspectRatio:0,frames:[],sortFlag:!1,globalColorTable:[],backgroundImage:new ImageData(1,1,{colorSpace:"srgb"}),comments:[],applicationExtensions:[]},o=new $5(new Uint8ClampedArray(r));if(o.getString(6)!=="GIF89a")throw new Error("not a supported GIF file");s.width=o.nextTwoBytes(),s.height=o.nextTwoBytes();const a=o.nextByte(),l=(a&128)===128;s.colorRes=(a&112)>>>4,s.sortFlag=(a&8)===8;const u=1<<(a&7)+1,c=o.nextByte();s.pixelAspectRatio=o.nextByte(),s.pixelAspectRatio!==0&&(s.pixelAspectRatio=(s.pixelAspectRatio+15)/64),l&&(s.globalColorTable=T2(o,u));const d=(()=>{try{return new ImageData(s.width,s.height,{colorSpace:"srgb"})}catch(b){if(b instanceof DOMException&&b.name==="IndexSizeError")return null;throw b}})();if(d==null)throw new Error("GIF frame size is to large");const{r:f,g:h,b:v}=s.globalColorTable[c];d.data.set(l?[f,h,v,255]:[0,0,0,0]);for(let b=4;b<d.data.length;b*=2)d.data.copyWithin(b,0,b);s.backgroundImage=d;let y=-1,w=!0,g=-1;const m=b=>(b&&(w=!0),y),x=b=>(b!=null&&(g=b),g);try{do w&&(s.frames.push({left:0,top:0,width:0,height:0,disposalMethod:0,image:new ImageData(1,1,{colorSpace:"srgb"}),plainTextData:null,userInputDelayFlag:!1,delayTime:0,sortFlag:!1,localColorTable:[],reserved:0,GCreserved:0}),y++,g=-1,w=!1);while(!await q5(o,s,n,m,x,e));s.frames.length--;for(const b of s.frames){if(b.userInputDelayFlag&&b.delayTime===0){s.totalTime=1/0;break}s.totalTime+=b.delayTime}return s}catch(b){throw b instanceof EvalError?new Error(`error while parsing frame ${y} "${b.message}"`):b}}const K5=/(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d.]+%?\))|currentcolor/gi;function Z5(t,e,n){const{svgData:i}=t;if(!i)return"";const r=da(e,n);if(i.includes("fill"))return i.replace(K5,()=>r);const s=i.indexOf(">");return`${i.substring(0,s)} fill="${r}"${i.substring(s)}`}async function dc(t){return new Promise(e=>{t.loading=!0;const n=new Image;t.element=n,n.addEventListener("load",()=>{t.loading=!1,e()}),n.addEventListener("error",()=>{t.element=void 0,t.error=!0,t.loading=!1,Ur().error(`${pn} loading image: ${t.source}`),e()}),n.src=t.source})}async function X5(t){if(t.type!=="gif"){await dc(t);return}t.loading=!0;try{t.gifData=await Q5(t.source),t.gifLoopCount=G5(t.gifData)??0,t.gifLoopCount===0&&(t.gifLoopCount=1/0)}catch{t.error=!0}t.loading=!1}async function Y5(t){if(t.type!=="svg"){await dc(t);return}t.loading=!0;const e=await fetch(t.source);e.ok?t.svgData=await e.text():(Ur().error(`${pn} Image not found`),t.error=!0),t.loading=!1}function J5(t,e,n,i){var o;const r=Z5(t,n,((o=i.opacity)==null?void 0:o.value)??1),s={color:n,gif:e.gif,data:{...t,svgData:r},loaded:!1,ratio:e.width/e.height,replaceColor:e.replaceColor??e.replace_color,source:e.src};return new Promise(a=>{const l=new Blob([r],{type:"image/svg+xml"}),u=URL||window.URL||window.webkitURL||window,c=u.createObjectURL(l),d=new Image;d.addEventListener("load",()=>{s.loaded=!0,s.element=d,a(s),u.revokeObjectURL(c)}),d.addEventListener("error",async()=>{u.revokeObjectURL(c);const f={...t,error:!1,loading:!0};await dc(f),s.loaded=!0,s.element=f.element,a(s)}),d.src=c})}class eF{constructor(e){this.loadImageShape=async n=>{if(!this._engine.loadImage)throw new Error(`${pn} image shape not initialized`);await this._engine.loadImage({gif:n.gif,name:n.name,replaceColor:n.replaceColor??n.replace_color??!1,src:n.src})},this._engine=e}addImage(e){this._engine.images||(this._engine.images=[]),this._engine.images.push(e)}draw(e,n,i,r,s){const o=n.image,a=o==null?void 0:o.element;if(o){if(e.globalAlpha=r,o.gif&&o.gifData){const l=new OffscreenCanvas(o.gifData.width,o.gifData.height),u=l.getContext("2d");if(!u)throw new Error("could not create offscreen canvas context");u.imageSmoothingQuality="low",u.imageSmoothingEnabled=!1,u.clearRect(0,0,l.width,l.height),n.gifLoopCount===void 0&&(n.gifLoopCount=o.gifLoopCount??0);let c=n.gifFrame??0;const d={x:-o.gifData.width*.5,y:-o.gifData.height*.5},f=o.gifData.frames[c];if(n.gifTime===void 0&&(n.gifTime=0),!f.bitmap)return;switch(e.scale(i/o.gifData.width,i/o.gifData.height),f.disposalMethod){case 4:case 5:case 6:case 7:case 0:u.drawImage(f.bitmap,f.left,f.top),e.drawImage(l,d.x,d.y),u.clearRect(0,0,l.width,l.height);break;case 1:u.drawImage(f.bitmap,f.left,f.top),e.drawImage(l,d.x,d.y);break;case 2:u.drawImage(f.bitmap,f.left,f.top),e.drawImage(l,d.x,d.y),u.clearRect(0,0,l.width,l.height),o.gifData.globalColorTable.length===0?u.putImageData(o.gifData.frames[0].image,d.x+f.left,d.y+f.top):u.putImageData(o.gifData.backgroundImage,d.x,d.y);break;case 3:{const h=u.getImageData(0,0,l.width,l.height);u.drawImage(f.bitmap,f.left,f.top),e.drawImage(l,d.x,d.y),u.clearRect(0,0,l.width,l.height),u.putImageData(h,0,0)}break}if(n.gifTime+=s.value,n.gifTime>f.delayTime){if(n.gifTime-=f.delayTime,++c>=o.gifData.frames.length){if(--n.gifLoopCount<=0)return;c=0,u.clearRect(0,0,l.width,l.height)}n.gifFrame=c}e.scale(o.gifData.width/i,o.gifData.height/i)}else if(a){const l=o.ratio,u={x:-i,y:-i};e.drawImage(a,u.x,u.y,i*2,i*2/l)}e.globalAlpha=1}}getSidesCount(){return 12}async init(e){const n=e.actualOptions;if(!(!n.preload||!this._engine.loadImage))for(const i of n.preload)await this._engine.loadImage(i)}loadShape(e){if(e.shape!=="image"&&e.shape!=="images")return;this._engine.images||(this._engine.images=[]);const n=e.shapeData;this._engine.images.find(r=>r.name===n.name||r.source===n.src)||this.loadImageShape(n).then(()=>{this.loadShape(e)})}particleInit(e,n){if(n.shape!=="image"&&n.shape!=="images")return;this._engine.images||(this._engine.images=[]);const i=this._engine.images,r=n.shapeData,s=n.getFillColor(),o=i.find(l=>l.name===r.name||l.source===r.src);if(!o)return;const a=r.replaceColor??r.replace_color??o.replaceColor;if(o.loading){setTimeout(()=>{this.particleInit(e,n)});return}(async()=>{let l;o.svgData&&s?l=await J5(o,r,s,n):l={color:s,data:o,element:o.element,gif:o.gif,gifData:o.gifData,gifLoopCount:o.gifLoopCount,loaded:!0,ratio:r.width&&r.height?r.width/r.height:o.ratio??1,replaceColor:a,source:r.src},l.ratio||(l.ratio=1);const u=r.fill??n.fill,c=r.close??n.close,d={image:l,fill:u,close:c};n.image=d.image,n.fill=d.fill,n.close=d.close})()}}class tF{constructor(){this.src="",this.gif=!1}load(e){e&&(e.gif!==void 0&&(this.gif=e.gif),e.height!==void 0&&(this.height=e.height),e.name!==void 0&&(this.name=e.name),e.replaceColor!==void 0&&(this.replaceColor=e.replaceColor),e.src!==void 0&&(this.src=e.src),e.width!==void 0&&(this.width=e.width))}}class nF{constructor(e){this.id="imagePreloader",this._engine=e}getPlugin(){return{}}loadOptions(e,n){if(!n||!n.preload)return;e.preload||(e.preload=[]);const i=e.preload;for(const r of n.preload){const s=i.find(o=>o.name===r.name||o.src===r.src);if(s)s.load(r);else{const o=new tF;o.load(r),i.push(o)}}}needsPlugin(){return!0}}function iF(t){t.loadImage||(t.loadImage=async e=>{if(!e.name&&!e.src)throw new Error(`${pn} no image source provided`);if(t.images||(t.images=[]),!t.images.find(n=>n.name===e.name||n.source===e.src))try{const n={gif:e.gif??!1,name:e.name??e.src,source:e.src,type:e.src.substring(e.src.length-3),error:!1,loading:!0,replaceColor:e.replaceColor,ratio:e.width&&e.height?e.width/e.height:void 0};t.images.push(n),await(e.gif?X5:e.replaceColor?Y5:dc)(n)}catch{throw new Error(`${pn} ${e.name??e.src} not found`)}})}async function rF(t,e=!0){iF(t);const n=new nF(t);await t.addPlugin(n,e),await t.addShape(["image","images"],new eF(t),e)}class sF extends cr{constructor(){super(),this.sync=!1}load(e){e&&(super.load(e),e.sync!==void 0&&(this.sync=e.sync))}}class oF extends cr{constructor(){super(),this.random.minimumValue=1e-4,this.sync=!1}load(e){e&&(super.load(e),e.sync!==void 0&&(this.sync=e.sync))}}class aF{constructor(){this.count=0,this.delay=new sF,this.duration=new oF}load(e){e&&(e.count!==void 0&&(this.count=e.count),this.delay.load(e.delay),this.duration.load(e.duration))}}class lF{constructor(e){this.container=e}init(e){const n=this.container,i=e.options,r=i.life;r&&(e.life={delay:n.retina.reduceFactor?X(r.delay.value)*(r.delay.sync?1:Ee())/n.retina.reduceFactor*1e3:0,delayTime:0,duration:n.retina.reduceFactor?X(r.duration.value)*(r.duration.sync?1:Ee())/n.retina.reduceFactor*1e3:0,time:0,count:r.count},e.life.duration<=0&&(e.life.duration=-1),e.life.count<=0&&(e.life.count=-1),e.life&&(e.spawning=e.life.delay>0))}isEnabled(e){return!e.destroyed}loadOptions(e,...n){e.life||(e.life=new aF);for(const i of n)e.life.load(i==null?void 0:i.life)}update(e,n){if(!this.isEnabled(e)||!e.life)return;const i=e.life;let r=!1;if(e.spawning)if(i.delayTime+=n.value,i.delayTime>=e.life.delay)r=!0,e.spawning=!1,i.delayTime=0,i.time=0;else return;if(i.duration===-1||e.spawning||(r?i.time=0:i.time+=n.value,i.time<i.duration))return;if(i.time=0,e.life.count>0&&e.life.count--,e.life.count===0){e.destroy();return}const s=this.container.canvas.size,o=le(0,s.width),a=le(0,s.width);e.position.x=jt(o),e.position.y=jt(a),e.spawning=!0,i.delayTime=0,i.time=0,e.reset();const l=e.options.life;l&&(i.delay=X(l.delay.value)*1e3,i.duration=X(l.duration.value)*1e3)}}async function uF(t,e=!0){await t.addParticleUpdater("life",n=>new lF(n),e)}class cF{draw(e,n,i){const r=n.shapeData;e.moveTo(-i/2,0),e.lineTo(i/2,0),e.lineCap=(r==null?void 0:r.cap)??"butt"}getSidesCount(){return 1}}async function dF(t,e=!0){await t.addShape("line",new cF,e)}class fF{init(){}isEnabled(e){return!Hs()&&!e.destroyed&&e.container.actualOptions.interactivity.events.onHover.parallax.enable}move(e){const n=e.container,i=n.actualOptions,r=i.interactivity.events.onHover.parallax;if(Hs()||!r.enable)return;const s=r.force,o=n.interactivity.mouse.position;if(!o)return;const a=n.canvas.size,l={x:a.width/2,y:a.height/2},u=r.smooth,c=e.getRadius()/s,d={x:(o.x-l.x)*c,y:(o.y-l.y)*c},{offset:f}=e;f.x+=(d.x-f.x)/u,f.y+=(d.y-f.y)/u}}async function hF(t,e=!0){await t.addMover("parallax",()=>new fF,e)}class pF extends Sp{constructor(e){super(e)}clear(){}init(){}async interact(e){const n=this.container,i=e.retina.attractDistance??n.retina.attractDistance,r=e.getPosition(),s=n.particles.quadTree.queryCircle(r,i);for(const o of s){if(e===o||!o.options.move.attract.enable||o.destroyed||o.spawning)continue;const a=o.getPosition(),{dx:l,dy:u}=Dt(r,a),c=e.options.move.attract.rotate,d=l/(c.x*1e3),f=u/(c.y*1e3),h=o.size.value/e.size.value,v=1/h;e.velocity.x-=d*h,e.velocity.y-=f*h,o.velocity.x+=d*v,o.velocity.y+=f*v}}isEnabled(e){return e.options.move.attract.enable}reset(){}}async function mF(t,e=!0){await t.addInteractor("particlesAttract",n=>new pF(n),e)}function ay(t,e,n,i,r,s){const o=Fn(t.options.collisions.absorb.speed*r.factor/10,0,i);t.size.value+=o/2,n.size.value-=o,i<=s&&(n.size.value=0,n.destroy())}function gF(t,e,n,i){const r=t.getRadius(),s=e.getRadius();r===void 0&&s!==void 0?t.destroy():r!==void 0&&s===void 0?e.destroy():r!==void 0&&s!==void 0&&(r>=s?ay(t,r,e,s,n,i):ay(e,s,t,r,n,i))}const ly=t=>{t.collisionMaxSpeed===void 0&&(t.collisionMaxSpeed=X(t.options.collisions.maxSpeed)),t.velocity.length>t.collisionMaxSpeed&&(t.velocity.length=t.collisionMaxSpeed)};function P2(t,e){r2(Bf(t),Bf(e)),ly(t),ly(e)}function yF(t,e){!t.unbreakable&&!e.unbreakable&&P2(t,e),t.getRadius()===void 0&&e.getRadius()!==void 0?t.destroy():t.getRadius()!==void 0&&e.getRadius()===void 0?e.destroy():t.getRadius()!==void 0&&e.getRadius()!==void 0&&(t.getRadius()>=e.getRadius()?e:t).destroy()}function vF(t,e,n,i){switch(t.options.collisions.mode){case"absorb":{gF(t,e,n,i);break}case"bounce":{P2(t,e);break}case"destroy":{yF(t,e);break}}}class xF extends Sp{constructor(e){super(e)}clear(){}init(){}async interact(e,n){if(e.destroyed||e.spawning)return;const i=this.container,r=e.getPosition(),s=e.getRadius(),o=i.particles.quadTree.queryCircle(r,s*2);for(const a of o){if(e===a||!a.options.collisions.enable||e.options.collisions.mode!==a.options.collisions.mode||a.destroyed||a.spawning)continue;const l=a.getPosition(),u=a.getRadius();if(Math.abs(Math.round(r.z)-Math.round(l.z))>s+u)continue;const c=Qt(r,l),d=s+u;c>d||vF(e,a,n,i.retina.pixelRatio)}}isEnabled(e){return e.options.collisions.enable}reset(){}}async function wF(t,e=!0){await t.addInteractor("particlesCollisions",n=>new xF(n),e)}class bF extends wt{constructor(e,n,i,r){super(e,n,i),this.canvasSize=r,this.canvasSize={...r}}contains(e){const{width:n,height:i}=this.canvasSize,{x:r,y:s}=e;return super.contains(e)||super.contains({x:r-n,y:s})||super.contains({x:r-n,y:s-i})||super.contains({x:r,y:s-i})}intersects(e){if(super.intersects(e))return!0;const n=e,i=e,r={x:e.position.x-this.canvasSize.width,y:e.position.y-this.canvasSize.height};if(i.radius!==void 0){const s=new wt(r.x,r.y,i.radius*2);return super.intersects(s)}else if(n.size!==void 0){const s=new In(r.x,r.y,n.size.width*2,n.size.height*2);return super.intersects(s)}return!1}}class SF{constructor(){this.blur=5,this.color=new ct,this.color.value="#000",this.enable=!1}load(e){e&&(e.blur!==void 0&&(this.blur=e.blur),this.color=ct.create(this.color,e.color),e.enable!==void 0&&(this.enable=e.enable))}}class _F{constructor(){this.enable=!1,this.frequency=1}load(e){e&&(e.color!==void 0&&(this.color=ct.create(this.color,e.color)),e.enable!==void 0&&(this.enable=e.enable),e.frequency!==void 0&&(this.frequency=e.frequency),e.opacity!==void 0&&(this.opacity=e.opacity))}}class kF{constructor(){this.blink=!1,this.color=new ct,this.color.value="#fff",this.consent=!1,this.distance=100,this.enable=!1,this.frequency=1,this.opacity=1,this.shadow=new SF,this.triangles=new _F,this.width=1,this.warp=!1}load(e){e&&(e.id!==void 0&&(this.id=e.id),e.blink!==void 0&&(this.blink=e.blink),this.color=ct.create(this.color,e.color),e.consent!==void 0&&(this.consent=e.consent),e.distance!==void 0&&(this.distance=e.distance),e.enable!==void 0&&(this.enable=e.enable),e.frequency!==void 0&&(this.frequency=e.frequency),e.opacity!==void 0&&(this.opacity=e.opacity),this.shadow.load(e.shadow),this.triangles.load(e.triangles),e.width!==void 0&&(this.width=e.width),e.warp!==void 0&&(this.warp=e.warp))}}function CF(t,e,n,i,r){const{dx:s,dy:o,distance:a}=Dt(t,e);if(!r||a<=n)return a;const l={x:Math.abs(s),y:Math.abs(o)},u={x:Math.min(l.x,i.width-l.x),y:Math.min(l.y,i.height-l.y)};return Math.sqrt(u.x**2+u.y**2)}class TF extends Sp{constructor(e){super(e),this._setColor=n=>{if(!n.options.links)return;const i=this.linkContainer,r=n.options.links;let s=r.id===void 0?i.particles.linksColor:i.particles.linksColors.get(r.id);if(s)return;const o=r.color;s=f2(o,r.blink,r.consent),r.id===void 0?i.particles.linksColor=s:i.particles.linksColors.set(r.id,s)},this.linkContainer=e}clear(){}init(){this.linkContainer.particles.linksColor=void 0,this.linkContainer.particles.linksColors=new Map}async interact(e){if(!e.options.links)return;e.links=[];const n=e.getPosition(),i=this.container,r=i.canvas.size;if(n.x<0||n.y<0||n.x>r.width||n.y>r.height)return;const s=e.options.links,o=s.opacity,a=e.retina.linksDistance??0,l=s.warp,u=l?new bF(n.x,n.y,a,r):new wt(n.x,n.y,a),c=i.particles.quadTree.query(u);for(const d of c){const f=d.options.links;if(e===d||!(f!=null&&f.enable)||s.id!==f.id||d.spawning||d.destroyed||!d.links||e.links.some(w=>w.destination===d)||d.links.some(w=>w.destination===e))continue;const h=d.getPosition();if(h.x<0||h.y<0||h.x>r.width||h.y>r.height)continue;const v=CF(n,h,a,r,l&&f.warp);if(v>a)continue;const y=(1-v/a)*o;this._setColor(e),e.links.push({destination:d,opacity:y})}}isEnabled(e){var n;return!!((n=e.options.links)!=null&&n.enable)}loadParticlesOptions(e,...n){e.links||(e.links=new kF);for(const i of n)e.links.load((i==null?void 0:i.links)??(i==null?void 0:i.lineLinked)??(i==null?void 0:i.line_linked))}reset(){}}async function PF(t,e=!0){await t.addInteractor("particlesLinks",n=>new TF(n),e)}function EF(t){let e=!1;const{begin:n,end:i,maxDistance:r,context:s,canvasSize:o,width:a,backgroundMask:l,colorLine:u,opacity:c,links:d}=t;if(Qt(n,i)<=r)Vo(s,n,i),e=!0;else if(d.warp){let h,v;const y={x:i.x-o.width,y:i.y},w=Dt(n,y);if(w.distance<=r){const g=n.y-w.dy/w.dx*n.x;h={x:0,y:g},v={x:o.width,y:g}}else{const g={x:i.x,y:i.y-o.height},m=Dt(n,g);if(m.distance<=r){const b=-(n.y-m.dy/m.dx*n.x)/(m.dy/m.dx);h={x:b,y:0},v={x:b,y:o.height}}else{const x={x:i.x-o.width,y:i.y-o.height},b=Dt(n,x);if(b.distance<=r){const k=n.y-b.dy/b.dx*n.x;h={x:-k/(b.dy/b.dx),y:k},v={x:h.x+o.width,y:h.y+o.height}}}}h&&v&&(Vo(s,n,h),Vo(s,i,v),e=!0)}if(!e)return;s.lineWidth=a,l.enable&&(s.globalCompositeOperation=l.composite),s.strokeStyle=fi(u,c);const{shadow:f}=d;if(f.enable){const h=Nn(f.color);h&&(s.shadowBlur=f.blur,s.shadowColor=fi(h))}s.stroke()}function MF(t){const{context:e,pos1:n,pos2:i,pos3:r,backgroundMask:s,colorTriangle:o,opacityTriangle:a}=t;u3(e,n,i,r),s.enable&&(e.globalCompositeOperation=s.composite),e.fillStyle=fi(o,a),e.fill()}function DF(t){return t.sort((e,n)=>e-n),t.join("_")}function uy(t,e){const n=DF(t.map(r=>r.id));let i=e.get(n);return i===void 0&&(i=Ee(),e.set(n,i)),i}class NF{constructor(e){this.container=e,this._drawLinkLine=(n,i)=>{const r=n.options.links;if(!(r!=null&&r.enable))return;const s=this.container,o=s.actualOptions,a=i.destination,l=n.getPosition(),u=a.getPosition();let c=i.opacity;s.canvas.draw(d=>{var g;let f;const h=(g=n.options.twinkle)==null?void 0:g.lines;if(h!=null&&h.enable){const m=h.frequency,x=Nn(h.color);Ee()<m&&x&&(f=x,c=X(h.opacity))}if(!f){const m=r.id!==void 0?s.particles.linksColors.get(r.id):s.particles.linksColor;f=Uf(n,a,m)}if(!f)return;const v=n.retina.linksWidth??0,y=n.retina.linksDistance??0,{backgroundMask:w}=o;EF({context:d,width:v,begin:l,end:u,maxDistance:y,canvasSize:s.canvas.size,links:r,backgroundMask:w,colorLine:f,opacity:c})})},this._drawLinkTriangle=(n,i,r)=>{const s=n.options.links;if(!(s!=null&&s.enable))return;const o=s.triangles;if(!o.enable)return;const a=this.container,l=a.actualOptions,u=i.destination,c=r.destination,d=o.opacity??(i.opacity+r.opacity)/2;d<=0||a.canvas.draw(f=>{const h=n.getPosition(),v=u.getPosition(),y=c.getPosition(),w=n.retina.linksDistance??0;if(Qt(h,v)>w||Qt(y,v)>w||Qt(y,h)>w)return;let g=Nn(o.color);if(!g){const m=s.id!==void 0?a.particles.linksColors.get(s.id):a.particles.linksColor;g=Uf(n,u,m)}g&&MF({context:f,pos1:h,pos2:v,pos3:y,backgroundMask:l.backgroundMask,colorTriangle:g,opacityTriangle:d})})},this._drawTriangles=(n,i,r,s)=>{var l,u,c;const o=r.destination;if(!((l=n.links)!=null&&l.triangles.enable&&((u=o.options.links)!=null&&u.triangles.enable)))return;const a=(c=o.links)==null?void 0:c.filter(d=>{const f=this._getLinkFrequency(o,d.destination);return o.options.links&&f<=o.options.links.frequency&&s.findIndex(h=>h.destination===d.destination)>=0});if(a!=null&&a.length)for(const d of a){const f=d.destination;this._getTriangleFrequency(i,o,f)>n.links.triangles.frequency||this._drawLinkTriangle(i,r,d)}},this._getLinkFrequency=(n,i)=>uy([n,i],this._freqs.links),this._getTriangleFrequency=(n,i,r)=>uy([n,i,r],this._freqs.triangles),this._freqs={links:new Map,triangles:new Map}}drawParticle(e,n){const{links:i,options:r}=n;if(!i||i.length<=0)return;const s=i.filter(o=>r.links&&this._getLinkFrequency(n,o.destination)<=r.links.frequency);for(const o of s)this._drawTriangles(r,n,o,s),o.opacity>0&&(n.retina.linksWidth??0)>0&&this._drawLinkLine(n,o)}async init(){this._freqs.links=new Map,this._freqs.triangles=new Map}particleCreated(e){if(e.links=[],!e.options.links)return;const n=this.container.retina.pixelRatio,{retina:i}=e,{distance:r,width:s}=e.options.links;i.linksDistance=r*n,i.linksWidth=s*n}particleDestroyed(e){e.links=[]}}class AF{constructor(){this.id="links"}getPlugin(e){return new NF(e)}loadOptions(){}needsPlugin(){return!0}}async function RF(t,e=!0){const n=new AF;await t.addPlugin(n,e)}async function FF(t,e=!0){await PF(t,e),await RF(t,e)}class E2{draw(e,n,i){const r=this.getCenter(n,i),s=this.getSidesData(n,i),o=s.count.numerator*s.count.denominator,a=s.count.numerator/s.count.denominator,l=180*(a-2)/a,u=Math.PI-Math.PI*l/180;if(e){e.beginPath(),e.translate(r.x,r.y),e.moveTo(0,0);for(let c=0;c<o;c++)e.lineTo(s.length,0),e.translate(s.length,0),e.rotate(u)}}getSidesCount(e){const n=e.shapeData;return Math.round(X((n==null?void 0:n.sides)??(n==null?void 0:n.nb_sides)??5))}}class IF extends E2{getCenter(e,n){return{x:-n/(e.sides/3.5),y:-n/(2.66/3.5)}}getSidesData(e,n){const i=e.sides;return{count:{denominator:1,numerator:i},length:n*2.66/(i/3)}}}class OF extends E2{getCenter(e,n){return{x:-n,y:n/1.66}}getSidesCount(){return 3}getSidesData(e,n){return{count:{denominator:2,numerator:3},length:n*2}}}async function jF(t,e=!0){await t.addShape("polygon",new IF,e)}async function LF(t,e=!0){await t.addShape("triangle",new OF,e)}async function zF(t,e=!0){await jF(t,e),await LF(t,e)}class VF{constructor(){this.enable=!1,this.speed=0,this.decay=0,this.sync=!1}load(e){e&&(e.enable!==void 0&&(this.enable=e.enable),e.speed!==void 0&&(this.speed=le(e.speed)),e.decay!==void 0&&(this.decay=le(e.decay)),e.sync!==void 0&&(this.sync=e.sync))}}class BF extends cr{constructor(){super(),this.animation=new VF,this.direction="clockwise",this.path=!1,this.value=0}load(e){e&&(super.load(e),e.direction!==void 0&&(this.direction=e.direction),this.animation.load(e.animation),e.path!==void 0&&(this.path=e.path))}}function UF(t,e){const n=t.rotate,i=t.options.rotate;if(!n||!i)return;const r=i.animation,s=(n.velocity??0)*e.factor,o=2*Math.PI,a=n.decay??1;if(r.enable){switch(n.status){case"increasing":n.value+=s,n.value>o&&(n.value-=o);break;case"decreasing":default:n.value-=s,n.value<0&&(n.value+=o);break}n.velocity&&a!==1&&(n.velocity*=a)}}class $F{constructor(e){this.container=e}init(e){const n=e.options.rotate;if(!n)return;e.rotate={enable:n.animation.enable,value:X(n.value)*Math.PI/180},e.pathRotation=n.path;let i=n.direction;switch(i==="random"&&(i=Math.floor(Ee()*2)>0?"counter-clockwise":"clockwise"),i){case"counter-clockwise":case"counterClockwise":e.rotate.status="decreasing";break;case"clockwise":e.rotate.status="increasing";break}const r=n.animation;r.enable&&(e.rotate.decay=1-X(r.decay),e.rotate.velocity=X(r.speed)/360*this.container.retina.reduceFactor,r.sync||(e.rotate.velocity*=Ee())),e.rotation=e.rotate.value}isEnabled(e){const n=e.options.rotate;return n?!e.destroyed&&!e.spawning&&n.animation.enable&&!n.path:!1}loadOptions(e,...n){e.rotate||(e.rotate=new BF);for(const i of n)e.rotate.load(i==null?void 0:i.rotate)}update(e,n){var i;this.isEnabled(e)&&(UF(e,n),e.rotation=((i=e.rotate)==null?void 0:i.value)??0)}}async function WF(t,e=!0){await t.addParticleUpdater("rotate",n=>new $F(n),e)}const HF=Math.sqrt(2);class qF{draw(e,n,i){const r=i/HF,s=r*2;e.rect(-r,-r,s,s)}getSidesCount(){return 4}}async function GF(t,e=!0){await t.addShape(["edge","square"],new qF,e)}class QF{draw(e,n,i){const r=n.sides,s=n.starInset??2;e.moveTo(0,0-i);for(let o=0;o<r;o++)e.rotate(Math.PI/r),e.lineTo(0,0-i*s),e.rotate(Math.PI/r),e.lineTo(0,0-i)}getSidesCount(e){const n=e.shapeData;return Math.round(X((n==null?void 0:n.sides)??(n==null?void 0:n.nb_sides)??5))}particleInit(e,n){const i=n.shapeData,r=X((i==null?void 0:i.inset)??2);n.starInset=r}}async function KF(t,e=!0){await t.addShape("star",new QF,e)}function vd(t,e,n,i,r){if(!e||!n.enable||(e.maxLoops??0)>0&&(e.loops??0)>(e.maxLoops??0)||(e.time||(e.time=0),(e.delayTime??0)>0&&e.time<(e.delayTime??0)&&(e.time+=t.value),(e.delayTime??0)>0&&e.time<(e.delayTime??0)))return;const s=jt(n.offset),o=(e.velocity??0)*t.factor+s*3.6,a=e.decay??1;!r||e.status==="increasing"?(e.value+=o,e.value>i&&(e.loops||(e.loops=0),e.loops++,r&&(e.status="decreasing",e.value-=e.value%i))):(e.value-=o,e.value<0&&(e.loops||(e.loops=0),e.loops++,e.status="increasing",e.value+=e.value)),e.velocity&&a!==1&&(e.velocity*=a),e.value>i&&(e.value%=i)}function ZF(t,e){if(!t.strokeColor||!t.strokeAnimation)return;const{h:n,s:i,l:r}=t.strokeColor,{h:s,s:o,l:a}=t.strokeAnimation;n&&vd(e,n,s,360,!1),i&&vd(e,i,o,100,!0),r&&vd(e,r,a,100,!0)}class XF{constructor(e){this.container=e}init(e){var o;const n=this.container,i=e.options,r=di(i.stroke,e.id,i.reduceDuplicates);e.strokeWidth=X(r.width)*n.retina.pixelRatio,e.strokeOpacity=X(r.opacity??1),e.strokeAnimation=(o=r.color)==null?void 0:o.animation;const s=ca(r.color)??e.getFillColor();s&&(e.strokeColor=h2(s,e.strokeAnimation,n.retina.reduceFactor))}isEnabled(e){const n=e.strokeAnimation,{strokeColor:i}=e;return!e.destroyed&&!e.spawning&&!!n&&((i==null?void 0:i.h.value)!==void 0&&i.h.enable||(i==null?void 0:i.s.value)!==void 0&&i.s.enable||(i==null?void 0:i.l.value)!==void 0&&i.l.enable)}update(e,n){this.isEnabled(e)&&ZF(e,n)}}async function YF(t,e=!0){await t.addParticleUpdater("strokeColor",n=>new XF(n),e)}const Fl=["text","character","char"];class JF{draw(e,n,i,r){const s=n.shapeData;if(s===void 0)return;const o=s.value;if(o===void 0)return;n.text===void 0&&(n.text=di(o,n.randomIndexData));const a=n.text,l=s.style??"",u=s.weight??"400",c=Math.round(i)*2,d=s.font??"Verdana",f=n.fill,h=a.length*i/2;e.font=`${l} ${u} ${c}px "${d}"`;const v={x:-h,y:i/2};e.globalAlpha=r,f?e.fillText(a,v.x,v.y):e.strokeText(a,v.x,v.y),e.globalAlpha=1}getSidesCount(){return 12}async init(e){const n=e.actualOptions;if(Fl.find(i=>He(i,n.particles.shape.type))){const i=Fl.map(s=>n.particles.shape.options[s]).find(s=>!!s),r=[];it(i,s=>{r.push(e3(s.font,s.weight))}),await Promise.all(r)}}particleInit(e,n){if(!n.shape||!Fl.includes(n.shape))return;const i=n.shapeData;if(i===void 0)return;const r=i.value;r!==void 0&&(n.text=di(r,n.randomIndexData))}}async function eI(t,e=!0){await t.addShape(Fl,new JF,e)}async function tI(t,e=!0){TR(t),await hF(t,!1),await o5(t,!1),await u5(t,!1),await h5(t,!1),await b5(t,!1),await P5(t,!1),await M5(t,!1),await A5(t,!1),await I5(t,!1),await z5(t,!1),await U5(t,!1),await mF(t,!1),await wF(t,!1),await FF(t,!1),await i5(),await rF(t,!1),await dF(t,!1),await zF(t,!1),await GF(t,!1),await KF(t,!1),await eI(t,!1),await uF(t,!1),await WF(t,!1),await YF(t,!1),await n5(t,e)}const nI=()=>{const t=S.useCallback(async n=>{await tI(n)},[]),e=S.useCallback(async n=>{console.log("Particles container loaded",n)},[]);return p.jsx(S2,{id:"tsparticles",init:t,loaded:e,className:"fixed inset-0 -z-10",options:{background:{color:{value:"#000000"}},fullScreen:{enable:!0,zIndex:-1},fpsLimit:60,interactivity:{events:{onClick:{enable:!0,mode:"push"},onHover:{enable:!0,mode:"repulse",parallax:{enable:!0,force:8,smooth:10}},resize:!0},modes:{push:{quantity:3},repulse:{distance:120,duration:.5},grab:{distance:140,links:{opacity:.3}}}},particles:{color:{value:["#FFD700","#FFF2AC","#B8860B","#FFDF00","#DAA520"]},links:{color:"#FFD700",distance:170,enable:!0,opacity:.3,width:1.2,triangles:{enable:!0,frequency:.05,opacity:.1}},move:{direction:"none",enable:!0,outModes:{default:"bounce"},random:!0,speed:.8,straight:!1,trail:{enable:!0,length:3,fillColor:"#000000"}},number:{density:{enable:!0,area:800},value:90},opacity:{value:.4,animation:{enable:!0,speed:.3,minimumValue:.2,sync:!1}},size:{value:{min:1.2,max:4.5},animation:{enable:!0,speed:2,minimumValue:.6,sync:!1}},shape:{type:["circle","triangle","star"],options:{star:{sides:5}}},twinkle:{particles:{enable:!0,frequency:.05,opacity:1}}},detectRetina:!0,smooth:!0}})},M2=S.forwardRef(({className:t,...e},n)=>p.jsx("div",{ref:n,className:mn("rounded-lg border bg-card text-card-foreground shadow-sm",t),...e}));M2.displayName="Card";const iI=S.forwardRef(({className:t,...e},n)=>p.jsx("div",{ref:n,className:mn("flex flex-col space-y-1.5 p-6",t),...e}));iI.displayName="CardHeader";const rI=S.forwardRef(({className:t,...e},n)=>p.jsx("h3",{ref:n,className:mn("text-2xl font-semibold leading-none tracking-tight",t),...e}));rI.displayName="CardTitle";const sI=S.forwardRef(({className:t,...e},n)=>p.jsx("p",{ref:n,className:mn("text-sm text-muted-foreground",t),...e}));sI.displayName="CardDescription";const D2=S.forwardRef(({className:t,...e},n)=>p.jsx("div",{ref:n,className:mn("p-6 pt-0",t),...e}));D2.displayName="CardContent";const oI=S.forwardRef(({className:t,...e},n)=>p.jsx("div",{ref:n,className:mn("flex items-center p-6 pt-0",t),...e}));oI.displayName="CardFooter";function aI(){return p.jsx("div",{className:"min-h-screen w-full flex items-center justify-center bg-gray-50",children:p.jsx(M2,{className:"w-full max-w-md mx-4",children:p.jsxs(D2,{className:"pt-6",children:[p.jsxs("div",{className:"flex mb-4 gap-2",children:[p.jsx(JN,{className:"h-8 w-8 text-red-500"}),p.jsx("h1",{className:"text-2xl font-bold text-gray-900",children:"404 Page Not Found"})]}),p.jsx("p",{className:"mt-4 text-sm text-gray-600",children:"Did you forget to add the page to the router?"})]})})})}function lI(t){if(typeof Proxy>"u")return t;const e=new Map,n=(...i)=>t(...i);return new Proxy(n,{get:(i,r)=>r==="create"?t:(e.has(r)||e.set(r,t(r)),e.get(r))})}function fc(t){return t!==null&&typeof t=="object"&&typeof t.start=="function"}const $f=t=>Array.isArray(t);function N2(t,e){if(!Array.isArray(e))return!1;const n=e.length;if(n!==t.length)return!1;for(let i=0;i<n;i++)if(e[i]!==t[i])return!1;return!0}function ha(t){return typeof t=="string"||Array.isArray(t)}function cy(t){const e=[{},{}];return t==null||t.values.forEach((n,i)=>{e[0][i]=n.get(),e[1][i]=n.getVelocity()}),e}function _p(t,e,n,i){if(typeof e=="function"){const[r,s]=cy(i);e=e(n!==void 0?n:t.custom,r,s)}if(typeof e=="string"&&(e=t.variants&&t.variants[e]),typeof e=="function"){const[r,s]=cy(i);e=e(n!==void 0?n:t.custom,r,s)}return e}function hc(t,e,n){const i=t.getProps();return _p(i,e,n!==void 0?n:i.custom,t)}const kp=["animate","whileInView","whileFocus","whileHover","whileTap","whileDrag","exit"],Cp=["initial",...kp],Va=["transformPerspective","x","y","z","translateX","translateY","translateZ","scale","scaleX","scaleY","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY"],Gr=new Set(Va),hi=t=>t*1e3,pi=t=>t/1e3,uI={type:"spring",stiffness:500,damping:25,restSpeed:10},cI=t=>({type:"spring",stiffness:550,damping:t===0?2*Math.sqrt(550):30,restSpeed:10}),dI={type:"keyframes",duration:.8},fI={type:"keyframes",ease:[.25,.1,.35,1],duration:.3},hI=(t,{keyframes:e})=>e.length>2?dI:Gr.has(t)?t.startsWith("scale")?cI(e[1]):uI:fI;function Tp(t,e){return t?t[e]||t.default||t:void 0}const pI={skipAnimations:!1,useManualTiming:!1},mI=t=>t!==null;function pc(t,{repeat:e,repeatType:n="loop"},i){const r=t.filter(mI),s=e&&n!=="loop"&&e%2===1?0:r.length-1;return!s||i===void 0?r[s]:i}const bt=t=>t;let Wf=bt;function gI(t){let e=new Set,n=new Set,i=!1,r=!1;const s=new WeakSet;let o={delta:0,timestamp:0,isProcessing:!1};function a(u){s.has(u)&&(l.schedule(u),t()),u(o)}const l={schedule:(u,c=!1,d=!1)=>{const h=d&&i?e:n;return c&&s.add(u),h.has(u)||h.add(u),u},cancel:u=>{n.delete(u),s.delete(u)},process:u=>{if(o=u,i){r=!0;return}i=!0,[e,n]=[n,e],n.clear(),e.forEach(a),i=!1,r&&(r=!1,l.process(u))}};return l}const pl=["read","resolveKeyframes","update","preRender","render","postRender"],yI=40;function A2(t,e){let n=!1,i=!0;const r={delta:0,timestamp:0,isProcessing:!1},s=()=>n=!0,o=pl.reduce((g,m)=>(g[m]=gI(s),g),{}),{read:a,resolveKeyframes:l,update:u,preRender:c,render:d,postRender:f}=o,h=()=>{const g=performance.now();n=!1,r.delta=i?1e3/60:Math.max(Math.min(g-r.timestamp,yI),1),r.timestamp=g,r.isProcessing=!0,a.process(r),l.process(r),u.process(r),c.process(r),d.process(r),f.process(r),r.isProcessing=!1,n&&e&&(i=!1,t(h))},v=()=>{n=!0,i=!0,r.isProcessing||t(h)};return{schedule:pl.reduce((g,m)=>{const x=o[m];return g[m]=(b,k=!1,E=!1)=>(n||v(),x.schedule(b,k,E)),g},{}),cancel:g=>{for(let m=0;m<pl.length;m++)o[pl[m]].cancel(g)},state:r,steps:o}}const{schedule:Se,cancel:tr,state:at,steps:xd}=A2(typeof requestAnimationFrame<"u"?requestAnimationFrame:bt,!0),R2=(t,e,n)=>(((1-3*n+3*e)*t+(3*n-6*e))*t+3*e)*t,vI=1e-7,xI=12;function wI(t,e,n,i,r){let s,o,a=0;do o=e+(n-e)/2,s=R2(o,i,r)-t,s>0?n=o:e=o;while(Math.abs(s)>vI&&++a<xI);return o}function Ba(t,e,n,i){if(t===e&&n===i)return bt;const r=s=>wI(s,0,1,t,n);return s=>s===0||s===1?s:R2(r(s),e,i)}const F2=t=>e=>e<=.5?t(2*e)/2:(2-t(2*(1-e)))/2,I2=t=>e=>1-t(1-e),O2=Ba(.33,1.53,.69,.99),Pp=I2(O2),j2=F2(Pp),L2=t=>(t*=2)<1?.5*Pp(t):.5*(2-Math.pow(2,-10*(t-1))),Ep=t=>1-Math.sin(Math.acos(t)),z2=I2(Ep),V2=F2(Ep),B2=t=>/^0[^.\s]+$/u.test(t);function bI(t){return typeof t=="number"?t===0:t!==null?t==="none"||t==="0"||B2(t):!0}const U2=t=>/^-?(?:\d+(?:\.\d+)?|\.\d+)$/u.test(t),$2=t=>e=>typeof e=="string"&&e.startsWith(t),W2=$2("--"),SI=$2("var(--"),Mp=t=>SI(t)?_I.test(t.split("/*")[0].trim()):!1,_I=/var\(--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)$/iu,kI=/^var\(--(?:([\w-]+)|([\w-]+), ?([a-zA-Z\d ()%#.,-]+))\)/u;function CI(t){const e=kI.exec(t);if(!e)return[,];const[,n,i,r]=e;return[`--${n??i}`,r]}function H2(t,e,n=1){const[i,r]=CI(t);if(!i)return;const s=window.getComputedStyle(e).getPropertyValue(i);if(s){const o=s.trim();return U2(o)?parseFloat(o):o}return Mp(r)?H2(r,e,n+1):r}const wi=(t,e,n)=>n>e?e:n<t?t:n,ro={test:t=>typeof t=="number",parse:parseFloat,transform:t=>t},pa={...ro,transform:t=>wi(0,1,t)},ml={...ro,default:1},Ua=t=>({test:e=>typeof e=="string"&&e.endsWith(t)&&e.split(" ").length===1,parse:parseFloat,transform:e=>`${e}${t}`}),Pi=Ua("deg"),Gn=Ua("%"),Y=Ua("px"),TI=Ua("vh"),PI=Ua("vw"),dy={...Gn,parse:t=>Gn.parse(t)/100,transform:t=>Gn.transform(t*100)},EI=new Set(["width","height","top","left","right","bottom","x","y","translateX","translateY"]),fy=t=>t===ro||t===Y,hy=(t,e)=>parseFloat(t.split(", ")[e]),py=(t,e)=>(n,{transform:i})=>{if(i==="none"||!i)return 0;const r=i.match(/^matrix3d\((.+)\)$/u);if(r)return hy(r[1],e);{const s=i.match(/^matrix\((.+)\)$/u);return s?hy(s[1],t):0}},MI=new Set(["x","y","z"]),DI=Va.filter(t=>!MI.has(t));function NI(t){const e=[];return DI.forEach(n=>{const i=t.getValue(n);i!==void 0&&(e.push([n,i.get()]),i.set(n.startsWith("scale")?1:0))}),e}const Gs={width:({x:t},{paddingLeft:e="0",paddingRight:n="0"})=>t.max-t.min-parseFloat(e)-parseFloat(n),height:({y:t},{paddingTop:e="0",paddingBottom:n="0"})=>t.max-t.min-parseFloat(e)-parseFloat(n),top:(t,{top:e})=>parseFloat(e),left:(t,{left:e})=>parseFloat(e),bottom:({y:t},{top:e})=>parseFloat(e)+(t.max-t.min),right:({x:t},{left:e})=>parseFloat(e)+(t.max-t.min),x:py(4,13),y:py(5,14)};Gs.translateX=Gs.x;Gs.translateY=Gs.y;const q2=t=>e=>e.test(t),AI={test:t=>t==="auto",parse:t=>t},G2=[ro,Y,Gn,Pi,PI,TI,AI],my=t=>G2.find(q2(t)),Ar=new Set;let Hf=!1,qf=!1;function Q2(){if(qf){const t=Array.from(Ar).filter(i=>i.needsMeasurement),e=new Set(t.map(i=>i.element)),n=new Map;e.forEach(i=>{const r=NI(i);r.length&&(n.set(i,r),i.render())}),t.forEach(i=>i.measureInitialState()),e.forEach(i=>{i.render();const r=n.get(i);r&&r.forEach(([s,o])=>{var a;(a=i.getValue(s))===null||a===void 0||a.set(o)})}),t.forEach(i=>i.measureEndState()),t.forEach(i=>{i.suspendedScrollY!==void 0&&window.scrollTo(0,i.suspendedScrollY)})}qf=!1,Hf=!1,Ar.forEach(t=>t.complete()),Ar.clear()}function K2(){Ar.forEach(t=>{t.readKeyframes(),t.needsMeasurement&&(qf=!0)})}function RI(){K2(),Q2()}class Dp{constructor(e,n,i,r,s,o=!1){this.isComplete=!1,this.isAsync=!1,this.needsMeasurement=!1,this.isScheduled=!1,this.unresolvedKeyframes=[...e],this.onComplete=n,this.name=i,this.motionValue=r,this.element=s,this.isAsync=o}scheduleResolve(){this.isScheduled=!0,this.isAsync?(Ar.add(this),Hf||(Hf=!0,Se.read(K2),Se.resolveKeyframes(Q2))):(this.readKeyframes(),this.complete())}readKeyframes(){const{unresolvedKeyframes:e,name:n,element:i,motionValue:r}=this;for(let s=0;s<e.length;s++)if(e[s]===null)if(s===0){const o=r==null?void 0:r.get(),a=e[e.length-1];if(o!==void 0)e[0]=o;else if(i&&n){const l=i.readValue(n,a);l!=null&&(e[0]=l)}e[0]===void 0&&(e[0]=a),r&&o===void 0&&r.set(e[0])}else e[s]=e[s-1]}setFinalKeyframe(){}measureInitialState(){}renderEndStyles(){}measureEndState(){}complete(){this.isComplete=!0,this.onComplete(this.unresolvedKeyframes,this.finalKeyframe),Ar.delete(this)}cancel(){this.isComplete||(this.isScheduled=!1,Ar.delete(this))}resume(){this.isComplete||this.scheduleResolve()}}const Bo=t=>Math.round(t*1e5)/1e5,Np=/-?(?:\d+(?:\.\d+)?|\.\d+)/gu;function FI(t){return t==null}const II=/^(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))$/iu,Ap=(t,e)=>n=>!!(typeof n=="string"&&II.test(n)&&n.startsWith(t)||e&&!FI(n)&&Object.prototype.hasOwnProperty.call(n,e)),Z2=(t,e,n)=>i=>{if(typeof i!="string")return i;const[r,s,o,a]=i.match(Np);return{[t]:parseFloat(r),[e]:parseFloat(s),[n]:parseFloat(o),alpha:a!==void 0?parseFloat(a):1}},OI=t=>wi(0,255,t),wd={...ro,transform:t=>Math.round(OI(t))},_r={test:Ap("rgb","red"),parse:Z2("red","green","blue"),transform:({red:t,green:e,blue:n,alpha:i=1})=>"rgba("+wd.transform(t)+", "+wd.transform(e)+", "+wd.transform(n)+", "+Bo(pa.transform(i))+")"};function jI(t){let e="",n="",i="",r="";return t.length>5?(e=t.substring(1,3),n=t.substring(3,5),i=t.substring(5,7),r=t.substring(7,9)):(e=t.substring(1,2),n=t.substring(2,3),i=t.substring(3,4),r=t.substring(4,5),e+=e,n+=n,i+=i,r+=r),{red:parseInt(e,16),green:parseInt(n,16),blue:parseInt(i,16),alpha:r?parseInt(r,16)/255:1}}const Gf={test:Ap("#"),parse:jI,transform:_r.transform},fs={test:Ap("hsl","hue"),parse:Z2("hue","saturation","lightness"),transform:({hue:t,saturation:e,lightness:n,alpha:i=1})=>"hsla("+Math.round(t)+", "+Gn.transform(Bo(e))+", "+Gn.transform(Bo(n))+", "+Bo(pa.transform(i))+")"},mt={test:t=>_r.test(t)||Gf.test(t)||fs.test(t),parse:t=>_r.test(t)?_r.parse(t):fs.test(t)?fs.parse(t):Gf.parse(t),transform:t=>typeof t=="string"?t:t.hasOwnProperty("red")?_r.transform(t):fs.transform(t)},LI=/(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))/giu;function zI(t){var e,n;return isNaN(t)&&typeof t=="string"&&(((e=t.match(Np))===null||e===void 0?void 0:e.length)||0)+(((n=t.match(LI))===null||n===void 0?void 0:n.length)||0)>0}const X2="number",Y2="color",VI="var",BI="var(",gy="${}",UI=/var\s*\(\s*--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)|#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\)|-?(?:\d+(?:\.\d+)?|\.\d+)/giu;function ma(t){const e=t.toString(),n=[],i={color:[],number:[],var:[]},r=[];let s=0;const a=e.replace(UI,l=>(mt.test(l)?(i.color.push(s),r.push(Y2),n.push(mt.parse(l))):l.startsWith(BI)?(i.var.push(s),r.push(VI),n.push(l)):(i.number.push(s),r.push(X2),n.push(parseFloat(l))),++s,gy)).split(gy);return{values:n,split:a,indexes:i,types:r}}function J2(t){return ma(t).values}function ek(t){const{split:e,types:n}=ma(t),i=e.length;return r=>{let s="";for(let o=0;o<i;o++)if(s+=e[o],r[o]!==void 0){const a=n[o];a===X2?s+=Bo(r[o]):a===Y2?s+=mt.transform(r[o]):s+=r[o]}return s}}const $I=t=>typeof t=="number"?0:t;function WI(t){const e=J2(t);return ek(t)(e.map($I))}const nr={test:zI,parse:J2,createTransformer:ek,getAnimatableNone:WI},HI=new Set(["brightness","contrast","saturate","opacity"]);function qI(t){const[e,n]=t.slice(0,-1).split("(");if(e==="drop-shadow")return t;const[i]=n.match(Np)||[];if(!i)return t;const r=n.replace(i,"");let s=HI.has(e)?1:0;return i!==n&&(s*=100),e+"("+s+r+")"}const GI=/\b([a-z-]*)\(.*?\)/gu,Qf={...nr,getAnimatableNone:t=>{const e=t.match(GI);return e?e.map(qI).join(" "):t}},QI={borderWidth:Y,borderTopWidth:Y,borderRightWidth:Y,borderBottomWidth:Y,borderLeftWidth:Y,borderRadius:Y,radius:Y,borderTopLeftRadius:Y,borderTopRightRadius:Y,borderBottomRightRadius:Y,borderBottomLeftRadius:Y,width:Y,maxWidth:Y,height:Y,maxHeight:Y,top:Y,right:Y,bottom:Y,left:Y,padding:Y,paddingTop:Y,paddingRight:Y,paddingBottom:Y,paddingLeft:Y,margin:Y,marginTop:Y,marginRight:Y,marginBottom:Y,marginLeft:Y,backgroundPositionX:Y,backgroundPositionY:Y},KI={rotate:Pi,rotateX:Pi,rotateY:Pi,rotateZ:Pi,scale:ml,scaleX:ml,scaleY:ml,scaleZ:ml,skew:Pi,skewX:Pi,skewY:Pi,distance:Y,translateX:Y,translateY:Y,translateZ:Y,x:Y,y:Y,z:Y,perspective:Y,transformPerspective:Y,opacity:pa,originX:dy,originY:dy,originZ:Y},yy={...ro,transform:Math.round},Rp={...QI,...KI,zIndex:yy,size:Y,fillOpacity:pa,strokeOpacity:pa,numOctaves:yy},ZI={...Rp,color:mt,backgroundColor:mt,outlineColor:mt,fill:mt,stroke:mt,borderColor:mt,borderTopColor:mt,borderRightColor:mt,borderBottomColor:mt,borderLeftColor:mt,filter:Qf,WebkitFilter:Qf},Fp=t=>ZI[t];function tk(t,e){let n=Fp(t);return n!==Qf&&(n=nr),n.getAnimatableNone?n.getAnimatableNone(e):void 0}const XI=new Set(["auto","none","0"]);function YI(t,e,n){let i=0,r;for(;i<t.length&&!r;){const s=t[i];typeof s=="string"&&!XI.has(s)&&ma(s).values.length&&(r=t[i]),i++}if(r&&n)for(const s of e)t[s]=tk(n,r)}class nk extends Dp{constructor(e,n,i,r,s){super(e,n,i,r,s,!0)}readKeyframes(){const{unresolvedKeyframes:e,element:n,name:i}=this;if(!n||!n.current)return;super.readKeyframes();for(let l=0;l<e.length;l++){let u=e[l];if(typeof u=="string"&&(u=u.trim(),Mp(u))){const c=H2(u,n.current);c!==void 0&&(e[l]=c),l===e.length-1&&(this.finalKeyframe=u)}}if(this.resolveNoneKeyframes(),!EI.has(i)||e.length!==2)return;const[r,s]=e,o=my(r),a=my(s);if(o!==a)if(fy(o)&&fy(a))for(let l=0;l<e.length;l++){const u=e[l];typeof u=="string"&&(e[l]=parseFloat(u))}else this.needsMeasurement=!0}resolveNoneKeyframes(){const{unresolvedKeyframes:e,name:n}=this,i=[];for(let r=0;r<e.length;r++)bI(e[r])&&i.push(r);i.length&&YI(e,i,n)}measureInitialState(){const{element:e,unresolvedKeyframes:n,name:i}=this;if(!e||!e.current)return;i==="height"&&(this.suspendedScrollY=window.pageYOffset),this.measuredOrigin=Gs[i](e.measureViewportBox(),window.getComputedStyle(e.current)),n[0]=this.measuredOrigin;const r=n[n.length-1];r!==void 0&&e.getValue(i,r).jump(r,!1)}measureEndState(){var e;const{element:n,name:i,unresolvedKeyframes:r}=this;if(!n||!n.current)return;const s=n.getValue(i);s&&s.jump(this.measuredOrigin,!1);const o=r.length-1,a=r[o];r[o]=Gs[i](n.measureViewportBox(),window.getComputedStyle(n.current)),a!==null&&this.finalKeyframe===void 0&&(this.finalKeyframe=a),!((e=this.removedTransforms)===null||e===void 0)&&e.length&&this.removedTransforms.forEach(([l,u])=>{n.getValue(l).set(u)}),this.resolveNoneKeyframes()}}function Ip(t){return typeof t=="function"}let Il;function JI(){Il=void 0}const Qn={now:()=>(Il===void 0&&Qn.set(at.isProcessing||pI.useManualTiming?at.timestamp:performance.now()),Il),set:t=>{Il=t,queueMicrotask(JI)}},vy=(t,e)=>e==="zIndex"?!1:!!(typeof t=="number"||Array.isArray(t)||typeof t=="string"&&(nr.test(t)||t==="0")&&!t.startsWith("url("));function e4(t){const e=t[0];if(t.length===1)return!0;for(let n=0;n<t.length;n++)if(t[n]!==e)return!0}function t4(t,e,n,i){const r=t[0];if(r===null)return!1;if(e==="display"||e==="visibility")return!0;const s=t[t.length-1],o=vy(r,e),a=vy(s,e);return!o||!a?!1:e4(t)||(n==="spring"||Ip(n))&&i}const n4=40;class ik{constructor({autoplay:e=!0,delay:n=0,type:i="keyframes",repeat:r=0,repeatDelay:s=0,repeatType:o="loop",...a}){this.isStopped=!1,this.hasAttemptedResolve=!1,this.createdAt=Qn.now(),this.options={autoplay:e,delay:n,type:i,repeat:r,repeatDelay:s,repeatType:o,...a},this.updateFinishedPromise()}calcStartTime(){return this.resolvedAt?this.resolvedAt-this.createdAt>n4?this.resolvedAt:this.createdAt:this.createdAt}get resolved(){return!this._resolved&&!this.hasAttemptedResolve&&RI(),this._resolved}onKeyframesResolved(e,n){this.resolvedAt=Qn.now(),this.hasAttemptedResolve=!0;const{name:i,type:r,velocity:s,delay:o,onComplete:a,onUpdate:l,isGenerator:u}=this.options;if(!u&&!t4(e,i,r,s))if(o)this.options.duration=0;else{l==null||l(pc(e,this.options,n)),a==null||a(),this.resolveFinishedPromise();return}const c=this.initPlayback(e,n);c!==!1&&(this._resolved={keyframes:e,finalKeyframe:n,...c},this.onPostResolved())}onPostResolved(){}then(e,n){return this.currentFinishedPromise.then(e,n)}flatten(){this.options.type="keyframes",this.options.ease="linear"}updateFinishedPromise(){this.currentFinishedPromise=new Promise(e=>{this.resolveFinishedPromise=e})}}const Qs=(t,e,n)=>{const i=e-t;return i===0?1:(n-t)/i},rk=(t,e,n=10)=>{let i="";const r=Math.max(Math.round(e/n),2);for(let s=0;s<r;s++)i+=t(Qs(0,r-1,s))+", ";return`linear(${i.substring(0,i.length-2)})`};function sk(t,e){return e?t*(1e3/e):0}const i4=5;function ok(t,e,n){const i=Math.max(e-i4,0);return sk(n-t(i),e-i)}const ze={stiffness:100,damping:10,mass:1,velocity:0,duration:800,bounce:.3,visualDuration:.3,restSpeed:{granular:.01,default:2},restDelta:{granular:.005,default:.5},minDuration:.01,maxDuration:10,minDamping:.05,maxDamping:1},bd=.001;function r4({duration:t=ze.duration,bounce:e=ze.bounce,velocity:n=ze.velocity,mass:i=ze.mass}){let r,s,o=1-e;o=wi(ze.minDamping,ze.maxDamping,o),t=wi(ze.minDuration,ze.maxDuration,pi(t)),o<1?(r=u=>{const c=u*o,d=c*t,f=c-n,h=Kf(u,o),v=Math.exp(-d);return bd-f/h*v},s=u=>{const d=u*o*t,f=d*n+n,h=Math.pow(o,2)*Math.pow(u,2)*t,v=Math.exp(-d),y=Kf(Math.pow(u,2),o);return(-r(u)+bd>0?-1:1)*((f-h)*v)/y}):(r=u=>{const c=Math.exp(-u*t),d=(u-n)*t+1;return-bd+c*d},s=u=>{const c=Math.exp(-u*t),d=(n-u)*(t*t);return c*d});const a=5/t,l=o4(r,s,a);if(t=hi(t),isNaN(l))return{stiffness:ze.stiffness,damping:ze.damping,duration:t};{const u=Math.pow(l,2)*i;return{stiffness:u,damping:o*2*Math.sqrt(i*u),duration:t}}}const s4=12;function o4(t,e,n){let i=n;for(let r=1;r<s4;r++)i=i-t(i)/e(i);return i}function Kf(t,e){return t*Math.sqrt(1-e*e)}const Zf=2e4;function ak(t){let e=0;const n=50;let i=t.next(e);for(;!i.done&&e<Zf;)e+=n,i=t.next(e);return e>=Zf?1/0:e}const a4=["duration","bounce"],l4=["stiffness","damping","mass"];function xy(t,e){return e.some(n=>t[n]!==void 0)}function u4(t){let e={velocity:ze.velocity,stiffness:ze.stiffness,damping:ze.damping,mass:ze.mass,isResolvedFromDuration:!1,...t};if(!xy(t,l4)&&xy(t,a4))if(t.visualDuration){const n=t.visualDuration,i=2*Math.PI/(n*1.2),r=i*i,s=2*wi(.05,1,1-t.bounce)*Math.sqrt(r);e={...e,mass:ze.mass,stiffness:r,damping:s}}else{const n=r4(t);e={...e,...n,mass:ze.mass},e.isResolvedFromDuration=!0}return e}function lk(t=ze.visualDuration,e=ze.bounce){const n=typeof t!="object"?{visualDuration:t,keyframes:[0,1],bounce:e}:t;let{restSpeed:i,restDelta:r}=n;const s=n.keyframes[0],o=n.keyframes[n.keyframes.length-1],a={done:!1,value:s},{stiffness:l,damping:u,mass:c,duration:d,velocity:f,isResolvedFromDuration:h}=u4({...n,velocity:-pi(n.velocity||0)}),v=f||0,y=u/(2*Math.sqrt(l*c)),w=o-s,g=pi(Math.sqrt(l/c)),m=Math.abs(w)<5;i||(i=m?ze.restSpeed.granular:ze.restSpeed.default),r||(r=m?ze.restDelta.granular:ze.restDelta.default);let x;if(y<1){const k=Kf(g,y);x=E=>{const M=Math.exp(-y*g*E);return o-M*((v+y*g*w)/k*Math.sin(k*E)+w*Math.cos(k*E))}}else if(y===1)x=k=>o-Math.exp(-g*k)*(w+(v+g*w)*k);else{const k=g*Math.sqrt(y*y-1);x=E=>{const M=Math.exp(-y*g*E),P=Math.min(k*E,300);return o-M*((v+y*g*w)*Math.sinh(P)+k*w*Math.cosh(P))/k}}const b={calculatedDuration:h&&d||null,next:k=>{const E=x(k);if(h)a.done=k>=d;else{let M=0;y<1&&(M=k===0?hi(v):ok(x,k,E));const P=Math.abs(M)<=i,L=Math.abs(o-E)<=r;a.done=P&&L}return a.value=a.done?o:E,a},toString:()=>{const k=Math.min(ak(b),Zf),E=rk(M=>b.next(k*M).value,k,30);return k+"ms "+E}};return b}function wy({keyframes:t,velocity:e=0,power:n=.8,timeConstant:i=325,bounceDamping:r=10,bounceStiffness:s=500,modifyTarget:o,min:a,max:l,restDelta:u=.5,restSpeed:c}){const d=t[0],f={done:!1,value:d},h=P=>a!==void 0&&P<a||l!==void 0&&P>l,v=P=>a===void 0?l:l===void 0||Math.abs(a-P)<Math.abs(l-P)?a:l;let y=n*e;const w=d+y,g=o===void 0?w:o(w);g!==w&&(y=g-d);const m=P=>-y*Math.exp(-P/i),x=P=>g+m(P),b=P=>{const L=m(P),z=x(P);f.done=Math.abs(L)<=u,f.value=f.done?g:z};let k,E;const M=P=>{h(f.value)&&(k=P,E=lk({keyframes:[f.value,v(f.value)],velocity:ok(x,P,f.value),damping:r,stiffness:s,restDelta:u,restSpeed:c}))};return M(0),{calculatedDuration:null,next:P=>{let L=!1;return!E&&k===void 0&&(L=!0,b(P),M(P)),k!==void 0&&P>=k?E.next(P-k):(!L&&b(P),f)}}}const c4=Ba(.42,0,1,1),d4=Ba(0,0,.58,1),uk=Ba(.42,0,.58,1),f4=t=>Array.isArray(t)&&typeof t[0]!="number",Op=t=>Array.isArray(t)&&typeof t[0]=="number",by={linear:bt,easeIn:c4,easeInOut:uk,easeOut:d4,circIn:Ep,circInOut:V2,circOut:z2,backIn:Pp,backInOut:j2,backOut:O2,anticipate:L2},Sy=t=>{if(Op(t)){Wf(t.length===4);const[e,n,i,r]=t;return Ba(e,n,i,r)}else if(typeof t=="string")return Wf(by[t]!==void 0),by[t];return t},h4=(t,e)=>n=>e(t(n)),Xi=(...t)=>t.reduce(h4),Ie=(t,e,n)=>t+(e-t)*n;function Sd(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+(e-t)*6*n:n<1/2?e:n<2/3?t+(e-t)*(2/3-n)*6:t}function p4({hue:t,saturation:e,lightness:n,alpha:i}){t/=360,e/=100,n/=100;let r=0,s=0,o=0;if(!e)r=s=o=n;else{const a=n<.5?n*(1+e):n+e-n*e,l=2*n-a;r=Sd(l,a,t+1/3),s=Sd(l,a,t),o=Sd(l,a,t-1/3)}return{red:Math.round(r*255),green:Math.round(s*255),blue:Math.round(o*255),alpha:i}}function vu(t,e){return n=>n>0?e:t}const _d=(t,e,n)=>{const i=t*t,r=n*(e*e-i)+i;return r<0?0:Math.sqrt(r)},m4=[Gf,_r,fs],g4=t=>m4.find(e=>e.test(t));function _y(t){const e=g4(t);if(!e)return!1;let n=e.parse(t);return e===fs&&(n=p4(n)),n}const ky=(t,e)=>{const n=_y(t),i=_y(e);if(!n||!i)return vu(t,e);const r={...n};return s=>(r.red=_d(n.red,i.red,s),r.green=_d(n.green,i.green,s),r.blue=_d(n.blue,i.blue,s),r.alpha=Ie(n.alpha,i.alpha,s),_r.transform(r))},Xf=new Set(["none","hidden"]);function y4(t,e){return Xf.has(t)?n=>n<=0?t:e:n=>n>=1?e:t}function v4(t,e){return n=>Ie(t,e,n)}function jp(t){return typeof t=="number"?v4:typeof t=="string"?Mp(t)?vu:mt.test(t)?ky:b4:Array.isArray(t)?ck:typeof t=="object"?mt.test(t)?ky:x4:vu}function ck(t,e){const n=[...t],i=n.length,r=t.map((s,o)=>jp(s)(s,e[o]));return s=>{for(let o=0;o<i;o++)n[o]=r[o](s);return n}}function x4(t,e){const n={...t,...e},i={};for(const r in n)t[r]!==void 0&&e[r]!==void 0&&(i[r]=jp(t[r])(t[r],e[r]));return r=>{for(const s in i)n[s]=i[s](r);return n}}function w4(t,e){var n;const i=[],r={color:0,var:0,number:0};for(let s=0;s<e.values.length;s++){const o=e.types[s],a=t.indexes[o][r[o]],l=(n=t.values[a])!==null&&n!==void 0?n:0;i[s]=l,r[o]++}return i}const b4=(t,e)=>{const n=nr.createTransformer(e),i=ma(t),r=ma(e);return i.indexes.var.length===r.indexes.var.length&&i.indexes.color.length===r.indexes.color.length&&i.indexes.number.length>=r.indexes.number.length?Xf.has(t)&&!r.values.length||Xf.has(e)&&!i.values.length?y4(t,e):Xi(ck(w4(i,r),r.values),n):vu(t,e)};function dk(t,e,n){return typeof t=="number"&&typeof e=="number"&&typeof n=="number"?Ie(t,e,n):jp(t)(t,e)}function S4(t,e,n){const i=[],r=n||dk,s=t.length-1;for(let o=0;o<s;o++){let a=r(t[o],t[o+1]);if(e){const l=Array.isArray(e)?e[o]||bt:e;a=Xi(l,a)}i.push(a)}return i}function _4(t,e,{clamp:n=!0,ease:i,mixer:r}={}){const s=t.length;if(Wf(s===e.length),s===1)return()=>e[0];if(s===2&&t[0]===t[1])return()=>e[1];t[0]>t[s-1]&&(t=[...t].reverse(),e=[...e].reverse());const o=S4(e,i,r),a=o.length,l=u=>{let c=0;if(a>1)for(;c<t.length-2&&!(u<t[c+1]);c++);const d=Qs(t[c],t[c+1],u);return o[c](d)};return n?u=>l(wi(t[0],t[s-1],u)):l}function k4(t,e){const n=t[t.length-1];for(let i=1;i<=e;i++){const r=Qs(0,e,i);t.push(Ie(n,1,r))}}function C4(t){const e=[0];return k4(e,t.length-1),e}function T4(t,e){return t.map(n=>n*e)}function P4(t,e){return t.map(()=>e||uk).splice(0,t.length-1)}function xu({duration:t=300,keyframes:e,times:n,ease:i="easeInOut"}){const r=f4(i)?i.map(Sy):Sy(i),s={done:!1,value:e[0]},o=T4(n&&n.length===e.length?n:C4(e),t),a=_4(o,e,{ease:Array.isArray(r)?r:P4(e,r)});return{calculatedDuration:t,next:l=>(s.value=a(l),s.done=l>=t,s)}}const E4=t=>{const e=({timestamp:n})=>t(n);return{start:()=>Se.update(e,!0),stop:()=>tr(e),now:()=>at.isProcessing?at.timestamp:Qn.now()}},M4={decay:wy,inertia:wy,tween:xu,keyframes:xu,spring:lk},D4=t=>t/100;class Lp extends ik{constructor(e){super(e),this.holdTime=null,this.cancelTime=null,this.currentTime=0,this.playbackSpeed=1,this.pendingPlayState="running",this.startTime=null,this.state="idle",this.stop=()=>{if(this.resolver.cancel(),this.isStopped=!0,this.state==="idle")return;this.teardown();const{onStop:l}=this.options;l&&l()};const{name:n,motionValue:i,element:r,keyframes:s}=this.options,o=(r==null?void 0:r.KeyframeResolver)||Dp,a=(l,u)=>this.onKeyframesResolved(l,u);this.resolver=new o(s,a,n,i,r),this.resolver.scheduleResolve()}flatten(){super.flatten(),this._resolved&&Object.assign(this._resolved,this.initPlayback(this._resolved.keyframes))}initPlayback(e){const{type:n="keyframes",repeat:i=0,repeatDelay:r=0,repeatType:s,velocity:o=0}=this.options,a=Ip(n)?n:M4[n]||xu;let l,u;a!==xu&&typeof e[0]!="number"&&(l=Xi(D4,dk(e[0],e[1])),e=[0,100]);const c=a({...this.options,keyframes:e});s==="mirror"&&(u=a({...this.options,keyframes:[...e].reverse(),velocity:-o})),c.calculatedDuration===null&&(c.calculatedDuration=ak(c));const{calculatedDuration:d}=c,f=d+r,h=f*(i+1)-r;return{generator:c,mirroredGenerator:u,mapPercentToKeyframes:l,calculatedDuration:d,resolvedDuration:f,totalDuration:h}}onPostResolved(){const{autoplay:e=!0}=this.options;this.play(),this.pendingPlayState==="paused"||!e?this.pause():this.state=this.pendingPlayState}tick(e,n=!1){const{resolved:i}=this;if(!i){const{keyframes:P}=this.options;return{done:!0,value:P[P.length-1]}}const{finalKeyframe:r,generator:s,mirroredGenerator:o,mapPercentToKeyframes:a,keyframes:l,calculatedDuration:u,totalDuration:c,resolvedDuration:d}=i;if(this.startTime===null)return s.next(0);const{delay:f,repeat:h,repeatType:v,repeatDelay:y,onUpdate:w}=this.options;this.speed>0?this.startTime=Math.min(this.startTime,e):this.speed<0&&(this.startTime=Math.min(e-c/this.speed,this.startTime)),n?this.currentTime=e:this.holdTime!==null?this.currentTime=this.holdTime:this.currentTime=Math.round(e-this.startTime)*this.speed;const g=this.currentTime-f*(this.speed>=0?1:-1),m=this.speed>=0?g<0:g>c;this.currentTime=Math.max(g,0),this.state==="finished"&&this.holdTime===null&&(this.currentTime=c);let x=this.currentTime,b=s;if(h){const P=Math.min(this.currentTime,c)/d;let L=Math.floor(P),z=P%1;!z&&P>=1&&(z=1),z===1&&L--,L=Math.min(L,h+1),!!(L%2)&&(v==="reverse"?(z=1-z,y&&(z-=y/d)):v==="mirror"&&(b=o)),x=wi(0,1,z)*d}const k=m?{done:!1,value:l[0]}:b.next(x);a&&(k.value=a(k.value));let{done:E}=k;!m&&u!==null&&(E=this.speed>=0?this.currentTime>=c:this.currentTime<=0);const M=this.holdTime===null&&(this.state==="finished"||this.state==="running"&&E);return M&&r!==void 0&&(k.value=pc(l,this.options,r)),w&&w(k.value),M&&this.finish(),k}get duration(){const{resolved:e}=this;return e?pi(e.calculatedDuration):0}get time(){return pi(this.currentTime)}set time(e){e=hi(e),this.currentTime=e,this.holdTime!==null||this.speed===0?this.holdTime=e:this.driver&&(this.startTime=this.driver.now()-e/this.speed)}get speed(){return this.playbackSpeed}set speed(e){const n=this.playbackSpeed!==e;this.playbackSpeed=e,n&&(this.time=pi(this.currentTime))}play(){if(this.resolver.isScheduled||this.resolver.resume(),!this._resolved){this.pendingPlayState="running";return}if(this.isStopped)return;const{driver:e=E4,onPlay:n,startTime:i}=this.options;this.driver||(this.driver=e(s=>this.tick(s))),n&&n();const r=this.driver.now();this.holdTime!==null?this.startTime=r-this.holdTime:this.startTime?this.state==="finished"&&(this.startTime=r):this.startTime=i??this.calcStartTime(),this.state==="finished"&&this.updateFinishedPromise(),this.cancelTime=this.startTime,this.holdTime=null,this.state="running",this.driver.start()}pause(){var e;if(!this._resolved){this.pendingPlayState="paused";return}this.state="paused",this.holdTime=(e=this.currentTime)!==null&&e!==void 0?e:0}complete(){this.state!=="running"&&this.play(),this.pendingPlayState=this.state="finished",this.holdTime=null}finish(){this.teardown(),this.state="finished";const{onComplete:e}=this.options;e&&e()}cancel(){this.cancelTime!==null&&this.tick(this.cancelTime),this.teardown(),this.updateFinishedPromise()}teardown(){this.state="idle",this.stopDriver(),this.resolveFinishedPromise(),this.updateFinishedPromise(),this.startTime=this.cancelTime=null,this.resolver.cancel()}stopDriver(){this.driver&&(this.driver.stop(),this.driver=void 0)}sample(e){return this.startTime=0,this.tick(e,!0)}}const N4=new Set(["opacity","clipPath","filter","transform"]);function zp(t){let e;return()=>(e===void 0&&(e=t()),e)}const A4={linearEasing:void 0};function R4(t,e){const n=zp(t);return()=>{var i;return(i=A4[e])!==null&&i!==void 0?i:n()}}const wu=R4(()=>{try{document.createElement("div").animate({opacity:0},{easing:"linear(0, 1)"})}catch{return!1}return!0},"linearEasing");function fk(t){return!!(typeof t=="function"&&wu()||!t||typeof t=="string"&&(t in Yf||wu())||Op(t)||Array.isArray(t)&&t.every(fk))}const Co=([t,e,n,i])=>`cubic-bezier(${t}, ${e}, ${n}, ${i})`,Yf={linear:"linear",ease:"ease",easeIn:"ease-in",easeOut:"ease-out",easeInOut:"ease-in-out",circIn:Co([0,.65,.55,1]),circOut:Co([.55,0,1,.45]),backIn:Co([.31,.01,.66,-.59]),backOut:Co([.33,1.53,.69,.99])};function hk(t,e){if(t)return typeof t=="function"&&wu()?rk(t,e):Op(t)?Co(t):Array.isArray(t)?t.map(n=>hk(n,e)||Yf.easeOut):Yf[t]}function F4(t,e,n,{delay:i=0,duration:r=300,repeat:s=0,repeatType:o="loop",ease:a="easeInOut",times:l}={}){const u={[e]:n};l&&(u.offset=l);const c=hk(a,r);return Array.isArray(c)&&(u.easing=c),t.animate(u,{delay:i,duration:r,easing:Array.isArray(c)?"linear":c,fill:"both",iterations:s+1,direction:o==="reverse"?"alternate":"normal"})}function Cy(t,e){t.timeline=e,t.onfinish=null}const I4=zp(()=>Object.hasOwnProperty.call(Element.prototype,"animate")),bu=10,O4=2e4;function j4(t){return Ip(t.type)||t.type==="spring"||!fk(t.ease)}function L4(t,e){const n=new Lp({...e,keyframes:t,repeat:0,delay:0,isGenerator:!0});let i={done:!1,value:t[0]};const r=[];let s=0;for(;!i.done&&s<O4;)i=n.sample(s),r.push(i.value),s+=bu;return{times:void 0,keyframes:r,duration:s-bu,ease:"linear"}}const pk={anticipate:L2,backInOut:j2,circInOut:V2};function z4(t){return t in pk}class Ty extends ik{constructor(e){super(e);const{name:n,motionValue:i,element:r,keyframes:s}=this.options;this.resolver=new nk(s,(o,a)=>this.onKeyframesResolved(o,a),n,i,r),this.resolver.scheduleResolve()}initPlayback(e,n){var i;let{duration:r=300,times:s,ease:o,type:a,motionValue:l,name:u,startTime:c}=this.options;if(!(!((i=l.owner)===null||i===void 0)&&i.current))return!1;if(typeof o=="string"&&wu()&&z4(o)&&(o=pk[o]),j4(this.options)){const{onComplete:f,onUpdate:h,motionValue:v,element:y,...w}=this.options,g=L4(e,w);e=g.keyframes,e.length===1&&(e[1]=e[0]),r=g.duration,s=g.times,o=g.ease,a="keyframes"}const d=F4(l.owner.current,u,e,{...this.options,duration:r,times:s,ease:o});return d.startTime=c??this.calcStartTime(),this.pendingTimeline?(Cy(d,this.pendingTimeline),this.pendingTimeline=void 0):d.onfinish=()=>{const{onComplete:f}=this.options;l.set(pc(e,this.options,n)),f&&f(),this.cancel(),this.resolveFinishedPromise()},{animation:d,duration:r,times:s,type:a,ease:o,keyframes:e}}get duration(){const{resolved:e}=this;if(!e)return 0;const{duration:n}=e;return pi(n)}get time(){const{resolved:e}=this;if(!e)return 0;const{animation:n}=e;return pi(n.currentTime||0)}set time(e){const{resolved:n}=this;if(!n)return;const{animation:i}=n;i.currentTime=hi(e)}get speed(){const{resolved:e}=this;if(!e)return 1;const{animation:n}=e;return n.playbackRate}set speed(e){const{resolved:n}=this;if(!n)return;const{animation:i}=n;i.playbackRate=e}get state(){const{resolved:e}=this;if(!e)return"idle";const{animation:n}=e;return n.playState}get startTime(){const{resolved:e}=this;if(!e)return null;const{animation:n}=e;return n.startTime}attachTimeline(e){if(!this._resolved)this.pendingTimeline=e;else{const{resolved:n}=this;if(!n)return bt;const{animation:i}=n;Cy(i,e)}return bt}play(){if(this.isStopped)return;const{resolved:e}=this;if(!e)return;const{animation:n}=e;n.playState==="finished"&&this.updateFinishedPromise(),n.play()}pause(){const{resolved:e}=this;if(!e)return;const{animation:n}=e;n.pause()}stop(){if(this.resolver.cancel(),this.isStopped=!0,this.state==="idle")return;this.resolveFinishedPromise(),this.updateFinishedPromise();const{resolved:e}=this;if(!e)return;const{animation:n,keyframes:i,duration:r,type:s,ease:o,times:a}=e;if(n.playState==="idle"||n.playState==="finished")return;if(this.time){const{motionValue:u,onUpdate:c,onComplete:d,element:f,...h}=this.options,v=new Lp({...h,keyframes:i,duration:r,type:s,ease:o,times:a,isGenerator:!0}),y=hi(this.time);u.setWithVelocity(v.sample(y-bu).value,v.sample(y).value,bu)}const{onStop:l}=this.options;l&&l(),this.cancel()}complete(){const{resolved:e}=this;e&&e.animation.finish()}cancel(){const{resolved:e}=this;e&&e.animation.cancel()}static supports(e){const{motionValue:n,name:i,repeatDelay:r,repeatType:s,damping:o,type:a}=e;return I4()&&i&&N4.has(i)&&n&&n.owner&&n.owner.current instanceof HTMLElement&&!n.owner.getProps().onUpdate&&!r&&s!=="mirror"&&o!==0&&a!=="inertia"}}const V4=zp(()=>window.ScrollTimeline!==void 0);class B4{constructor(e){this.stop=()=>this.runAll("stop"),this.animations=e.filter(Boolean)}then(e,n){return Promise.all(this.animations).then(e).catch(n)}getAll(e){return this.animations[0][e]}setAll(e,n){for(let i=0;i<this.animations.length;i++)this.animations[i][e]=n}attachTimeline(e,n){const i=this.animations.map(r=>V4()&&r.attachTimeline?r.attachTimeline(e):n(r));return()=>{i.forEach((r,s)=>{r&&r(),this.animations[s].stop()})}}get time(){return this.getAll("time")}set time(e){this.setAll("time",e)}get speed(){return this.getAll("speed")}set speed(e){this.setAll("speed",e)}get startTime(){return this.getAll("startTime")}get duration(){let e=0;for(let n=0;n<this.animations.length;n++)e=Math.max(e,this.animations[n].duration);return e}runAll(e){this.animations.forEach(n=>n[e]())}flatten(){this.runAll("flatten")}play(){this.runAll("play")}pause(){this.runAll("pause")}cancel(){this.runAll("cancel")}complete(){this.runAll("complete")}}function U4({when:t,delay:e,delayChildren:n,staggerChildren:i,staggerDirection:r,repeat:s,repeatType:o,repeatDelay:a,from:l,elapsed:u,...c}){return!!Object.keys(c).length}const Vp=(t,e,n,i={},r,s)=>o=>{const a=Tp(i,t)||{},l=a.delay||i.delay||0;let{elapsed:u=0}=i;u=u-hi(l);let c={keyframes:Array.isArray(n)?n:[null,n],ease:"easeOut",velocity:e.getVelocity(),...a,delay:-u,onUpdate:f=>{e.set(f),a.onUpdate&&a.onUpdate(f)},onComplete:()=>{o(),a.onComplete&&a.onComplete()},name:t,motionValue:e,element:s?void 0:r};U4(a)||(c={...c,...hI(t,c)}),c.duration&&(c.duration=hi(c.duration)),c.repeatDelay&&(c.repeatDelay=hi(c.repeatDelay)),c.from!==void 0&&(c.keyframes[0]=c.from);let d=!1;if((c.type===!1||c.duration===0&&!c.repeatDelay)&&(c.duration=0,c.delay===0&&(d=!0)),d&&!s&&e.get()!==void 0){const f=pc(c.keyframes,a);if(f!==void 0)return Se.update(()=>{c.onUpdate(f),c.onComplete()}),new B4([])}return!s&&Ty.supports(c)?new Ty(c):new Lp(c)},$4=t=>!!(t&&typeof t=="object"&&t.mix&&t.toValue),W4=t=>$f(t)?t[t.length-1]||0:t;function Bp(t,e){t.indexOf(e)===-1&&t.push(e)}function Up(t,e){const n=t.indexOf(e);n>-1&&t.splice(n,1)}class $p{constructor(){this.subscriptions=[]}add(e){return Bp(this.subscriptions,e),()=>Up(this.subscriptions,e)}notify(e,n,i){const r=this.subscriptions.length;if(r)if(r===1)this.subscriptions[0](e,n,i);else for(let s=0;s<r;s++){const o=this.subscriptions[s];o&&o(e,n,i)}}getSize(){return this.subscriptions.length}clear(){this.subscriptions.length=0}}const Py=30,H4=t=>!isNaN(parseFloat(t));class q4{constructor(e,n={}){this.version="11.13.1",this.canTrackVelocity=null,this.events={},this.updateAndNotify=(i,r=!0)=>{const s=Qn.now();this.updatedAt!==s&&this.setPrevFrameValue(),this.prev=this.current,this.setCurrent(i),this.current!==this.prev&&this.events.change&&this.events.change.notify(this.current),r&&this.events.renderRequest&&this.events.renderRequest.notify(this.current)},this.hasAnimated=!1,this.setCurrent(e),this.owner=n.owner}setCurrent(e){this.current=e,this.updatedAt=Qn.now(),this.canTrackVelocity===null&&e!==void 0&&(this.canTrackVelocity=H4(this.current))}setPrevFrameValue(e=this.current){this.prevFrameValue=e,this.prevUpdatedAt=this.updatedAt}onChange(e){return this.on("change",e)}on(e,n){this.events[e]||(this.events[e]=new $p);const i=this.events[e].add(n);return e==="change"?()=>{i(),Se.read(()=>{this.events.change.getSize()||this.stop()})}:i}clearListeners(){for(const e in this.events)this.events[e].clear()}attach(e,n){this.passiveEffect=e,this.stopPassiveEffect=n}set(e,n=!0){!n||!this.passiveEffect?this.updateAndNotify(e,n):this.passiveEffect(e,this.updateAndNotify)}setWithVelocity(e,n,i){this.set(n),this.prev=void 0,this.prevFrameValue=e,this.prevUpdatedAt=this.updatedAt-i}jump(e,n=!0){this.updateAndNotify(e),this.prev=e,this.prevUpdatedAt=this.prevFrameValue=void 0,n&&this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect()}get(){return this.current}getPrevious(){return this.prev}getVelocity(){const e=Qn.now();if(!this.canTrackVelocity||this.prevFrameValue===void 0||e-this.updatedAt>Py)return 0;const n=Math.min(this.updatedAt-this.prevUpdatedAt,Py);return sk(parseFloat(this.current)-parseFloat(this.prevFrameValue),n)}start(e){return this.stop(),new Promise(n=>{this.hasAnimated=!0,this.animation=e(n),this.events.animationStart&&this.events.animationStart.notify()}).then(()=>{this.events.animationComplete&&this.events.animationComplete.notify(),this.clearAnimation()})}stop(){this.animation&&(this.animation.stop(),this.events.animationCancel&&this.events.animationCancel.notify()),this.clearAnimation()}isAnimating(){return!!this.animation}clearAnimation(){delete this.animation}destroy(){this.clearListeners(),this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect()}}function ga(t,e){return new q4(t,e)}function G4(t,e,n){t.hasValue(e)?t.getValue(e).set(n):t.addValue(e,ga(n))}function Q4(t,e){const n=hc(t,e);let{transitionEnd:i={},transition:r={},...s}=n||{};s={...s,...i};for(const o in s){const a=W4(s[o]);G4(t,o,a)}}const Wp=t=>t.replace(/([a-z])([A-Z])/gu,"$1-$2").toLowerCase(),K4="framerAppearId",mk="data-"+Wp(K4);function gk(t){return t.props[mk]}const vt=t=>!!(t&&t.getVelocity);function Z4(t){return!!(vt(t)&&t.add)}function Jf(t,e){const n=t.getValue("willChange");if(Z4(n))return n.add(e)}function X4({protectedKeys:t,needsAnimating:e},n){const i=t.hasOwnProperty(n)&&e[n]!==!0;return e[n]=!1,i}function yk(t,e,{delay:n=0,transitionOverride:i,type:r}={}){var s;let{transition:o=t.getDefaultTransition(),transitionEnd:a,...l}=e;i&&(o=i);const u=[],c=r&&t.animationState&&t.animationState.getState()[r];for(const d in l){const f=t.getValue(d,(s=t.latestValues[d])!==null&&s!==void 0?s:null),h=l[d];if(h===void 0||c&&X4(c,d))continue;const v={delay:n,...Tp(o||{},d)};let y=!1;if(window.MotionHandoffAnimation){const g=gk(t);if(g){const m=window.MotionHandoffAnimation(g,d,Se);m!==null&&(v.startTime=m,y=!0)}}Jf(t,d),f.start(Vp(d,f,h,t.shouldReduceMotion&&Gr.has(d)?{type:!1}:v,t,y));const w=f.animation;w&&u.push(w)}return a&&Promise.all(u).then(()=>{Se.update(()=>{a&&Q4(t,a)})}),u}function eh(t,e,n={}){var i;const r=hc(t,e,n.type==="exit"?(i=t.presenceContext)===null||i===void 0?void 0:i.custom:void 0);let{transition:s=t.getDefaultTransition()||{}}=r||{};n.transitionOverride&&(s=n.transitionOverride);const o=r?()=>Promise.all(yk(t,r,n)):()=>Promise.resolve(),a=t.variantChildren&&t.variantChildren.size?(u=0)=>{const{delayChildren:c=0,staggerChildren:d,staggerDirection:f}=s;return Y4(t,e,c+u,d,f,n)}:()=>Promise.resolve(),{when:l}=s;if(l){const[u,c]=l==="beforeChildren"?[o,a]:[a,o];return u().then(()=>c())}else return Promise.all([o(),a(n.delay)])}function Y4(t,e,n=0,i=0,r=1,s){const o=[],a=(t.variantChildren.size-1)*i,l=r===1?(u=0)=>u*i:(u=0)=>a-u*i;return Array.from(t.variantChildren).sort(J4).forEach((u,c)=>{u.notify("AnimationStart",e),o.push(eh(u,e,{...s,delay:n+l(c)}).then(()=>u.notify("AnimationComplete",e)))}),Promise.all(o)}function J4(t,e){return t.sortNodePosition(e)}function eO(t,e,n={}){t.notify("AnimationStart",e);let i;if(Array.isArray(e)){const r=e.map(s=>eh(t,s,n));i=Promise.all(r)}else if(typeof e=="string")i=eh(t,e,n);else{const r=typeof e=="function"?hc(t,e,n.custom):e;i=Promise.all(yk(t,r,n))}return i.then(()=>{t.notify("AnimationComplete",e)})}const tO=Cp.length;function vk(t){if(!t)return;if(!t.isControllingVariants){const n=t.parent?vk(t.parent)||{}:{};return t.props.initial!==void 0&&(n.initial=t.props.initial),n}const e={};for(let n=0;n<tO;n++){const i=Cp[n],r=t.props[i];(ha(r)||r===!1)&&(e[i]=r)}return e}const nO=[...kp].reverse(),iO=kp.length;function rO(t){return e=>Promise.all(e.map(({animation:n,options:i})=>eO(t,n,i)))}function sO(t){let e=rO(t),n=Ey(),i=!0;const r=l=>(u,c)=>{var d;const f=hc(t,c,l==="exit"?(d=t.presenceContext)===null||d===void 0?void 0:d.custom:void 0);if(f){const{transition:h,transitionEnd:v,...y}=f;u={...u,...y,...v}}return u};function s(l){e=l(t)}function o(l){const{props:u}=t,c=vk(t.parent)||{},d=[],f=new Set;let h={},v=1/0;for(let w=0;w<iO;w++){const g=nO[w],m=n[g],x=u[g]!==void 0?u[g]:c[g],b=ha(x),k=g===l?m.isActive:null;k===!1&&(v=w);let E=x===c[g]&&x!==u[g]&&b;if(E&&i&&t.manuallyAnimateOnMount&&(E=!1),m.protectedKeys={...h},!m.isActive&&k===null||!x&&!m.prevProp||fc(x)||typeof x=="boolean")continue;const M=oO(m.prevProp,x);let P=M||g===l&&m.isActive&&!E&&b||w>v&&b,L=!1;const z=Array.isArray(x)?x:[x];let ce=z.reduce(r(g),{});k===!1&&(ce={});const{prevResolvedValues:j={}}=m,ee={...j,...ce},H=se=>{P=!0,f.has(se)&&(L=!0,f.delete(se)),m.needsAnimating[se]=!0;const I=t.getValue(se);I&&(I.liveStyle=!1)};for(const se in ee){const I=ce[se],G=j[se];if(h.hasOwnProperty(se))continue;let K=!1;$f(I)&&$f(G)?K=!N2(I,G):K=I!==G,K?I!=null?H(se):f.add(se):I!==void 0&&f.has(se)?H(se):m.protectedKeys[se]=!0}m.prevProp=x,m.prevResolvedValues=ce,m.isActive&&(h={...h,...ce}),i&&t.blockInitialAnimation&&(P=!1),P&&(!(E&&M)||L)&&d.push(...z.map(se=>({animation:se,options:{type:g}})))}if(f.size){const w={};f.forEach(g=>{const m=t.getBaseTarget(g),x=t.getValue(g);x&&(x.liveStyle=!0),w[g]=m??null}),d.push({animation:w})}let y=!!d.length;return i&&(u.initial===!1||u.initial===u.animate)&&!t.manuallyAnimateOnMount&&(y=!1),i=!1,y?e(d):Promise.resolve()}function a(l,u){var c;if(n[l].isActive===u)return Promise.resolve();(c=t.variantChildren)===null||c===void 0||c.forEach(f=>{var h;return(h=f.animationState)===null||h===void 0?void 0:h.setActive(l,u)}),n[l].isActive=u;const d=o(l);for(const f in n)n[f].protectedKeys={};return d}return{animateChanges:o,setActive:a,setAnimateFunction:s,getState:()=>n,reset:()=>{n=Ey(),i=!0}}}function oO(t,e){return typeof e=="string"?e!==t:Array.isArray(e)?!N2(e,t):!1}function pr(t=!1){return{isActive:t,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}function Ey(){return{animate:pr(!0),whileInView:pr(),whileHover:pr(),whileTap:pr(),whileDrag:pr(),whileFocus:pr(),exit:pr()}}class dr{constructor(e){this.isMounted=!1,this.node=e}update(){}}class aO extends dr{constructor(e){super(e),e.animationState||(e.animationState=sO(e))}updateAnimationControlsSubscription(){const{animate:e}=this.node.getProps();fc(e)&&(this.unmountControls=e.subscribe(this.node))}mount(){this.updateAnimationControlsSubscription()}update(){const{animate:e}=this.node.getProps(),{animate:n}=this.node.prevProps||{};e!==n&&this.updateAnimationControlsSubscription()}unmount(){var e;this.node.animationState.reset(),(e=this.unmountControls)===null||e===void 0||e.call(this)}}let lO=0;class uO extends dr{constructor(){super(...arguments),this.id=lO++}update(){if(!this.node.presenceContext)return;const{isPresent:e,onExitComplete:n}=this.node.presenceContext,{isPresent:i}=this.node.prevPresenceContext||{};if(!this.node.animationState||e===i)return;const r=this.node.animationState.setActive("exit",!e);n&&!e&&r.then(()=>n(this.id))}mount(){const{register:e}=this.node.presenceContext||{};e&&(this.unmount=e(this.id))}unmount(){}}const cO={animation:{Feature:aO},exit:{Feature:uO}};function xk(t,e,n){var i;if(t instanceof Element)return[t];if(typeof t=="string"){let r=document;const s=(i=void 0)!==null&&i!==void 0?i:r.querySelectorAll(t);return s?Array.from(s):[]}return Array.from(t)}const xn={x:!1,y:!1};function wk(){return xn.x||xn.y}function My(t){return e=>{e.pointerType==="touch"||wk()||t(e)}}function dO(t,e,n={}){const i=new AbortController,r={passive:!0,...n,signal:i.signal},s=My(o=>{const{target:a}=o,l=e(o);if(!l||!a)return;const u=My(c=>{l(c),a.removeEventListener("pointerleave",u)});a.addEventListener("pointerleave",u,r)});return xk(t).forEach(o=>{o.addEventListener("pointerenter",s,r)}),()=>i.abort()}function fO(t){return t==="x"||t==="y"?xn[t]?null:(xn[t]=!0,()=>{xn[t]=!1}):xn.x||xn.y?null:(xn.x=xn.y=!0,()=>{xn.x=xn.y=!1})}const bk=t=>t.pointerType==="mouse"?typeof t.button!="number"||t.button<=0:t.isPrimary!==!1;function $a(t){return{point:{x:t.pageX,y:t.pageY}}}const hO=t=>e=>bk(e)&&t(e,$a(e));function li(t,e,n,i={passive:!0}){return t.addEventListener(e,n,i),()=>t.removeEventListener(e,n)}function Yi(t,e,n,i){return li(t,e,hO(n),i)}const Dy=(t,e)=>Math.abs(t-e);function pO(t,e){const n=Dy(t.x,e.x),i=Dy(t.y,e.y);return Math.sqrt(n**2+i**2)}class Sk{constructor(e,n,{transformPagePoint:i,contextWindow:r,dragSnapToOrigin:s=!1}={}){if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.contextWindow=window,this.updatePoint=()=>{if(!(this.lastMoveEvent&&this.lastMoveEventInfo))return;const d=Cd(this.lastMoveEventInfo,this.history),f=this.startEvent!==null,h=pO(d.offset,{x:0,y:0})>=3;if(!f&&!h)return;const{point:v}=d,{timestamp:y}=at;this.history.push({...v,timestamp:y});const{onStart:w,onMove:g}=this.handlers;f||(w&&w(this.lastMoveEvent,d),this.startEvent=this.lastMoveEvent),g&&g(this.lastMoveEvent,d)},this.handlePointerMove=(d,f)=>{this.lastMoveEvent=d,this.lastMoveEventInfo=kd(f,this.transformPagePoint),Se.update(this.updatePoint,!0)},this.handlePointerUp=(d,f)=>{this.end();const{onEnd:h,onSessionEnd:v,resumeAnimation:y}=this.handlers;if(this.dragSnapToOrigin&&y&&y(),!(this.lastMoveEvent&&this.lastMoveEventInfo))return;const w=Cd(d.type==="pointercancel"?this.lastMoveEventInfo:kd(f,this.transformPagePoint),this.history);this.startEvent&&h&&h(d,w),v&&v(d,w)},!bk(e))return;this.dragSnapToOrigin=s,this.handlers=n,this.transformPagePoint=i,this.contextWindow=r||window;const o=$a(e),a=kd(o,this.transformPagePoint),{point:l}=a,{timestamp:u}=at;this.history=[{...l,timestamp:u}];const{onSessionStart:c}=n;c&&c(e,Cd(a,this.history)),this.removeListeners=Xi(Yi(this.contextWindow,"pointermove",this.handlePointerMove),Yi(this.contextWindow,"pointerup",this.handlePointerUp),Yi(this.contextWindow,"pointercancel",this.handlePointerUp))}updateHandlers(e){this.handlers=e}end(){this.removeListeners&&this.removeListeners(),tr(this.updatePoint)}}function kd(t,e){return e?{point:e(t.point)}:t}function Ny(t,e){return{x:t.x-e.x,y:t.y-e.y}}function Cd({point:t},e){return{point:t,delta:Ny(t,_k(e)),offset:Ny(t,mO(e)),velocity:gO(e,.1)}}function mO(t){return t[0]}function _k(t){return t[t.length-1]}function gO(t,e){if(t.length<2)return{x:0,y:0};let n=t.length-1,i=null;const r=_k(t);for(;n>=0&&(i=t[n],!(r.timestamp-i.timestamp>hi(e)));)n--;if(!i)return{x:0,y:0};const s=pi(r.timestamp-i.timestamp);if(s===0)return{x:0,y:0};const o={x:(r.x-i.x)/s,y:(r.y-i.y)/s};return o.x===1/0&&(o.x=0),o.y===1/0&&(o.y=0),o}function hs(t){return t&&typeof t=="object"&&Object.prototype.hasOwnProperty.call(t,"current")}const kk=1e-4,yO=1-kk,vO=1+kk,Ck=.01,xO=0-Ck,wO=0+Ck;function Yt(t){return t.max-t.min}function bO(t,e,n){return Math.abs(t-e)<=n}function Ay(t,e,n,i=.5){t.origin=i,t.originPoint=Ie(e.min,e.max,t.origin),t.scale=Yt(n)/Yt(e),t.translate=Ie(n.min,n.max,t.origin)-t.originPoint,(t.scale>=yO&&t.scale<=vO||isNaN(t.scale))&&(t.scale=1),(t.translate>=xO&&t.translate<=wO||isNaN(t.translate))&&(t.translate=0)}function Uo(t,e,n,i){Ay(t.x,e.x,n.x,i?i.originX:void 0),Ay(t.y,e.y,n.y,i?i.originY:void 0)}function Ry(t,e,n){t.min=n.min+e.min,t.max=t.min+Yt(e)}function SO(t,e,n){Ry(t.x,e.x,n.x),Ry(t.y,e.y,n.y)}function Fy(t,e,n){t.min=e.min-n.min,t.max=t.min+Yt(e)}function $o(t,e,n){Fy(t.x,e.x,n.x),Fy(t.y,e.y,n.y)}function _O(t,{min:e,max:n},i){return e!==void 0&&t<e?t=i?Ie(e,t,i.min):Math.max(t,e):n!==void 0&&t>n&&(t=i?Ie(n,t,i.max):Math.min(t,n)),t}function Iy(t,e,n){return{min:e!==void 0?t.min+e:void 0,max:n!==void 0?t.max+n-(t.max-t.min):void 0}}function kO(t,{top:e,left:n,bottom:i,right:r}){return{x:Iy(t.x,n,r),y:Iy(t.y,e,i)}}function Oy(t,e){let n=e.min-t.min,i=e.max-t.max;return e.max-e.min<t.max-t.min&&([n,i]=[i,n]),{min:n,max:i}}function CO(t,e){return{x:Oy(t.x,e.x),y:Oy(t.y,e.y)}}function TO(t,e){let n=.5;const i=Yt(t),r=Yt(e);return r>i?n=Qs(e.min,e.max-i,t.min):i>r&&(n=Qs(t.min,t.max-r,e.min)),wi(0,1,n)}function PO(t,e){const n={};return e.min!==void 0&&(n.min=e.min-t.min),e.max!==void 0&&(n.max=e.max-t.min),n}const th=.35;function EO(t=th){return t===!1?t=0:t===!0&&(t=th),{x:jy(t,"left","right"),y:jy(t,"top","bottom")}}function jy(t,e,n){return{min:Ly(t,e),max:Ly(t,n)}}function Ly(t,e){return typeof t=="number"?t:t[e]||0}const zy=()=>({translate:0,scale:1,origin:0,originPoint:0}),ps=()=>({x:zy(),y:zy()}),Vy=()=>({min:0,max:0}),Be=()=>({x:Vy(),y:Vy()});function sn(t){return[t("x"),t("y")]}function Tk({top:t,left:e,right:n,bottom:i}){return{x:{min:e,max:n},y:{min:t,max:i}}}function MO({x:t,y:e}){return{top:e.min,right:t.max,bottom:e.max,left:t.min}}function DO(t,e){if(!e)return t;const n=e({x:t.left,y:t.top}),i=e({x:t.right,y:t.bottom});return{top:n.y,left:n.x,bottom:i.y,right:i.x}}function Td(t){return t===void 0||t===1}function nh({scale:t,scaleX:e,scaleY:n}){return!Td(t)||!Td(e)||!Td(n)}function yr(t){return nh(t)||Pk(t)||t.z||t.rotate||t.rotateX||t.rotateY||t.skewX||t.skewY}function Pk(t){return By(t.x)||By(t.y)}function By(t){return t&&t!=="0%"}function Su(t,e,n){const i=t-n,r=e*i;return n+r}function Uy(t,e,n,i,r){return r!==void 0&&(t=Su(t,r,i)),Su(t,n,i)+e}function ih(t,e=0,n=1,i,r){t.min=Uy(t.min,e,n,i,r),t.max=Uy(t.max,e,n,i,r)}function Ek(t,{x:e,y:n}){ih(t.x,e.translate,e.scale,e.originPoint),ih(t.y,n.translate,n.scale,n.originPoint)}const $y=.999999999999,Wy=1.0000000000001;function NO(t,e,n,i=!1){const r=n.length;if(!r)return;e.x=e.y=1;let s,o;for(let a=0;a<r;a++){s=n[a],o=s.projectionDelta;const{visualElement:l}=s.options;l&&l.props.style&&l.props.style.display==="contents"||(i&&s.options.layoutScroll&&s.scroll&&s!==s.root&&gs(t,{x:-s.scroll.offset.x,y:-s.scroll.offset.y}),o&&(e.x*=o.x.scale,e.y*=o.y.scale,Ek(t,o)),i&&yr(s.latestValues)&&gs(t,s.latestValues))}e.x<Wy&&e.x>$y&&(e.x=1),e.y<Wy&&e.y>$y&&(e.y=1)}function ms(t,e){t.min=t.min+e,t.max=t.max+e}function Hy(t,e,n,i,r=.5){const s=Ie(t.min,t.max,r);ih(t,e,n,s,i)}function gs(t,e){Hy(t.x,e.x,e.scaleX,e.scale,e.originX),Hy(t.y,e.y,e.scaleY,e.scale,e.originY)}function Mk(t,e){return Tk(DO(t.getBoundingClientRect(),e))}function AO(t,e,n){const i=Mk(t,n),{scroll:r}=e;return r&&(ms(i.x,r.offset.x),ms(i.y,r.offset.y)),i}const Dk=({current:t})=>t?t.ownerDocument.defaultView:null,RO=new WeakMap;class FO{constructor(e){this.openDragLock=null,this.isDragging=!1,this.currentDirection=null,this.originPoint={x:0,y:0},this.constraints=!1,this.hasMutatedConstraints=!1,this.elastic=Be(),this.visualElement=e}start(e,{snapToCursor:n=!1}={}){const{presenceContext:i}=this.visualElement;if(i&&i.isPresent===!1)return;const r=c=>{const{dragSnapToOrigin:d}=this.getProps();d?this.pauseAnimation():this.stopAnimation(),n&&this.snapToCursor($a(c).point)},s=(c,d)=>{const{drag:f,dragPropagation:h,onDragStart:v}=this.getProps();if(f&&!h&&(this.openDragLock&&this.openDragLock(),this.openDragLock=fO(f),!this.openDragLock))return;this.isDragging=!0,this.currentDirection=null,this.resolveConstraints(),this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!0,this.visualElement.projection.target=void 0),sn(w=>{let g=this.getAxisMotionValue(w).get()||0;if(Gn.test(g)){const{projection:m}=this.visualElement;if(m&&m.layout){const x=m.layout.layoutBox[w];x&&(g=Yt(x)*(parseFloat(g)/100))}}this.originPoint[w]=g}),v&&Se.postRender(()=>v(c,d)),Jf(this.visualElement,"transform");const{animationState:y}=this.visualElement;y&&y.setActive("whileDrag",!0)},o=(c,d)=>{const{dragPropagation:f,dragDirectionLock:h,onDirectionLock:v,onDrag:y}=this.getProps();if(!f&&!this.openDragLock)return;const{offset:w}=d;if(h&&this.currentDirection===null){this.currentDirection=IO(w),this.currentDirection!==null&&v&&v(this.currentDirection);return}this.updateAxis("x",d.point,w),this.updateAxis("y",d.point,w),this.visualElement.render(),y&&y(c,d)},a=(c,d)=>this.stop(c,d),l=()=>sn(c=>{var d;return this.getAnimationState(c)==="paused"&&((d=this.getAxisMotionValue(c).animation)===null||d===void 0?void 0:d.play())}),{dragSnapToOrigin:u}=this.getProps();this.panSession=new Sk(e,{onSessionStart:r,onStart:s,onMove:o,onSessionEnd:a,resumeAnimation:l},{transformPagePoint:this.visualElement.getTransformPagePoint(),dragSnapToOrigin:u,contextWindow:Dk(this.visualElement)})}stop(e,n){const i=this.isDragging;if(this.cancel(),!i)return;const{velocity:r}=n;this.startAnimation(r);const{onDragEnd:s}=this.getProps();s&&Se.postRender(()=>s(e,n))}cancel(){this.isDragging=!1;const{projection:e,animationState:n}=this.visualElement;e&&(e.isAnimationBlocked=!1),this.panSession&&this.panSession.end(),this.panSession=void 0;const{dragPropagation:i}=this.getProps();!i&&this.openDragLock&&(this.openDragLock(),this.openDragLock=null),n&&n.setActive("whileDrag",!1)}updateAxis(e,n,i){const{drag:r}=this.getProps();if(!i||!gl(e,r,this.currentDirection))return;const s=this.getAxisMotionValue(e);let o=this.originPoint[e]+i[e];this.constraints&&this.constraints[e]&&(o=_O(o,this.constraints[e],this.elastic[e])),s.set(o)}resolveConstraints(){var e;const{dragConstraints:n,dragElastic:i}=this.getProps(),r=this.visualElement.projection&&!this.visualElement.projection.layout?this.visualElement.projection.measure(!1):(e=this.visualElement.projection)===null||e===void 0?void 0:e.layout,s=this.constraints;n&&hs(n)?this.constraints||(this.constraints=this.resolveRefConstraints()):n&&r?this.constraints=kO(r.layoutBox,n):this.constraints=!1,this.elastic=EO(i),s!==this.constraints&&r&&this.constraints&&!this.hasMutatedConstraints&&sn(o=>{this.constraints!==!1&&this.getAxisMotionValue(o)&&(this.constraints[o]=PO(r.layoutBox[o],this.constraints[o]))})}resolveRefConstraints(){const{dragConstraints:e,onMeasureDragConstraints:n}=this.getProps();if(!e||!hs(e))return!1;const i=e.current,{projection:r}=this.visualElement;if(!r||!r.layout)return!1;const s=AO(i,r.root,this.visualElement.getTransformPagePoint());let o=CO(r.layout.layoutBox,s);if(n){const a=n(MO(o));this.hasMutatedConstraints=!!a,a&&(o=Tk(a))}return o}startAnimation(e){const{drag:n,dragMomentum:i,dragElastic:r,dragTransition:s,dragSnapToOrigin:o,onDragTransitionEnd:a}=this.getProps(),l=this.constraints||{},u=sn(c=>{if(!gl(c,n,this.currentDirection))return;let d=l&&l[c]||{};o&&(d={min:0,max:0});const f=r?200:1e6,h=r?40:1e7,v={type:"inertia",velocity:i?e[c]:0,bounceStiffness:f,bounceDamping:h,timeConstant:750,restDelta:1,restSpeed:10,...s,...d};return this.startAxisValueAnimation(c,v)});return Promise.all(u).then(a)}startAxisValueAnimation(e,n){const i=this.getAxisMotionValue(e);return Jf(this.visualElement,e),i.start(Vp(e,i,0,n,this.visualElement,!1))}stopAnimation(){sn(e=>this.getAxisMotionValue(e).stop())}pauseAnimation(){sn(e=>{var n;return(n=this.getAxisMotionValue(e).animation)===null||n===void 0?void 0:n.pause()})}getAnimationState(e){var n;return(n=this.getAxisMotionValue(e).animation)===null||n===void 0?void 0:n.state}getAxisMotionValue(e){const n=`_drag${e.toUpperCase()}`,i=this.visualElement.getProps(),r=i[n];return r||this.visualElement.getValue(e,(i.initial?i.initial[e]:void 0)||0)}snapToCursor(e){sn(n=>{const{drag:i}=this.getProps();if(!gl(n,i,this.currentDirection))return;const{projection:r}=this.visualElement,s=this.getAxisMotionValue(n);if(r&&r.layout){const{min:o,max:a}=r.layout.layoutBox[n];s.set(e[n]-Ie(o,a,.5))}})}scalePositionWithinConstraints(){if(!this.visualElement.current)return;const{drag:e,dragConstraints:n}=this.getProps(),{projection:i}=this.visualElement;if(!hs(n)||!i||!this.constraints)return;this.stopAnimation();const r={x:0,y:0};sn(o=>{const a=this.getAxisMotionValue(o);if(a&&this.constraints!==!1){const l=a.get();r[o]=TO({min:l,max:l},this.constraints[o])}});const{transformTemplate:s}=this.visualElement.getProps();this.visualElement.current.style.transform=s?s({},""):"none",i.root&&i.root.updateScroll(),i.updateLayout(),this.resolveConstraints(),sn(o=>{if(!gl(o,e,null))return;const a=this.getAxisMotionValue(o),{min:l,max:u}=this.constraints[o];a.set(Ie(l,u,r[o]))})}addListeners(){if(!this.visualElement.current)return;RO.set(this.visualElement,this);const e=this.visualElement.current,n=Yi(e,"pointerdown",l=>{const{drag:u,dragListener:c=!0}=this.getProps();u&&c&&this.start(l)}),i=()=>{const{dragConstraints:l}=this.getProps();hs(l)&&l.current&&(this.constraints=this.resolveRefConstraints())},{projection:r}=this.visualElement,s=r.addEventListener("measure",i);r&&!r.layout&&(r.root&&r.root.updateScroll(),r.updateLayout()),Se.read(i);const o=li(window,"resize",()=>this.scalePositionWithinConstraints()),a=r.addEventListener("didUpdate",({delta:l,hasLayoutChanged:u})=>{this.isDragging&&u&&(sn(c=>{const d=this.getAxisMotionValue(c);d&&(this.originPoint[c]+=l[c].translate,d.set(d.get()+l[c].translate))}),this.visualElement.render())});return()=>{o(),n(),s(),a&&a()}}getProps(){const e=this.visualElement.getProps(),{drag:n=!1,dragDirectionLock:i=!1,dragPropagation:r=!1,dragConstraints:s=!1,dragElastic:o=th,dragMomentum:a=!0}=e;return{...e,drag:n,dragDirectionLock:i,dragPropagation:r,dragConstraints:s,dragElastic:o,dragMomentum:a}}}function gl(t,e,n){return(e===!0||e===t)&&(n===null||n===t)}function IO(t,e=10){let n=null;return Math.abs(t.y)>e?n="y":Math.abs(t.x)>e&&(n="x"),n}class OO extends dr{constructor(e){super(e),this.removeGroupControls=bt,this.removeListeners=bt,this.controls=new FO(e)}mount(){const{dragControls:e}=this.node.getProps();e&&(this.removeGroupControls=e.subscribe(this.controls)),this.removeListeners=this.controls.addListeners()||bt}unmount(){this.removeGroupControls(),this.removeListeners()}}const qy=t=>(e,n)=>{t&&Se.postRender(()=>t(e,n))};class jO extends dr{constructor(){super(...arguments),this.removePointerDownListener=bt}onPointerDown(e){this.session=new Sk(e,this.createPanHandlers(),{transformPagePoint:this.node.getTransformPagePoint(),contextWindow:Dk(this.node)})}createPanHandlers(){const{onPanSessionStart:e,onPanStart:n,onPan:i,onPanEnd:r}=this.node.getProps();return{onSessionStart:qy(e),onStart:qy(n),onMove:i,onEnd:(s,o)=>{delete this.session,r&&Se.postRender(()=>r(s,o))}}}mount(){this.removePointerDownListener=Yi(this.node.current,"pointerdown",e=>this.onPointerDown(e))}update(){this.session&&this.session.updateHandlers(this.createPanHandlers())}unmount(){this.removePointerDownListener(),this.session&&this.session.end()}}const mc=S.createContext(null);function LO(){const t=S.useContext(mc);if(t===null)return[!0,null];const{isPresent:e,onExitComplete:n,register:i}=t,r=S.useId();S.useEffect(()=>i(r),[]);const s=S.useCallback(()=>n&&n(r),[r,n]);return!e&&n?[!1,s]:[!0]}const Hp=S.createContext({}),Nk=S.createContext({}),Ol={hasAnimatedSinceResize:!0,hasEverUpdated:!1};function Gy(t,e){return e.max===e.min?0:t/(e.max-e.min)*100}const vo={correct:(t,e)=>{if(!e.target)return t;if(typeof t=="string")if(Y.test(t))t=parseFloat(t);else return t;const n=Gy(t,e.target.x),i=Gy(t,e.target.y);return`${n}% ${i}%`}},zO={correct:(t,{treeScale:e,projectionDelta:n})=>{const i=t,r=nr.parse(t);if(r.length>5)return i;const s=nr.createTransformer(t),o=typeof r[0]!="number"?1:0,a=n.x.scale*e.x,l=n.y.scale*e.y;r[0+o]/=a,r[1+o]/=l;const u=Ie(a,l,.5);return typeof r[2+o]=="number"&&(r[2+o]/=u),typeof r[3+o]=="number"&&(r[3+o]/=u),s(r)}},_u={};function VO(t){Object.assign(_u,t)}const{schedule:qp,cancel:I6}=A2(queueMicrotask,!1);class BO extends S.Component{componentDidMount(){const{visualElement:e,layoutGroup:n,switchLayoutGroup:i,layoutId:r}=this.props,{projection:s}=e;VO(UO),s&&(n.group&&n.group.add(s),i&&i.register&&r&&i.register(s),s.root.didUpdate(),s.addEventListener("animationComplete",()=>{this.safeToRemove()}),s.setOptions({...s.options,onExitComplete:()=>this.safeToRemove()})),Ol.hasEverUpdated=!0}getSnapshotBeforeUpdate(e){const{layoutDependency:n,visualElement:i,drag:r,isPresent:s}=this.props,o=i.projection;return o&&(o.isPresent=s,r||e.layoutDependency!==n||n===void 0?o.willUpdate():this.safeToRemove(),e.isPresent!==s&&(s?o.promote():o.relegate()||Se.postRender(()=>{const a=o.getStack();(!a||!a.members.length)&&this.safeToRemove()}))),null}componentDidUpdate(){const{projection:e}=this.props.visualElement;e&&(e.root.didUpdate(),qp.postRender(()=>{!e.currentAnimation&&e.isLead()&&this.safeToRemove()}))}componentWillUnmount(){const{visualElement:e,layoutGroup:n,switchLayoutGroup:i}=this.props,{projection:r}=e;r&&(r.scheduleCheckAfterUnmount(),n&&n.group&&n.group.remove(r),i&&i.deregister&&i.deregister(r))}safeToRemove(){const{safeToRemove:e}=this.props;e&&e()}render(){return null}}function Ak(t){const[e,n]=LO(),i=S.useContext(Hp);return p.jsx(BO,{...t,layoutGroup:i,switchLayoutGroup:S.useContext(Nk),isPresent:e,safeToRemove:n})}const UO={borderRadius:{...vo,applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]},borderTopLeftRadius:vo,borderTopRightRadius:vo,borderBottomLeftRadius:vo,borderBottomRightRadius:vo,boxShadow:zO},Rk=["TopLeft","TopRight","BottomLeft","BottomRight"],$O=Rk.length,Qy=t=>typeof t=="string"?parseFloat(t):t,Ky=t=>typeof t=="number"||Y.test(t);function WO(t,e,n,i,r,s){r?(t.opacity=Ie(0,n.opacity!==void 0?n.opacity:1,HO(i)),t.opacityExit=Ie(e.opacity!==void 0?e.opacity:1,0,qO(i))):s&&(t.opacity=Ie(e.opacity!==void 0?e.opacity:1,n.opacity!==void 0?n.opacity:1,i));for(let o=0;o<$O;o++){const a=`border${Rk[o]}Radius`;let l=Zy(e,a),u=Zy(n,a);if(l===void 0&&u===void 0)continue;l||(l=0),u||(u=0),l===0||u===0||Ky(l)===Ky(u)?(t[a]=Math.max(Ie(Qy(l),Qy(u),i),0),(Gn.test(u)||Gn.test(l))&&(t[a]+="%")):t[a]=u}(e.rotate||n.rotate)&&(t.rotate=Ie(e.rotate||0,n.rotate||0,i))}function Zy(t,e){return t[e]!==void 0?t[e]:t.borderRadius}const HO=Fk(0,.5,z2),qO=Fk(.5,.95,bt);function Fk(t,e,n){return i=>i<t?0:i>e?1:n(Qs(t,e,i))}function Xy(t,e){t.min=e.min,t.max=e.max}function nn(t,e){Xy(t.x,e.x),Xy(t.y,e.y)}function Yy(t,e){t.translate=e.translate,t.scale=e.scale,t.originPoint=e.originPoint,t.origin=e.origin}function Jy(t,e,n,i,r){return t-=e,t=Su(t,1/n,i),r!==void 0&&(t=Su(t,1/r,i)),t}function GO(t,e=0,n=1,i=.5,r,s=t,o=t){if(Gn.test(e)&&(e=parseFloat(e),e=Ie(o.min,o.max,e/100)-o.min),typeof e!="number")return;let a=Ie(s.min,s.max,i);t===s&&(a-=e),t.min=Jy(t.min,e,n,a,r),t.max=Jy(t.max,e,n,a,r)}function ev(t,e,[n,i,r],s,o){GO(t,e[n],e[i],e[r],e.scale,s,o)}const QO=["x","scaleX","originX"],KO=["y","scaleY","originY"];function tv(t,e,n,i){ev(t.x,e,QO,n?n.x:void 0,i?i.x:void 0),ev(t.y,e,KO,n?n.y:void 0,i?i.y:void 0)}function nv(t){return t.translate===0&&t.scale===1}function Ik(t){return nv(t.x)&&nv(t.y)}function iv(t,e){return t.min===e.min&&t.max===e.max}function ZO(t,e){return iv(t.x,e.x)&&iv(t.y,e.y)}function rv(t,e){return Math.round(t.min)===Math.round(e.min)&&Math.round(t.max)===Math.round(e.max)}function Ok(t,e){return rv(t.x,e.x)&&rv(t.y,e.y)}function sv(t){return Yt(t.x)/Yt(t.y)}function ov(t,e){return t.translate===e.translate&&t.scale===e.scale&&t.originPoint===e.originPoint}class XO{constructor(){this.members=[]}add(e){Bp(this.members,e),e.scheduleRender()}remove(e){if(Up(this.members,e),e===this.prevLead&&(this.prevLead=void 0),e===this.lead){const n=this.members[this.members.length-1];n&&this.promote(n)}}relegate(e){const n=this.members.findIndex(r=>e===r);if(n===0)return!1;let i;for(let r=n;r>=0;r--){const s=this.members[r];if(s.isPresent!==!1){i=s;break}}return i?(this.promote(i),!0):!1}promote(e,n){const i=this.lead;if(e!==i&&(this.prevLead=i,this.lead=e,e.show(),i)){i.instance&&i.scheduleRender(),e.scheduleRender(),e.resumeFrom=i,n&&(e.resumeFrom.preserveOpacity=!0),i.snapshot&&(e.snapshot=i.snapshot,e.snapshot.latestValues=i.animationValues||i.latestValues),e.root&&e.root.isUpdating&&(e.isLayoutDirty=!0);const{crossfade:r}=e.options;r===!1&&i.hide()}}exitAnimationComplete(){this.members.forEach(e=>{const{options:n,resumingFrom:i}=e;n.onExitComplete&&n.onExitComplete(),i&&i.options.onExitComplete&&i.options.onExitComplete()})}scheduleRender(){this.members.forEach(e=>{e.instance&&e.scheduleRender(!1)})}removeLeadSnapshot(){this.lead&&this.lead.snapshot&&(this.lead.snapshot=void 0)}}function YO(t,e,n){let i="";const r=t.x.translate/e.x,s=t.y.translate/e.y,o=(n==null?void 0:n.z)||0;if((r||s||o)&&(i=`translate3d(${r}px, ${s}px, ${o}px) `),(e.x!==1||e.y!==1)&&(i+=`scale(${1/e.x}, ${1/e.y}) `),n){const{transformPerspective:u,rotate:c,rotateX:d,rotateY:f,skewX:h,skewY:v}=n;u&&(i=`perspective(${u}px) ${i}`),c&&(i+=`rotate(${c}deg) `),d&&(i+=`rotateX(${d}deg) `),f&&(i+=`rotateY(${f}deg) `),h&&(i+=`skewX(${h}deg) `),v&&(i+=`skewY(${v}deg) `)}const a=t.x.scale*e.x,l=t.y.scale*e.y;return(a!==1||l!==1)&&(i+=`scale(${a}, ${l})`),i||"none"}const JO=(t,e)=>t.depth-e.depth;class ej{constructor(){this.children=[],this.isDirty=!1}add(e){Bp(this.children,e),this.isDirty=!0}remove(e){Up(this.children,e),this.isDirty=!0}forEach(e){this.isDirty&&this.children.sort(JO),this.isDirty=!1,this.children.forEach(e)}}function jl(t){const e=vt(t)?t.get():t;return $4(e)?e.toValue():e}function tj(t,e){const n=Qn.now(),i=({timestamp:r})=>{const s=r-n;s>=e&&(tr(i),t(s-e))};return Se.read(i,!0),()=>tr(i)}function nj(t){return t instanceof SVGElement&&t.tagName!=="svg"}function ij(t,e,n){const i=vt(t)?t:ga(t);return i.start(Vp("",i,e,n)),i.animation}const vr={type:"projectionFrame",totalNodes:0,resolvedTargetDeltas:0,recalculatedProjection:0},To=typeof window<"u"&&window.MotionDebug!==void 0,Pd=["","X","Y","Z"],rj={visibility:"hidden"},av=1e3;let sj=0;function Ed(t,e,n,i){const{latestValues:r}=e;r[t]&&(n[t]=r[t],e.setStaticValue(t,0),i&&(i[t]=0))}function jk(t){if(t.hasCheckedOptimisedAppear=!0,t.root===t)return;const{visualElement:e}=t.options;if(!e)return;const n=gk(e);if(window.MotionHasOptimisedAnimation(n,"transform")){const{layout:r,layoutId:s}=t.options;window.MotionCancelOptimisedAnimation(n,"transform",Se,!(r||s))}const{parent:i}=t;i&&!i.hasCheckedOptimisedAppear&&jk(i)}function Lk({attachResizeListener:t,defaultParent:e,measureScroll:n,checkIsScrollRoot:i,resetTransform:r}){return class{constructor(o={},a=e==null?void 0:e()){this.id=sj++,this.animationId=0,this.children=new Set,this.options={},this.isTreeAnimating=!1,this.isAnimationBlocked=!1,this.isLayoutDirty=!1,this.isProjectionDirty=!1,this.isSharedProjectionDirty=!1,this.isTransformDirty=!1,this.updateManuallyBlocked=!1,this.updateBlockedByResize=!1,this.isUpdating=!1,this.isSVG=!1,this.needsReset=!1,this.shouldResetTransform=!1,this.hasCheckedOptimisedAppear=!1,this.treeScale={x:1,y:1},this.eventHandlers=new Map,this.hasTreeAnimated=!1,this.updateScheduled=!1,this.scheduleUpdate=()=>this.update(),this.projectionUpdateScheduled=!1,this.checkUpdateFailed=()=>{this.isUpdating&&(this.isUpdating=!1,this.clearAllSnapshots())},this.updateProjection=()=>{this.projectionUpdateScheduled=!1,To&&(vr.totalNodes=vr.resolvedTargetDeltas=vr.recalculatedProjection=0),this.nodes.forEach(lj),this.nodes.forEach(hj),this.nodes.forEach(pj),this.nodes.forEach(uj),To&&window.MotionDebug.record(vr)},this.resolvedRelativeTargetAt=0,this.hasProjected=!1,this.isVisible=!0,this.animationProgress=0,this.sharedNodes=new Map,this.latestValues=o,this.root=a?a.root||a:this,this.path=a?[...a.path,a]:[],this.parent=a,this.depth=a?a.depth+1:0;for(let l=0;l<this.path.length;l++)this.path[l].shouldResetTransform=!0;this.root===this&&(this.nodes=new ej)}addEventListener(o,a){return this.eventHandlers.has(o)||this.eventHandlers.set(o,new $p),this.eventHandlers.get(o).add(a)}notifyListeners(o,...a){const l=this.eventHandlers.get(o);l&&l.notify(...a)}hasListeners(o){return this.eventHandlers.has(o)}mount(o,a=this.root.hasTreeAnimated){if(this.instance)return;this.isSVG=nj(o),this.instance=o;const{layoutId:l,layout:u,visualElement:c}=this.options;if(c&&!c.current&&c.mount(o),this.root.nodes.add(this),this.parent&&this.parent.children.add(this),a&&(u||l)&&(this.isLayoutDirty=!0),t){let d;const f=()=>this.root.updateBlockedByResize=!1;t(o,()=>{this.root.updateBlockedByResize=!0,d&&d(),d=tj(f,250),Ol.hasAnimatedSinceResize&&(Ol.hasAnimatedSinceResize=!1,this.nodes.forEach(uv))})}l&&this.root.registerSharedNode(l,this),this.options.animate!==!1&&c&&(l||u)&&this.addEventListener("didUpdate",({delta:d,hasLayoutChanged:f,hasRelativeTargetChanged:h,layout:v})=>{if(this.isTreeAnimationBlocked()){this.target=void 0,this.relativeTarget=void 0;return}const y=this.options.transition||c.getDefaultTransition()||xj,{onLayoutAnimationStart:w,onLayoutAnimationComplete:g}=c.getProps(),m=!this.targetLayout||!Ok(this.targetLayout,v)||h,x=!f&&h;if(this.options.layoutRoot||this.resumeFrom&&this.resumeFrom.instance||x||f&&(m||!this.currentAnimation)){this.resumeFrom&&(this.resumingFrom=this.resumeFrom,this.resumingFrom.resumingFrom=void 0),this.setAnimationOrigin(d,x);const b={...Tp(y,"layout"),onPlay:w,onComplete:g};(c.shouldReduceMotion||this.options.layoutRoot)&&(b.delay=0,b.type=!1),this.startAnimation(b)}else f||uv(this),this.isLead()&&this.options.onExitComplete&&this.options.onExitComplete();this.targetLayout=v})}unmount(){this.options.layoutId&&this.willUpdate(),this.root.nodes.remove(this);const o=this.getStack();o&&o.remove(this),this.parent&&this.parent.children.delete(this),this.instance=void 0,tr(this.updateProjection)}blockUpdate(){this.updateManuallyBlocked=!0}unblockUpdate(){this.updateManuallyBlocked=!1}isUpdateBlocked(){return this.updateManuallyBlocked||this.updateBlockedByResize}isTreeAnimationBlocked(){return this.isAnimationBlocked||this.parent&&this.parent.isTreeAnimationBlocked()||!1}startUpdate(){this.isUpdateBlocked()||(this.isUpdating=!0,this.nodes&&this.nodes.forEach(mj),this.animationId++)}getTransformTemplate(){const{visualElement:o}=this.options;return o&&o.getProps().transformTemplate}willUpdate(o=!0){if(this.root.hasTreeAnimated=!0,this.root.isUpdateBlocked()){this.options.onExitComplete&&this.options.onExitComplete();return}if(window.MotionCancelOptimisedAnimation&&!this.hasCheckedOptimisedAppear&&jk(this),!this.root.isUpdating&&this.root.startUpdate(),this.isLayoutDirty)return;this.isLayoutDirty=!0;for(let c=0;c<this.path.length;c++){const d=this.path[c];d.shouldResetTransform=!0,d.updateScroll("snapshot"),d.options.layoutRoot&&d.willUpdate(!1)}const{layoutId:a,layout:l}=this.options;if(a===void 0&&!l)return;const u=this.getTransformTemplate();this.prevTransformTemplateValue=u?u(this.latestValues,""):void 0,this.updateSnapshot(),o&&this.notifyListeners("willUpdate")}update(){if(this.updateScheduled=!1,this.isUpdateBlocked()){this.unblockUpdate(),this.clearAllSnapshots(),this.nodes.forEach(lv);return}this.isUpdating||this.nodes.forEach(dj),this.isUpdating=!1,this.nodes.forEach(fj),this.nodes.forEach(oj),this.nodes.forEach(aj),this.clearAllSnapshots();const a=Qn.now();at.delta=wi(0,1e3/60,a-at.timestamp),at.timestamp=a,at.isProcessing=!0,xd.update.process(at),xd.preRender.process(at),xd.render.process(at),at.isProcessing=!1}didUpdate(){this.updateScheduled||(this.updateScheduled=!0,qp.read(this.scheduleUpdate))}clearAllSnapshots(){this.nodes.forEach(cj),this.sharedNodes.forEach(gj)}scheduleUpdateProjection(){this.projectionUpdateScheduled||(this.projectionUpdateScheduled=!0,Se.preRender(this.updateProjection,!1,!0))}scheduleCheckAfterUnmount(){Se.postRender(()=>{this.isLayoutDirty?this.root.didUpdate():this.root.checkUpdateFailed()})}updateSnapshot(){this.snapshot||!this.instance||(this.snapshot=this.measure())}updateLayout(){if(!this.instance||(this.updateScroll(),!(this.options.alwaysMeasureLayout&&this.isLead())&&!this.isLayoutDirty))return;if(this.resumeFrom&&!this.resumeFrom.instance)for(let l=0;l<this.path.length;l++)this.path[l].updateScroll();const o=this.layout;this.layout=this.measure(!1),this.layoutCorrected=Be(),this.isLayoutDirty=!1,this.projectionDelta=void 0,this.notifyListeners("measure",this.layout.layoutBox);const{visualElement:a}=this.options;a&&a.notify("LayoutMeasure",this.layout.layoutBox,o?o.layoutBox:void 0)}updateScroll(o="measure"){let a=!!(this.options.layoutScroll&&this.instance);if(this.scroll&&this.scroll.animationId===this.root.animationId&&this.scroll.phase===o&&(a=!1),a){const l=i(this.instance);this.scroll={animationId:this.root.animationId,phase:o,isRoot:l,offset:n(this.instance),wasRoot:this.scroll?this.scroll.isRoot:l}}}resetTransform(){if(!r)return;const o=this.isLayoutDirty||this.shouldResetTransform||this.options.alwaysMeasureLayout,a=this.projectionDelta&&!Ik(this.projectionDelta),l=this.getTransformTemplate(),u=l?l(this.latestValues,""):void 0,c=u!==this.prevTransformTemplateValue;o&&(a||yr(this.latestValues)||c)&&(r(this.instance,u),this.shouldResetTransform=!1,this.scheduleRender())}measure(o=!0){const a=this.measurePageBox();let l=this.removeElementScroll(a);return o&&(l=this.removeTransform(l)),wj(l),{animationId:this.root.animationId,measuredBox:a,layoutBox:l,latestValues:{},source:this.id}}measurePageBox(){var o;const{visualElement:a}=this.options;if(!a)return Be();const l=a.measureViewportBox();if(!(((o=this.scroll)===null||o===void 0?void 0:o.wasRoot)||this.path.some(bj))){const{scroll:c}=this.root;c&&(ms(l.x,c.offset.x),ms(l.y,c.offset.y))}return l}removeElementScroll(o){var a;const l=Be();if(nn(l,o),!((a=this.scroll)===null||a===void 0)&&a.wasRoot)return l;for(let u=0;u<this.path.length;u++){const c=this.path[u],{scroll:d,options:f}=c;c!==this.root&&d&&f.layoutScroll&&(d.wasRoot&&nn(l,o),ms(l.x,d.offset.x),ms(l.y,d.offset.y))}return l}applyTransform(o,a=!1){const l=Be();nn(l,o);for(let u=0;u<this.path.length;u++){const c=this.path[u];!a&&c.options.layoutScroll&&c.scroll&&c!==c.root&&gs(l,{x:-c.scroll.offset.x,y:-c.scroll.offset.y}),yr(c.latestValues)&&gs(l,c.latestValues)}return yr(this.latestValues)&&gs(l,this.latestValues),l}removeTransform(o){const a=Be();nn(a,o);for(let l=0;l<this.path.length;l++){const u=this.path[l];if(!u.instance||!yr(u.latestValues))continue;nh(u.latestValues)&&u.updateSnapshot();const c=Be(),d=u.measurePageBox();nn(c,d),tv(a,u.latestValues,u.snapshot?u.snapshot.layoutBox:void 0,c)}return yr(this.latestValues)&&tv(a,this.latestValues),a}setTargetDelta(o){this.targetDelta=o,this.root.scheduleUpdateProjection(),this.isProjectionDirty=!0}setOptions(o){this.options={...this.options,...o,crossfade:o.crossfade!==void 0?o.crossfade:!0}}clearMeasurements(){this.scroll=void 0,this.layout=void 0,this.snapshot=void 0,this.prevTransformTemplateValue=void 0,this.targetDelta=void 0,this.target=void 0,this.isLayoutDirty=!1}forceRelativeParentToResolveTarget(){this.relativeParent&&this.relativeParent.resolvedRelativeTargetAt!==at.timestamp&&this.relativeParent.resolveTargetDelta(!0)}resolveTargetDelta(o=!1){var a;const l=this.getLead();this.isProjectionDirty||(this.isProjectionDirty=l.isProjectionDirty),this.isTransformDirty||(this.isTransformDirty=l.isTransformDirty),this.isSharedProjectionDirty||(this.isSharedProjectionDirty=l.isSharedProjectionDirty);const u=!!this.resumingFrom||this!==l;if(!(o||u&&this.isSharedProjectionDirty||this.isProjectionDirty||!((a=this.parent)===null||a===void 0)&&a.isProjectionDirty||this.attemptToResolveRelativeTarget||this.root.updateBlockedByResize))return;const{layout:d,layoutId:f}=this.options;if(!(!this.layout||!(d||f))){if(this.resolvedRelativeTargetAt=at.timestamp,!this.targetDelta&&!this.relativeTarget){const h=this.getClosestProjectingParent();h&&h.layout&&this.animationProgress!==1?(this.relativeParent=h,this.forceRelativeParentToResolveTarget(),this.relativeTarget=Be(),this.relativeTargetOrigin=Be(),$o(this.relativeTargetOrigin,this.layout.layoutBox,h.layout.layoutBox),nn(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}if(!(!this.relativeTarget&&!this.targetDelta)){if(this.target||(this.target=Be(),this.targetWithTransforms=Be()),this.relativeTarget&&this.relativeTargetOrigin&&this.relativeParent&&this.relativeParent.target?(this.forceRelativeParentToResolveTarget(),SO(this.target,this.relativeTarget,this.relativeParent.target)):this.targetDelta?(this.resumingFrom?this.target=this.applyTransform(this.layout.layoutBox):nn(this.target,this.layout.layoutBox),Ek(this.target,this.targetDelta)):nn(this.target,this.layout.layoutBox),this.attemptToResolveRelativeTarget){this.attemptToResolveRelativeTarget=!1;const h=this.getClosestProjectingParent();h&&!!h.resumingFrom==!!this.resumingFrom&&!h.options.layoutScroll&&h.target&&this.animationProgress!==1?(this.relativeParent=h,this.forceRelativeParentToResolveTarget(),this.relativeTarget=Be(),this.relativeTargetOrigin=Be(),$o(this.relativeTargetOrigin,this.target,h.target),nn(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}To&&vr.resolvedTargetDeltas++}}}getClosestProjectingParent(){if(!(!this.parent||nh(this.parent.latestValues)||Pk(this.parent.latestValues)))return this.parent.isProjecting()?this.parent:this.parent.getClosestProjectingParent()}isProjecting(){return!!((this.relativeTarget||this.targetDelta||this.options.layoutRoot)&&this.layout)}calcProjection(){var o;const a=this.getLead(),l=!!this.resumingFrom||this!==a;let u=!0;if((this.isProjectionDirty||!((o=this.parent)===null||o===void 0)&&o.isProjectionDirty)&&(u=!1),l&&(this.isSharedProjectionDirty||this.isTransformDirty)&&(u=!1),this.resolvedRelativeTargetAt===at.timestamp&&(u=!1),u)return;const{layout:c,layoutId:d}=this.options;if(this.isTreeAnimating=!!(this.parent&&this.parent.isTreeAnimating||this.currentAnimation||this.pendingAnimation),this.isTreeAnimating||(this.targetDelta=this.relativeTarget=void 0),!this.layout||!(c||d))return;nn(this.layoutCorrected,this.layout.layoutBox);const f=this.treeScale.x,h=this.treeScale.y;NO(this.layoutCorrected,this.treeScale,this.path,l),a.layout&&!a.target&&(this.treeScale.x!==1||this.treeScale.y!==1)&&(a.target=a.layout.layoutBox,a.targetWithTransforms=Be());const{target:v}=a;if(!v){this.prevProjectionDelta&&(this.createProjectionDeltas(),this.scheduleRender());return}!this.projectionDelta||!this.prevProjectionDelta?this.createProjectionDeltas():(Yy(this.prevProjectionDelta.x,this.projectionDelta.x),Yy(this.prevProjectionDelta.y,this.projectionDelta.y)),Uo(this.projectionDelta,this.layoutCorrected,v,this.latestValues),(this.treeScale.x!==f||this.treeScale.y!==h||!ov(this.projectionDelta.x,this.prevProjectionDelta.x)||!ov(this.projectionDelta.y,this.prevProjectionDelta.y))&&(this.hasProjected=!0,this.scheduleRender(),this.notifyListeners("projectionUpdate",v)),To&&vr.recalculatedProjection++}hide(){this.isVisible=!1}show(){this.isVisible=!0}scheduleRender(o=!0){var a;if((a=this.options.visualElement)===null||a===void 0||a.scheduleRender(),o){const l=this.getStack();l&&l.scheduleRender()}this.resumingFrom&&!this.resumingFrom.instance&&(this.resumingFrom=void 0)}createProjectionDeltas(){this.prevProjectionDelta=ps(),this.projectionDelta=ps(),this.projectionDeltaWithTransform=ps()}setAnimationOrigin(o,a=!1){const l=this.snapshot,u=l?l.latestValues:{},c={...this.latestValues},d=ps();(!this.relativeParent||!this.relativeParent.options.layoutRoot)&&(this.relativeTarget=this.relativeTargetOrigin=void 0),this.attemptToResolveRelativeTarget=!a;const f=Be(),h=l?l.source:void 0,v=this.layout?this.layout.source:void 0,y=h!==v,w=this.getStack(),g=!w||w.members.length<=1,m=!!(y&&!g&&this.options.crossfade===!0&&!this.path.some(vj));this.animationProgress=0;let x;this.mixTargetDelta=b=>{const k=b/1e3;cv(d.x,o.x,k),cv(d.y,o.y,k),this.setTargetDelta(d),this.relativeTarget&&this.relativeTargetOrigin&&this.layout&&this.relativeParent&&this.relativeParent.layout&&($o(f,this.layout.layoutBox,this.relativeParent.layout.layoutBox),yj(this.relativeTarget,this.relativeTargetOrigin,f,k),x&&ZO(this.relativeTarget,x)&&(this.isProjectionDirty=!1),x||(x=Be()),nn(x,this.relativeTarget)),y&&(this.animationValues=c,WO(c,u,this.latestValues,k,m,g)),this.root.scheduleUpdateProjection(),this.scheduleRender(),this.animationProgress=k},this.mixTargetDelta(this.options.layoutRoot?1e3:0)}startAnimation(o){this.notifyListeners("animationStart"),this.currentAnimation&&this.currentAnimation.stop(),this.resumingFrom&&this.resumingFrom.currentAnimation&&this.resumingFrom.currentAnimation.stop(),this.pendingAnimation&&(tr(this.pendingAnimation),this.pendingAnimation=void 0),this.pendingAnimation=Se.update(()=>{Ol.hasAnimatedSinceResize=!0,this.currentAnimation=ij(0,av,{...o,onUpdate:a=>{this.mixTargetDelta(a),o.onUpdate&&o.onUpdate(a)},onComplete:()=>{o.onComplete&&o.onComplete(),this.completeAnimation()}}),this.resumingFrom&&(this.resumingFrom.currentAnimation=this.currentAnimation),this.pendingAnimation=void 0})}completeAnimation(){this.resumingFrom&&(this.resumingFrom.currentAnimation=void 0,this.resumingFrom.preserveOpacity=void 0);const o=this.getStack();o&&o.exitAnimationComplete(),this.resumingFrom=this.currentAnimation=this.animationValues=void 0,this.notifyListeners("animationComplete")}finishAnimation(){this.currentAnimation&&(this.mixTargetDelta&&this.mixTargetDelta(av),this.currentAnimation.stop()),this.completeAnimation()}applyTransformsToTarget(){const o=this.getLead();let{targetWithTransforms:a,target:l,layout:u,latestValues:c}=o;if(!(!a||!l||!u)){if(this!==o&&this.layout&&u&&zk(this.options.animationType,this.layout.layoutBox,u.layoutBox)){l=this.target||Be();const d=Yt(this.layout.layoutBox.x);l.x.min=o.target.x.min,l.x.max=l.x.min+d;const f=Yt(this.layout.layoutBox.y);l.y.min=o.target.y.min,l.y.max=l.y.min+f}nn(a,l),gs(a,c),Uo(this.projectionDeltaWithTransform,this.layoutCorrected,a,c)}}registerSharedNode(o,a){this.sharedNodes.has(o)||this.sharedNodes.set(o,new XO),this.sharedNodes.get(o).add(a);const u=a.options.initialPromotionConfig;a.promote({transition:u?u.transition:void 0,preserveFollowOpacity:u&&u.shouldPreserveFollowOpacity?u.shouldPreserveFollowOpacity(a):void 0})}isLead(){const o=this.getStack();return o?o.lead===this:!0}getLead(){var o;const{layoutId:a}=this.options;return a?((o=this.getStack())===null||o===void 0?void 0:o.lead)||this:this}getPrevLead(){var o;const{layoutId:a}=this.options;return a?(o=this.getStack())===null||o===void 0?void 0:o.prevLead:void 0}getStack(){const{layoutId:o}=this.options;if(o)return this.root.sharedNodes.get(o)}promote({needsReset:o,transition:a,preserveFollowOpacity:l}={}){const u=this.getStack();u&&u.promote(this,l),o&&(this.projectionDelta=void 0,this.needsReset=!0),a&&this.setOptions({transition:a})}relegate(){const o=this.getStack();return o?o.relegate(this):!1}resetSkewAndRotation(){const{visualElement:o}=this.options;if(!o)return;let a=!1;const{latestValues:l}=o;if((l.z||l.rotate||l.rotateX||l.rotateY||l.rotateZ||l.skewX||l.skewY)&&(a=!0),!a)return;const u={};l.z&&Ed("z",o,u,this.animationValues);for(let c=0;c<Pd.length;c++)Ed(`rotate${Pd[c]}`,o,u,this.animationValues),Ed(`skew${Pd[c]}`,o,u,this.animationValues);o.render();for(const c in u)o.setStaticValue(c,u[c]),this.animationValues&&(this.animationValues[c]=u[c]);o.scheduleRender()}getProjectionStyles(o){var a,l;if(!this.instance||this.isSVG)return;if(!this.isVisible)return rj;const u={visibility:""},c=this.getTransformTemplate();if(this.needsReset)return this.needsReset=!1,u.opacity="",u.pointerEvents=jl(o==null?void 0:o.pointerEvents)||"",u.transform=c?c(this.latestValues,""):"none",u;const d=this.getLead();if(!this.projectionDelta||!this.layout||!d.target){const y={};return this.options.layoutId&&(y.opacity=this.latestValues.opacity!==void 0?this.latestValues.opacity:1,y.pointerEvents=jl(o==null?void 0:o.pointerEvents)||""),this.hasProjected&&!yr(this.latestValues)&&(y.transform=c?c({},""):"none",this.hasProjected=!1),y}const f=d.animationValues||d.latestValues;this.applyTransformsToTarget(),u.transform=YO(this.projectionDeltaWithTransform,this.treeScale,f),c&&(u.transform=c(f,u.transform));const{x:h,y:v}=this.projectionDelta;u.transformOrigin=`${h.origin*100}% ${v.origin*100}% 0`,d.animationValues?u.opacity=d===this?(l=(a=f.opacity)!==null&&a!==void 0?a:this.latestValues.opacity)!==null&&l!==void 0?l:1:this.preserveOpacity?this.latestValues.opacity:f.opacityExit:u.opacity=d===this?f.opacity!==void 0?f.opacity:"":f.opacityExit!==void 0?f.opacityExit:0;for(const y in _u){if(f[y]===void 0)continue;const{correct:w,applyTo:g}=_u[y],m=u.transform==="none"?f[y]:w(f[y],d);if(g){const x=g.length;for(let b=0;b<x;b++)u[g[b]]=m}else u[y]=m}return this.options.layoutId&&(u.pointerEvents=d===this?jl(o==null?void 0:o.pointerEvents)||"":"none"),u}clearSnapshot(){this.resumeFrom=this.snapshot=void 0}resetTree(){this.root.nodes.forEach(o=>{var a;return(a=o.currentAnimation)===null||a===void 0?void 0:a.stop()}),this.root.nodes.forEach(lv),this.root.sharedNodes.clear()}}}function oj(t){t.updateLayout()}function aj(t){var e;const n=((e=t.resumeFrom)===null||e===void 0?void 0:e.snapshot)||t.snapshot;if(t.isLead()&&t.layout&&n&&t.hasListeners("didUpdate")){const{layoutBox:i,measuredBox:r}=t.layout,{animationType:s}=t.options,o=n.source!==t.layout.source;s==="size"?sn(d=>{const f=o?n.measuredBox[d]:n.layoutBox[d],h=Yt(f);f.min=i[d].min,f.max=f.min+h}):zk(s,n.layoutBox,i)&&sn(d=>{const f=o?n.measuredBox[d]:n.layoutBox[d],h=Yt(i[d]);f.max=f.min+h,t.relativeTarget&&!t.currentAnimation&&(t.isProjectionDirty=!0,t.relativeTarget[d].max=t.relativeTarget[d].min+h)});const a=ps();Uo(a,i,n.layoutBox);const l=ps();o?Uo(l,t.applyTransform(r,!0),n.measuredBox):Uo(l,i,n.layoutBox);const u=!Ik(a);let c=!1;if(!t.resumeFrom){const d=t.getClosestProjectingParent();if(d&&!d.resumeFrom){const{snapshot:f,layout:h}=d;if(f&&h){const v=Be();$o(v,n.layoutBox,f.layoutBox);const y=Be();$o(y,i,h.layoutBox),Ok(v,y)||(c=!0),d.options.layoutRoot&&(t.relativeTarget=y,t.relativeTargetOrigin=v,t.relativeParent=d)}}}t.notifyListeners("didUpdate",{layout:i,snapshot:n,delta:l,layoutDelta:a,hasLayoutChanged:u,hasRelativeTargetChanged:c})}else if(t.isLead()){const{onExitComplete:i}=t.options;i&&i()}t.options.transition=void 0}function lj(t){To&&vr.totalNodes++,t.parent&&(t.isProjecting()||(t.isProjectionDirty=t.parent.isProjectionDirty),t.isSharedProjectionDirty||(t.isSharedProjectionDirty=!!(t.isProjectionDirty||t.parent.isProjectionDirty||t.parent.isSharedProjectionDirty)),t.isTransformDirty||(t.isTransformDirty=t.parent.isTransformDirty))}function uj(t){t.isProjectionDirty=t.isSharedProjectionDirty=t.isTransformDirty=!1}function cj(t){t.clearSnapshot()}function lv(t){t.clearMeasurements()}function dj(t){t.isLayoutDirty=!1}function fj(t){const{visualElement:e}=t.options;e&&e.getProps().onBeforeLayoutMeasure&&e.notify("BeforeLayoutMeasure"),t.resetTransform()}function uv(t){t.finishAnimation(),t.targetDelta=t.relativeTarget=t.target=void 0,t.isProjectionDirty=!0}function hj(t){t.resolveTargetDelta()}function pj(t){t.calcProjection()}function mj(t){t.resetSkewAndRotation()}function gj(t){t.removeLeadSnapshot()}function cv(t,e,n){t.translate=Ie(e.translate,0,n),t.scale=Ie(e.scale,1,n),t.origin=e.origin,t.originPoint=e.originPoint}function dv(t,e,n,i){t.min=Ie(e.min,n.min,i),t.max=Ie(e.max,n.max,i)}function yj(t,e,n,i){dv(t.x,e.x,n.x,i),dv(t.y,e.y,n.y,i)}function vj(t){return t.animationValues&&t.animationValues.opacityExit!==void 0}const xj={duration:.45,ease:[.4,0,.1,1]},fv=t=>typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().includes(t),hv=fv("applewebkit/")&&!fv("chrome/")?Math.round:bt;function pv(t){t.min=hv(t.min),t.max=hv(t.max)}function wj(t){pv(t.x),pv(t.y)}function zk(t,e,n){return t==="position"||t==="preserve-aspect"&&!bO(sv(e),sv(n),.2)}function bj(t){var e;return t!==t.root&&((e=t.scroll)===null||e===void 0?void 0:e.wasRoot)}const Sj=Lk({attachResizeListener:(t,e)=>li(t,"resize",e),measureScroll:()=>({x:document.documentElement.scrollLeft||document.body.scrollLeft,y:document.documentElement.scrollTop||document.body.scrollTop}),checkIsScrollRoot:()=>!0}),Md={current:void 0},Vk=Lk({measureScroll:t=>({x:t.scrollLeft,y:t.scrollTop}),defaultParent:()=>{if(!Md.current){const t=new Sj({});t.mount(window),t.setOptions({layoutScroll:!0}),Md.current=t}return Md.current},resetTransform:(t,e)=>{t.style.transform=e!==void 0?e:"none"},checkIsScrollRoot:t=>window.getComputedStyle(t).position==="fixed"}),_j={pan:{Feature:jO},drag:{Feature:OO,ProjectionNode:Vk,MeasureLayout:Ak}};function mv(t,e,n){const{props:i}=t;t.animationState&&i.whileHover&&t.animationState.setActive("whileHover",n);const r=i[n?"onHoverStart":"onHoverEnd"];r&&Se.postRender(()=>r(e,$a(e)))}class kj extends dr{mount(){const{current:e,props:n}=this.node;e&&(this.unmount=dO(e,i=>(mv(this.node,i,!0),r=>mv(this.node,r,!1)),{passive:!n.onHoverStart&&!n.onHoverEnd}))}unmount(){}}class Cj extends dr{constructor(){super(...arguments),this.isActive=!1}onFocus(){let e=!1;try{e=this.node.current.matches(":focus-visible")}catch{e=!0}!e||!this.node.animationState||(this.node.animationState.setActive("whileFocus",!0),this.isActive=!0)}onBlur(){!this.isActive||!this.node.animationState||(this.node.animationState.setActive("whileFocus",!1),this.isActive=!1)}mount(){this.unmount=Xi(li(this.node.current,"focus",()=>this.onFocus()),li(this.node.current,"blur",()=>this.onBlur()))}unmount(){}}const Bk=(t,e)=>e?t===e?!0:Bk(t,e.parentElement):!1;function Dd(t,e){if(!e)return;const n=new PointerEvent("pointer"+t);e(n,$a(n))}class Tj extends dr{constructor(){super(...arguments),this.removeStartListeners=bt,this.removeEndListeners=bt,this.removeAccessibleListeners=bt,this.startPointerPress=(e,n)=>{if(this.isPressing)return;this.removeEndListeners();const i=this.node.getProps(),s=Yi(window,"pointerup",(a,l)=>{if(!this.checkPressEnd())return;const{onTap:u,onTapCancel:c,globalTapTarget:d}=this.node.getProps(),f=!d&&!Bk(this.node.current,a.target)?c:u;f&&Se.update(()=>f(a,l))},{passive:!(i.onTap||i.onPointerUp)}),o=Yi(window,"pointercancel",(a,l)=>this.cancelPress(a,l),{passive:!(i.onTapCancel||i.onPointerCancel)});this.removeEndListeners=Xi(s,o),this.startPress(e,n)},this.startAccessiblePress=()=>{const e=s=>{if(s.key!=="Enter"||this.isPressing)return;const o=a=>{a.key!=="Enter"||!this.checkPressEnd()||Dd("up",(l,u)=>{const{onTap:c}=this.node.getProps();c&&Se.postRender(()=>c(l,u))})};this.removeEndListeners(),this.removeEndListeners=li(this.node.current,"keyup",o),Dd("down",(a,l)=>{this.startPress(a,l)})},n=li(this.node.current,"keydown",e),i=()=>{this.isPressing&&Dd("cancel",(s,o)=>this.cancelPress(s,o))},r=li(this.node.current,"blur",i);this.removeAccessibleListeners=Xi(n,r)}}startPress(e,n){this.isPressing=!0;const{onTapStart:i,whileTap:r}=this.node.getProps();r&&this.node.animationState&&this.node.animationState.setActive("whileTap",!0),i&&Se.postRender(()=>i(e,n))}checkPressEnd(){return this.removeEndListeners(),this.isPressing=!1,this.node.getProps().whileTap&&this.node.animationState&&this.node.animationState.setActive("whileTap",!1),!wk()}cancelPress(e,n){if(!this.checkPressEnd())return;const{onTapCancel:i}=this.node.getProps();i&&Se.postRender(()=>i(e,n))}mount(){const e=this.node.getProps(),n=Yi(e.globalTapTarget?window:this.node.current,"pointerdown",this.startPointerPress,{passive:!(e.onTapStart||e.onPointerStart)}),i=li(this.node.current,"focus",this.startAccessiblePress);this.removeStartListeners=Xi(n,i)}unmount(){this.removeStartListeners(),this.removeEndListeners(),this.removeAccessibleListeners()}}const rh=new WeakMap,Nd=new WeakMap,Pj=t=>{const e=rh.get(t.target);e&&e(t)},Ej=t=>{t.forEach(Pj)};function Mj({root:t,...e}){const n=t||document;Nd.has(n)||Nd.set(n,{});const i=Nd.get(n),r=JSON.stringify(e);return i[r]||(i[r]=new IntersectionObserver(Ej,{root:t,...e})),i[r]}function Dj(t,e,n){const i=Mj(e);return rh.set(t,n),i.observe(t),()=>{rh.delete(t),i.unobserve(t)}}const Nj={some:0,all:1};class Aj extends dr{constructor(){super(...arguments),this.hasEnteredView=!1,this.isInView=!1}startObserver(){this.unmount();const{viewport:e={}}=this.node.getProps(),{root:n,margin:i,amount:r="some",once:s}=e,o={root:n?n.current:void 0,rootMargin:i,threshold:typeof r=="number"?r:Nj[r]},a=l=>{const{isIntersecting:u}=l;if(this.isInView===u||(this.isInView=u,s&&!u&&this.hasEnteredView))return;u&&(this.hasEnteredView=!0),this.node.animationState&&this.node.animationState.setActive("whileInView",u);const{onViewportEnter:c,onViewportLeave:d}=this.node.getProps(),f=u?c:d;f&&f(l)};return Dj(this.node.current,o,a)}mount(){this.startObserver()}update(){if(typeof IntersectionObserver>"u")return;const{props:e,prevProps:n}=this.node;["amount","margin","root"].some(Rj(e,n))&&this.startObserver()}unmount(){}}function Rj({viewport:t={}},{viewport:e={}}={}){return n=>t[n]!==e[n]}const Fj={inView:{Feature:Aj},tap:{Feature:Tj},focus:{Feature:Cj},hover:{Feature:kj}},Ij={layout:{ProjectionNode:Vk,MeasureLayout:Ak}},Gp=S.createContext({transformPagePoint:t=>t,isStatic:!1,reducedMotion:"never"}),gc=S.createContext({}),Qp=typeof window<"u",Uk=Qp?S.useLayoutEffect:S.useEffect,$k=S.createContext({strict:!1});function Oj(t,e,n,i,r){var s,o;const{visualElement:a}=S.useContext(gc),l=S.useContext($k),u=S.useContext(mc),c=S.useContext(Gp).reducedMotion,d=S.useRef();i=i||l.renderer,!d.current&&i&&(d.current=i(t,{visualState:e,parent:a,props:n,presenceContext:u,blockInitialAnimation:u?u.initial===!1:!1,reducedMotionConfig:c}));const f=d.current,h=S.useContext(Nk);f&&!f.projection&&r&&(f.type==="html"||f.type==="svg")&&jj(d.current,n,r,h);const v=S.useRef(!1);S.useInsertionEffect(()=>{f&&v.current&&f.update(n,u)});const y=n[mk],w=S.useRef(!!y&&!(!((s=window.MotionHandoffIsComplete)===null||s===void 0)&&s.call(window,y))&&((o=window.MotionHasOptimisedAnimation)===null||o===void 0?void 0:o.call(window,y)));return Uk(()=>{f&&(v.current=!0,window.MotionIsMounted=!0,f.updateFeatures(),qp.render(f.render),w.current&&f.animationState&&f.animationState.animateChanges())}),S.useEffect(()=>{f&&(!w.current&&f.animationState&&f.animationState.animateChanges(),w.current&&(queueMicrotask(()=>{var g;(g=window.MotionHandoffMarkAsComplete)===null||g===void 0||g.call(window,y)}),w.current=!1))}),f}function jj(t,e,n,i){const{layoutId:r,layout:s,drag:o,dragConstraints:a,layoutScroll:l,layoutRoot:u}=e;t.projection=new n(t.latestValues,e["data-framer-portal-id"]?void 0:Wk(t.parent)),t.projection.setOptions({layoutId:r,layout:s,alwaysMeasureLayout:!!o||a&&hs(a),visualElement:t,animationType:typeof s=="string"?s:"both",initialPromotionConfig:i,layoutScroll:l,layoutRoot:u})}function Wk(t){if(t)return t.options.allowProjection!==!1?t.projection:Wk(t.parent)}function Lj(t,e,n){return S.useCallback(i=>{i&&t.mount&&t.mount(i),e&&(i?e.mount(i):e.unmount()),n&&(typeof n=="function"?n(i):hs(n)&&(n.current=i))},[e])}function yc(t){return fc(t.animate)||Cp.some(e=>ha(t[e]))}function Hk(t){return!!(yc(t)||t.variants)}function zj(t,e){if(yc(t)){const{initial:n,animate:i}=t;return{initial:n===!1||ha(n)?n:void 0,animate:ha(i)?i:void 0}}return t.inherit!==!1?e:{}}function Vj(t){const{initial:e,animate:n}=zj(t,S.useContext(gc));return S.useMemo(()=>({initial:e,animate:n}),[gv(e),gv(n)])}function gv(t){return Array.isArray(t)?t.join(" "):t}const yv={animation:["animate","variants","whileHover","whileTap","exit","whileInView","whileFocus","whileDrag"],exit:["exit"],drag:["drag","dragControls"],focus:["whileFocus"],hover:["whileHover","onHoverStart","onHoverEnd"],tap:["whileTap","onTap","onTapStart","onTapCancel"],pan:["onPan","onPanStart","onPanSessionStart","onPanEnd"],inView:["whileInView","onViewportEnter","onViewportLeave"],layout:["layout","layoutId"]},Ks={};for(const t in yv)Ks[t]={isEnabled:e=>yv[t].some(n=>!!e[n])};function Bj(t){for(const e in t)Ks[e]={...Ks[e],...t[e]}}const Uj=Symbol.for("motionComponentSymbol");function $j({preloadedFeatures:t,createVisualElement:e,useRender:n,useVisualState:i,Component:r}){t&&Bj(t);function s(a,l){let u;const c={...S.useContext(Gp),...a,layoutId:Wj(a)},{isStatic:d}=c,f=Vj(a),h=i(a,d);if(!d&&Qp){Hj();const v=qj(c);u=v.MeasureLayout,f.visualElement=Oj(r,h,c,e,v.ProjectionNode)}return p.jsxs(gc.Provider,{value:f,children:[u&&f.visualElement?p.jsx(u,{visualElement:f.visualElement,...c}):null,n(r,a,Lj(h,f.visualElement,l),h,d,f.visualElement)]})}const o=S.forwardRef(s);return o[Uj]=r,o}function Wj({layoutId:t}){const e=S.useContext(Hp).id;return e&&t!==void 0?e+"-"+t:t}function Hj(t,e){S.useContext($k).strict}function qj(t){const{drag:e,layout:n}=Ks;if(!e&&!n)return{};const i={...e,...n};return{MeasureLayout:e!=null&&e.isEnabled(t)||n!=null&&n.isEnabled(t)?i.MeasureLayout:void 0,ProjectionNode:i.ProjectionNode}}const Gj=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","switch","symbol","svg","text","tspan","use","view"];function Kp(t){return typeof t!="string"||t.includes("-")?!1:!!(Gj.indexOf(t)>-1||/[A-Z]/u.test(t))}function qk(t,{style:e,vars:n},i,r){Object.assign(t.style,e,r&&r.getProjectionStyles(i));for(const s in n)t.style.setProperty(s,n[s])}const Gk=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform","pathLength","startOffset","textLength","lengthAdjust"]);function Qk(t,e,n,i){qk(t,e,void 0,i);for(const r in e.attrs)t.setAttribute(Gk.has(r)?r:Wp(r),e.attrs[r])}function Kk(t,{layout:e,layoutId:n}){return Gr.has(t)||t.startsWith("origin")||(e||n!==void 0)&&(!!_u[t]||t==="opacity")}function Zp(t,e,n){var i;const{style:r}=t,s={};for(const o in r)(vt(r[o])||e.style&&vt(e.style[o])||Kk(o,t)||((i=n==null?void 0:n.getValue(o))===null||i===void 0?void 0:i.liveStyle)!==void 0)&&(s[o]=r[o]);return s}function Zk(t,e,n){const i=Zp(t,e,n);for(const r in t)if(vt(t[r])||vt(e[r])){const s=Va.indexOf(r)!==-1?"attr"+r.charAt(0).toUpperCase()+r.substring(1):r;i[s]=t[r]}return i}function Xp(t){const e=S.useRef(null);return e.current===null&&(e.current=t()),e.current}function Qj({scrapeMotionValuesFromProps:t,createRenderState:e,onMount:n},i,r,s){const o={latestValues:Kj(i,r,s,t),renderState:e()};return n&&(o.mount=a=>n(i,a,o)),o}const Xk=t=>(e,n)=>{const i=S.useContext(gc),r=S.useContext(mc),s=()=>Qj(t,e,i,r);return n?s():Xp(s)};function Kj(t,e,n,i){const r={},s=i(t,{});for(const f in s)r[f]=jl(s[f]);let{initial:o,animate:a}=t;const l=yc(t),u=Hk(t);e&&u&&!l&&t.inherit!==!1&&(o===void 0&&(o=e.initial),a===void 0&&(a=e.animate));let c=n?n.initial===!1:!1;c=c||o===!1;const d=c?a:o;if(d&&typeof d!="boolean"&&!fc(d)){const f=Array.isArray(d)?d:[d];for(let h=0;h<f.length;h++){const v=_p(t,f[h]);if(v){const{transitionEnd:y,transition:w,...g}=v;for(const m in g){let x=g[m];if(Array.isArray(x)){const b=c?x.length-1:0;x=x[b]}x!==null&&(r[m]=x)}for(const m in y)r[m]=y[m]}}}return r}const Yp=()=>({style:{},transform:{},transformOrigin:{},vars:{}}),Yk=()=>({...Yp(),attrs:{}}),Jk=(t,e)=>e&&typeof t=="number"?e.transform(t):t,Zj={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"},Xj=Va.length;function Yj(t,e,n){let i="",r=!0;for(let s=0;s<Xj;s++){const o=Va[s],a=t[o];if(a===void 0)continue;let l=!0;if(typeof a=="number"?l=a===(o.startsWith("scale")?1:0):l=parseFloat(a)===0,!l||n){const u=Jk(a,Rp[o]);if(!l){r=!1;const c=Zj[o]||o;i+=`${c}(${u}) `}n&&(e[o]=u)}}return i=i.trim(),n?i=n(e,r?"":i):r&&(i="none"),i}function Jp(t,e,n){const{style:i,vars:r,transformOrigin:s}=t;let o=!1,a=!1;for(const l in e){const u=e[l];if(Gr.has(l)){o=!0;continue}else if(W2(l)){r[l]=u;continue}else{const c=Jk(u,Rp[l]);l.startsWith("origin")?(a=!0,s[l]=c):i[l]=c}}if(e.transform||(o||n?i.transform=Yj(e,t.transform,n):i.transform&&(i.transform="none")),a){const{originX:l="50%",originY:u="50%",originZ:c=0}=s;i.transformOrigin=`${l} ${u} ${c}`}}function vv(t,e,n){return typeof t=="string"?t:Y.transform(e+n*t)}function Jj(t,e,n){const i=vv(e,t.x,t.width),r=vv(n,t.y,t.height);return`${i} ${r}`}const eL={offset:"stroke-dashoffset",array:"stroke-dasharray"},tL={offset:"strokeDashoffset",array:"strokeDasharray"};function nL(t,e,n=1,i=0,r=!0){t.pathLength=1;const s=r?eL:tL;t[s.offset]=Y.transform(-i);const o=Y.transform(e),a=Y.transform(n);t[s.array]=`${o} ${a}`}function em(t,{attrX:e,attrY:n,attrScale:i,originX:r,originY:s,pathLength:o,pathSpacing:a=1,pathOffset:l=0,...u},c,d){if(Jp(t,u,d),c){t.style.viewBox&&(t.attrs.viewBox=t.style.viewBox);return}t.attrs=t.style,t.style={};const{attrs:f,style:h,dimensions:v}=t;f.transform&&(v&&(h.transform=f.transform),delete f.transform),v&&(r!==void 0||s!==void 0||h.transform)&&(h.transformOrigin=Jj(v,r!==void 0?r:.5,s!==void 0?s:.5)),e!==void 0&&(f.x=e),n!==void 0&&(f.y=n),i!==void 0&&(f.scale=i),o!==void 0&&nL(f,o,a,l,!1)}const tm=t=>typeof t=="string"&&t.toLowerCase()==="svg",iL={useVisualState:Xk({scrapeMotionValuesFromProps:Zk,createRenderState:Yk,onMount:(t,e,{renderState:n,latestValues:i})=>{Se.read(()=>{try{n.dimensions=typeof e.getBBox=="function"?e.getBBox():e.getBoundingClientRect()}catch{n.dimensions={x:0,y:0,width:0,height:0}}}),Se.render(()=>{em(n,i,tm(e.tagName),t.transformTemplate),Qk(e,n)})}})},rL={useVisualState:Xk({scrapeMotionValuesFromProps:Zp,createRenderState:Yp})};function eC(t,e,n){for(const i in e)!vt(e[i])&&!Kk(i,n)&&(t[i]=e[i])}function sL({transformTemplate:t},e){return S.useMemo(()=>{const n=Yp();return Jp(n,e,t),Object.assign({},n.vars,n.style)},[e])}function oL(t,e){const n=t.style||{},i={};return eC(i,n,t),Object.assign(i,sL(t,e)),i}function aL(t,e){const n={},i=oL(t,e);return t.drag&&t.dragListener!==!1&&(n.draggable=!1,i.userSelect=i.WebkitUserSelect=i.WebkitTouchCallout="none",i.touchAction=t.drag===!0?"none":`pan-${t.drag==="x"?"y":"x"}`),t.tabIndex===void 0&&(t.onTap||t.onTapStart||t.whileTap)&&(n.tabIndex=0),n.style=i,n}const lL=new Set(["animate","exit","variants","initial","style","values","variants","transition","transformTemplate","custom","inherit","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","_dragX","_dragY","onHoverStart","onHoverEnd","onViewportEnter","onViewportLeave","globalTapTarget","ignoreStrict","viewport"]);function ku(t){return t.startsWith("while")||t.startsWith("drag")&&t!=="draggable"||t.startsWith("layout")||t.startsWith("onTap")||t.startsWith("onPan")||t.startsWith("onLayout")||lL.has(t)}let tC=t=>!ku(t);function uL(t){t&&(tC=e=>e.startsWith("on")?!ku(e):t(e))}try{uL(require("@emotion/is-prop-valid").default)}catch{}function cL(t,e,n){const i={};for(const r in t)r==="values"&&typeof t.values=="object"||(tC(r)||n===!0&&ku(r)||!e&&!ku(r)||t.draggable&&r.startsWith("onDrag"))&&(i[r]=t[r]);return i}function dL(t,e,n,i){const r=S.useMemo(()=>{const s=Yk();return em(s,e,tm(i),t.transformTemplate),{...s.attrs,style:{...s.style}}},[e]);if(t.style){const s={};eC(s,t.style,t),r.style={...s,...r.style}}return r}function fL(t=!1){return(n,i,r,{latestValues:s},o)=>{const l=(Kp(n)?dL:aL)(i,s,o,n),u=cL(i,typeof n=="string",t),c=n!==S.Fragment?{...u,...l,ref:r}:{},{children:d}=i,f=S.useMemo(()=>vt(d)?d.get():d,[d]);return S.createElement(n,{...c,children:f})}}function hL(t,e){return function(i,{forwardMotionProps:r}={forwardMotionProps:!1}){const o={...Kp(i)?iL:rL,preloadedFeatures:t,useRender:fL(r),createVisualElement:e,Component:i};return $j(o)}}const sh={current:null},nC={current:!1};function pL(){if(nC.current=!0,!!Qp)if(window.matchMedia){const t=window.matchMedia("(prefers-reduced-motion)"),e=()=>sh.current=t.matches;t.addListener(e),e()}else sh.current=!1}function mL(t,e,n){for(const i in e){const r=e[i],s=n[i];if(vt(r))t.addValue(i,r);else if(vt(s))t.addValue(i,ga(r,{owner:t}));else if(s!==r)if(t.hasValue(i)){const o=t.getValue(i);o.liveStyle===!0?o.jump(r):o.hasAnimated||o.set(r)}else{const o=t.getStaticValue(i);t.addValue(i,ga(o!==void 0?o:r,{owner:t}))}}for(const i in n)e[i]===void 0&&t.removeValue(i);return e}const xv=new WeakMap,gL=[...G2,mt,nr],yL=t=>gL.find(q2(t)),wv=["AnimationStart","AnimationComplete","Update","BeforeLayoutMeasure","LayoutMeasure","LayoutAnimationStart","LayoutAnimationComplete"];class vL{scrapeMotionValuesFromProps(e,n,i){return{}}constructor({parent:e,props:n,presenceContext:i,reducedMotionConfig:r,blockInitialAnimation:s,visualState:o},a={}){this.current=null,this.children=new Set,this.isVariantNode=!1,this.isControllingVariants=!1,this.shouldReduceMotion=null,this.values=new Map,this.KeyframeResolver=Dp,this.features={},this.valueSubscriptions=new Map,this.prevMotionValues={},this.events={},this.propEventSubscriptions={},this.notifyUpdate=()=>this.notify("Update",this.latestValues),this.render=()=>{this.current&&(this.triggerBuild(),this.renderInstance(this.current,this.renderState,this.props.style,this.projection))},this.renderScheduledAt=0,this.scheduleRender=()=>{const f=Qn.now();this.renderScheduledAt<f&&(this.renderScheduledAt=f,Se.render(this.render,!1,!0))};const{latestValues:l,renderState:u}=o;this.latestValues=l,this.baseTarget={...l},this.initialValues=n.initial?{...l}:{},this.renderState=u,this.parent=e,this.props=n,this.presenceContext=i,this.depth=e?e.depth+1:0,this.reducedMotionConfig=r,this.options=a,this.blockInitialAnimation=!!s,this.isControllingVariants=yc(n),this.isVariantNode=Hk(n),this.isVariantNode&&(this.variantChildren=new Set),this.manuallyAnimateOnMount=!!(e&&e.current);const{willChange:c,...d}=this.scrapeMotionValuesFromProps(n,{},this);for(const f in d){const h=d[f];l[f]!==void 0&&vt(h)&&h.set(l[f],!1)}}mount(e){this.current=e,xv.set(e,this),this.projection&&!this.projection.instance&&this.projection.mount(e),this.parent&&this.isVariantNode&&!this.isControllingVariants&&(this.removeFromVariantTree=this.parent.addVariantChild(this)),this.values.forEach((n,i)=>this.bindToMotionValue(i,n)),nC.current||pL(),this.shouldReduceMotion=this.reducedMotionConfig==="never"?!1:this.reducedMotionConfig==="always"?!0:sh.current,this.parent&&this.parent.children.add(this),this.update(this.props,this.presenceContext)}unmount(){xv.delete(this.current),this.projection&&this.projection.unmount(),tr(this.notifyUpdate),tr(this.render),this.valueSubscriptions.forEach(e=>e()),this.valueSubscriptions.clear(),this.removeFromVariantTree&&this.removeFromVariantTree(),this.parent&&this.parent.children.delete(this);for(const e in this.events)this.events[e].clear();for(const e in this.features){const n=this.features[e];n&&(n.unmount(),n.isMounted=!1)}this.current=null}bindToMotionValue(e,n){this.valueSubscriptions.has(e)&&this.valueSubscriptions.get(e)();const i=Gr.has(e),r=n.on("change",a=>{this.latestValues[e]=a,this.props.onUpdate&&Se.preRender(this.notifyUpdate),i&&this.projection&&(this.projection.isTransformDirty=!0)}),s=n.on("renderRequest",this.scheduleRender);let o;window.MotionCheckAppearSync&&(o=window.MotionCheckAppearSync(this,e,n)),this.valueSubscriptions.set(e,()=>{r(),s(),o&&o(),n.owner&&n.stop()})}sortNodePosition(e){return!this.current||!this.sortInstanceNodePosition||this.type!==e.type?0:this.sortInstanceNodePosition(this.current,e.current)}updateFeatures(){let e="animation";for(e in Ks){const n=Ks[e];if(!n)continue;const{isEnabled:i,Feature:r}=n;if(!this.features[e]&&r&&i(this.props)&&(this.features[e]=new r(this)),this.features[e]){const s=this.features[e];s.isMounted?s.update():(s.mount(),s.isMounted=!0)}}}triggerBuild(){this.build(this.renderState,this.latestValues,this.props)}measureViewportBox(){return this.current?this.measureInstanceViewportBox(this.current,this.props):Be()}getStaticValue(e){return this.latestValues[e]}setStaticValue(e,n){this.latestValues[e]=n}update(e,n){(e.transformTemplate||this.props.transformTemplate)&&this.scheduleRender(),this.prevProps=this.props,this.props=e,this.prevPresenceContext=this.presenceContext,this.presenceContext=n;for(let i=0;i<wv.length;i++){const r=wv[i];this.propEventSubscriptions[r]&&(this.propEventSubscriptions[r](),delete this.propEventSubscriptions[r]);const s="on"+r,o=e[s];o&&(this.propEventSubscriptions[r]=this.on(r,o))}this.prevMotionValues=mL(this,this.scrapeMotionValuesFromProps(e,this.prevProps,this),this.prevMotionValues),this.handleChildMotionValue&&this.handleChildMotionValue()}getProps(){return this.props}getVariant(e){return this.props.variants?this.props.variants[e]:void 0}getDefaultTransition(){return this.props.transition}getTransformPagePoint(){return this.props.transformPagePoint}getClosestVariantNode(){return this.isVariantNode?this:this.parent?this.parent.getClosestVariantNode():void 0}addVariantChild(e){const n=this.getClosestVariantNode();if(n)return n.variantChildren&&n.variantChildren.add(e),()=>n.variantChildren.delete(e)}addValue(e,n){const i=this.values.get(e);n!==i&&(i&&this.removeValue(e),this.bindToMotionValue(e,n),this.values.set(e,n),this.latestValues[e]=n.get())}removeValue(e){this.values.delete(e);const n=this.valueSubscriptions.get(e);n&&(n(),this.valueSubscriptions.delete(e)),delete this.latestValues[e],this.removeValueFromRenderState(e,this.renderState)}hasValue(e){return this.values.has(e)}getValue(e,n){if(this.props.values&&this.props.values[e])return this.props.values[e];let i=this.values.get(e);return i===void 0&&n!==void 0&&(i=ga(n===null?void 0:n,{owner:this}),this.addValue(e,i)),i}readValue(e,n){var i;let r=this.latestValues[e]!==void 0||!this.current?this.latestValues[e]:(i=this.getBaseTargetFromProps(this.props,e))!==null&&i!==void 0?i:this.readValueFromInstance(this.current,e,this.options);return r!=null&&(typeof r=="string"&&(U2(r)||B2(r))?r=parseFloat(r):!yL(r)&&nr.test(n)&&(r=tk(e,n)),this.setBaseTarget(e,vt(r)?r.get():r)),vt(r)?r.get():r}setBaseTarget(e,n){this.baseTarget[e]=n}getBaseTarget(e){var n;const{initial:i}=this.props;let r;if(typeof i=="string"||typeof i=="object"){const o=_p(this.props,i,(n=this.presenceContext)===null||n===void 0?void 0:n.custom);o&&(r=o[e])}if(i&&r!==void 0)return r;const s=this.getBaseTargetFromProps(this.props,e);return s!==void 0&&!vt(s)?s:this.initialValues[e]!==void 0&&r===void 0?void 0:this.baseTarget[e]}on(e,n){return this.events[e]||(this.events[e]=new $p),this.events[e].add(n)}notify(e,...n){this.events[e]&&this.events[e].notify(...n)}}class iC extends vL{constructor(){super(...arguments),this.KeyframeResolver=nk}sortInstanceNodePosition(e,n){return e.compareDocumentPosition(n)&2?1:-1}getBaseTargetFromProps(e,n){return e.style?e.style[n]:void 0}removeValueFromRenderState(e,{vars:n,style:i}){delete n[e],delete i[e]}handleChildMotionValue(){this.childSubscription&&(this.childSubscription(),delete this.childSubscription);const{children:e}=this.props;vt(e)&&(this.childSubscription=e.on("change",n=>{this.current&&(this.current.textContent=`${n}`)}))}}function xL(t){return window.getComputedStyle(t)}class wL extends iC{constructor(){super(...arguments),this.type="html",this.renderInstance=qk}readValueFromInstance(e,n){if(Gr.has(n)){const i=Fp(n);return i&&i.default||0}else{const i=xL(e),r=(W2(n)?i.getPropertyValue(n):i[n])||0;return typeof r=="string"?r.trim():r}}measureInstanceViewportBox(e,{transformPagePoint:n}){return Mk(e,n)}build(e,n,i){Jp(e,n,i.transformTemplate)}scrapeMotionValuesFromProps(e,n,i){return Zp(e,n,i)}}class bL extends iC{constructor(){super(...arguments),this.type="svg",this.isSVGTag=!1,this.measureInstanceViewportBox=Be}getBaseTargetFromProps(e,n){return e[n]}readValueFromInstance(e,n){if(Gr.has(n)){const i=Fp(n);return i&&i.default||0}return n=Gk.has(n)?n:Wp(n),e.getAttribute(n)}scrapeMotionValuesFromProps(e,n,i){return Zk(e,n,i)}build(e,n,i){em(e,n,this.isSVGTag,i.transformTemplate)}renderInstance(e,n,i,r){Qk(e,n,i,r)}mount(e){this.isSVGTag=tm(e.tagName),super.mount(e)}}const SL=(t,e)=>Kp(t)?new bL(e):new wL(e,{allowProjection:t!==S.Fragment}),_L=hL({...cO,...Fj,..._j,...Ij},SL),te=lI(_L);class kL extends S.Component{getSnapshotBeforeUpdate(e){const n=this.props.childRef.current;if(n&&e.isPresent&&!this.props.isPresent){const i=this.props.sizeRef.current;i.height=n.offsetHeight||0,i.width=n.offsetWidth||0,i.top=n.offsetTop,i.left=n.offsetLeft}return null}componentDidUpdate(){}render(){return this.props.children}}function CL({children:t,isPresent:e}){const n=S.useId(),i=S.useRef(null),r=S.useRef({width:0,height:0,top:0,left:0}),{nonce:s}=S.useContext(Gp);return S.useInsertionEffect(()=>{const{width:o,height:a,top:l,left:u}=r.current;if(e||!i.current||!o||!a)return;i.current.dataset.motionPopId=n;const c=document.createElement("style");return s&&(c.nonce=s),document.head.appendChild(c),c.sheet&&c.sheet.insertRule(`
          [data-motion-pop-id="${n}"] {
            position: absolute !important;
            width: ${o}px !important;
            height: ${a}px !important;
            top: ${l}px !important;
            left: ${u}px !important;
          }
        `),()=>{document.head.removeChild(c)}},[e]),p.jsx(kL,{isPresent:e,childRef:i,sizeRef:r,children:S.cloneElement(t,{ref:i})})}const TL=({children:t,initial:e,isPresent:n,onExitComplete:i,custom:r,presenceAffectsLayout:s,mode:o})=>{const a=Xp(PL),l=S.useId(),u=S.useCallback(d=>{a.set(d,!0);for(const f of a.values())if(!f)return;i&&i()},[a,i]),c=S.useMemo(()=>({id:l,initial:e,isPresent:n,custom:r,onExitComplete:u,register:d=>(a.set(d,!1),()=>a.delete(d))}),s?[Math.random(),u]:[n,u]);return S.useMemo(()=>{a.forEach((d,f)=>a.set(f,!1))},[n]),S.useEffect(()=>{!n&&!a.size&&i&&i()},[n]),o==="popLayout"&&(t=p.jsx(CL,{isPresent:n,children:t})),p.jsx(mc.Provider,{value:c,children:t})};function PL(){return new Map}const yl=t=>t.key||"";function bv(t){const e=[];return S.Children.forEach(t,n=>{S.isValidElement(n)&&e.push(n)}),e}const EL=({children:t,exitBeforeEnter:e,custom:n,initial:i=!0,onExitComplete:r,presenceAffectsLayout:s=!0,mode:o="sync"})=>{const a=S.useMemo(()=>bv(t),[t]),l=a.map(yl),u=S.useRef(!0),c=S.useRef(a),d=Xp(()=>new Map),[f,h]=S.useState(a),[v,y]=S.useState(a);Uk(()=>{u.current=!1,c.current=a;for(let m=0;m<v.length;m++){const x=yl(v[m]);l.includes(x)?d.delete(x):d.get(x)!==!0&&d.set(x,!1)}},[v,l.length,l.join("-")]);const w=[];if(a!==f){let m=[...a];for(let x=0;x<v.length;x++){const b=v[x],k=yl(b);l.includes(k)||(m.splice(x,0,b),w.push(b))}o==="wait"&&w.length&&(m=w),y(bv(m)),h(a);return}const{forceRender:g}=S.useContext(Hp);return p.jsx(p.Fragment,{children:v.map(m=>{const x=yl(m),b=a===v||l.includes(x),k=()=>{if(d.has(x))d.set(x,!0);else return;let E=!0;d.forEach(M=>{M||(E=!1)}),E&&(g==null||g(),y(c.current),r&&r())};return p.jsx(TL,{isPresent:b,initial:!u.current||i?void 0:!1,custom:b?void 0:n,presenceAffectsLayout:s,mode:o,onExitComplete:b?void 0:k,children:m},x)})})},ML={some:0,all:1};function DL(t,e,{root:n,margin:i,amount:r="some"}={}){const s=xk(t),o=new WeakMap,a=u=>{u.forEach(c=>{const d=o.get(c.target);if(c.isIntersecting!==!!d)if(c.isIntersecting){const f=e(c);typeof f=="function"?o.set(c.target,f):l.unobserve(c.target)}else d&&(d(c),o.delete(c.target))})},l=new IntersectionObserver(a,{root:n,rootMargin:i,threshold:typeof r=="number"?r:ML[r]});return s.forEach(u=>l.observe(u)),()=>l.disconnect()}function vc(t,{root:e,margin:n,amount:i,once:r=!1}={}){const[s,o]=S.useState(!1);return S.useEffect(()=>{if(!t.current||r&&s)return;const a=()=>(o(!0),r?void 0:()=>o(!1)),l={root:e&&e.current||void 0,margin:n,amount:i};return DL(t.current,a,l)},[e,t,n,r,i]),s}const NL={easeInOutSine:t=>-(Math.cos(Math.PI*t)-1)/2,easeOutQuad:t=>t*(2-t),easeOutCubic:t=>1+--t*t*t,royalEase:t=>t<.5?2*t*t:-1+(4-2*t)*t},rC=(t={})=>{const{offset:e=0,duration:n=1e3,easing:i=NL.royalEase}=t;return S.useCallback(s=>{const o=document.getElementById(s);if(!o)return;const a=o.getBoundingClientRect().top+window.pageYOffset-e,l=window.pageYOffset,u=a-l;let c=null;function d(f){c===null&&(c=f);const h=f-c,v=Math.min(h/n,1),y=i(v);window.scrollTo(0,l+u*y),h<n&&requestAnimationFrame(d)}requestAnimationFrame(d)},[e,n,i])},AL=({activeSection:t})=>{const[e,n]=S.useState(!1),[i,r]=S.useState(!1),s=rC({offset:80,duration:1200,easing:l=>l<.5?4*l*l*l:1-Math.pow(-2*l+2,3)/2});S.useEffect(()=>{const l=()=>{r(window.scrollY>50)};return window.addEventListener("scroll",l),()=>window.removeEventListener("scroll",l)},[]);const o=l=>{n(!1),s(l)},a=[{id:"home",label:"Home"},{id:"projects",label:"Projects"},{id:"skills",label:"Skills"},{id:"experience",label:"Experience"},{id:"blog",label:"Blog"},{id:"contact",label:"Contact"}];return p.jsxs("header",{className:`fixed w-full z-40 backdrop-blur-md transition-all duration-300 ${i?"bg-white/10 dark:bg-[#11071F]/40 shadow-[0_4px_30px_rgba(0,0,0,0.1)] py-2 border-b border-[#FFD700]/10":"bg-transparent py-4"}`,children:[p.jsxs("div",{className:"container mx-auto px-6 flex justify-between items-center",children:[p.jsxs(te.a,{href:"#",onClick:()=>o("home"),className:"relative text-2xl font-bold tracking-tight",initial:{opacity:0,x:-20},animate:{opacity:1,x:0},transition:{duration:.6},children:[p.jsx("span",{className:"gold-accent font-['Cinzel'] text-3xl",children:"P"}),p.jsx("span",{className:"gold-accent font-['Cinzel'] text-2xl",children:"or"}),p.jsx("span",{className:"text-white font-['Cinzel']",children:"tfo"}),p.jsx("span",{className:"gold-accent font-['Cinzel'] text-2xl",children:"lio."}),p.jsx("div",{className:"absolute -bottom-1 left-0 w-full h-px bg-gradient-to-r from-transparent via-[#FFD700] to-transparent"})]}),p.jsx("nav",{className:"hidden md:flex space-x-10",children:a.map((l,u)=>p.jsx(te.a,{href:`#${l.id}`,onClick:c=>{c.preventDefault(),o(l.id)},className:`nav-link text-white font-medium hover:text-[#FFD700] transition-colors ${t===l.id?"active text-[#FFD700]":""}`,initial:{opacity:0,y:-10},animate:{opacity:1,y:0},transition:{duration:.4,delay:.1+u*.1},children:l.label},l.id))}),p.jsx(te.button,{className:"md:hidden text-white focus:outline-none",onClick:()=>n(!e),"aria-label":e?"Close menu":"Open menu",initial:{opacity:0},animate:{opacity:1},whileTap:{scale:.9},children:p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-6 w-6",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",children:e?p.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M6 18L18 6M6 6l12 12"}):p.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M4 6h16M4 12h16M4 18h16"})})})]}),p.jsx(EL,{children:e&&p.jsx(te.div,{initial:{opacity:0,height:0},animate:{opacity:1,height:"auto"},exit:{opacity:0,height:0},transition:{duration:.3},className:"md:hidden royal-card absolute top-full left-0 w-full",children:p.jsx("div",{className:"container mx-auto px-6 py-4 flex flex-col space-y-4",children:a.map(l=>p.jsx("a",{href:`#${l.id}`,onClick:u=>{u.preventDefault(),o(l.id)},className:`text-white font-medium py-2 hover:text-[#FFD700] transition-colors ${t===l.id?"text-[#FFD700]":""}`,children:l.label},l.id))})})})]})},RL=()=>{const t=new Date().getFullYear(),e=r=>{const s=document.getElementById(r);s&&window.scrollTo({top:s.offsetTop-80,behavior:"smooth"})},n={hidden:{opacity:0,y:20},visible:{opacity:1,y:0,transition:{duration:.6,ease:"easeOut"}}},i=[{icon:p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-5 w-5",fill:"currentColor",viewBox:"0 0 24 24",children:p.jsx("path",{d:"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"})}),url:"https://github.com"},{icon:p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-5 w-5",fill:"currentColor",viewBox:"0 0 24 24",children:p.jsx("path",{d:"M4.98 3.5c0 1.381-1.11 2.5-2.48 2.5s-2.48-1.119-2.48-2.5c0-1.38 1.11-2.5 2.48-2.5s2.48 1.12 2.48 2.5zm.02 4.5h-5v16h5v-16zm7.982 0h-4.968v16h4.969v-8.399c0-4.67 6.029-5.052 6.029 0v8.399h4.988v-10.131c0-7.88-8.922-7.593-11.018-3.714v-2.155z"})}),url:"https://linkedin.com"},{icon:p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-5 w-5",fill:"currentColor",viewBox:"0 0 24 24",children:p.jsx("path",{d:"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"})}),url:"https://twitter.com"},{icon:p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-5 w-5",fill:"currentColor",viewBox:"0 0 24 24",children:p.jsx("path",{d:"M12 0c-6.628 0-12 5.373-12 12s5.372 12 12 12 12-5.373 12-12-5.372-12-12-12zm9.885 11.441c-2.575-.422-4.943-.445-7.103-.073-.244-.563-.497-1.125-.767-1.68 2.31-1 4.165-2.358 5.548-4.082 1.35 1.594 2.197 3.619 2.322 5.835zm-3.842-7.282c-1.205 1.554-2.868 2.783-4.986 3.68-1.016-1.861-2.178-3.676-3.488-5.438.779-.197 1.591-.314 2.431-.314 2.275 0 4.368.779 6.043 2.072zm-10.516-.993c1.331 1.742 2.511 3.538 3.537 5.381-2.43.715-5.331 1.082-8.684 1.105.692-2.835 2.601-5.193 5.147-6.486zm-5.44 8.834l.013-.256c3.849-.005 7.169-.448 9.95-1.322.233.475.456.952.67 1.432-3.38 1.057-6.165 3.222-8.337 6.48-1.432-1.719-2.296-3.927-2.296-6.334zm3.829 7.81c1.969-3.088 4.482-5.098 7.598-6.027.928 2.42 1.609 4.91 2.043 7.46-3.349 1.291-6.953.666-9.641-1.433zm11.586.43c-.438-2.353-1.08-4.653-1.92-6.897 1.876-.265 3.94-.196 6.199.196-.437 2.786-2.028 5.192-4.279 6.701z"})}),url:"https://dribbble.com"}];return p.jsxs("footer",{className:"bg-[#000000] py-16 relative overflow-hidden",children:[p.jsxs("div",{className:"absolute inset-0 opacity-10",children:[p.jsx("div",{className:"absolute top-0 left-0 w-full h-px bg-gradient-to-r from-transparent via-[#FFD700] to-transparent"}),p.jsx("div",{className:"absolute right-10 top-1/2 w-40 h-40 rounded-full bg-[#FFD700] blur-[100px] opacity-30 transform -translate-y-1/2"}),p.jsx("div",{className:"absolute left-10 bottom-1/3 w-40 h-40 rounded-full bg-[#FFD700] blur-[100px] opacity-20"})]}),p.jsxs("div",{className:"container mx-auto px-6 relative z-10",children:[p.jsxs(te.div,{className:"flex flex-col md:flex-row justify-between items-center",initial:"hidden",whileInView:"visible",viewport:{once:!0},variants:n,children:[p.jsxs("div",{className:"mb-10 md:mb-0",children:[p.jsxs("a",{href:"#",onClick:r=>{r.preventDefault(),e("home")},className:"relative text-2xl font-bold tracking-tight inline-block",children:[p.jsx("span",{className:"gold-accent-glow font-['Cinzel'] text-3xl","data-text":"R",children:"P"}),p.jsx("span",{className:"gold-accent-glow font-['Cinzel'] text-2xl","data-text":"R",children:"or"}),p.jsx("span",{className:"text-white font-['Cinzel']",children:"tfo"}),p.jsx("span",{className:"gold-accent-glow font-['Cinzel'] text-2xl","data-text":"Dev",children:"lio."}),p.jsx("div",{className:"absolute -bottom-1 left-0 w-full h-px bg-gradient-to-r from-transparent via-[#FFD700] to-transparent"})]}),p.jsx("p",{className:"text-gray-400 mt-3 font-['Cormorant_Garamond'] text-lg max-w-md",children:"Creating elegant solutions with royal precision and artistry. Transforming complex challenges into digital masterpieces."}),p.jsx("div",{className:"flex space-x-5 mt-6",children:i.map((r,s)=>p.jsx(te.a,{href:r.url,target:"_blank",rel:"noopener noreferrer",className:"text-gray-400 hover:text-[#FFD700] transition-colors duration-300",whileHover:{y:-3},whileTap:{scale:.95},children:r.icon},s))})]}),p.jsxs("div",{className:"grid grid-cols-2 md:grid-cols-3 gap-x-16 gap-y-6 text-center md:text-left",children:[p.jsxs("div",{children:[p.jsx("h3",{className:"text-[#FFD700] font-['Cinzel'] text-lg mb-4 font-semibold",children:"Navigation"}),p.jsx("ul",{className:"space-y-3",children:["home","projects","skills","experience","blog","contact"].map(r=>p.jsx("li",{children:p.jsx("a",{href:`#${r}`,onClick:s=>{s.preventDefault(),e(r)},className:"text-gray-400 hover:text-white transition-colors duration-300 font-['Cormorant_Garamond'] text-lg",children:r.charAt(0).toUpperCase()+r.slice(1)})},r))})]}),p.jsxs("div",{children:[p.jsx("h3",{className:"text-[#FFD700] font-['Cinzel'] text-lg mb-4 font-semibold",children:"Services"}),p.jsx("ul",{className:"space-y-3",children:["Web Development","UI/UX Design","API Integration","App Development","Consulting"].map(r=>p.jsx("li",{children:p.jsx("a",{href:"#contact",className:"text-gray-400 hover:text-white transition-colors duration-300 font-['Cormorant_Garamond'] text-lg",children:r})},r))})]}),p.jsxs("div",{className:"col-span-2 md:col-span-1 mt-8 md:mt-0",children:[p.jsx("h3",{className:"text-[#FFD700] font-['Cinzel'] text-lg mb-4 font-semibold",children:"Contact"}),p.jsxs("ul",{className:"space-y-3",children:[p.jsxs("li",{className:"flex items-center justify-center md:justify-start",children:[p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-5 w-5 mr-3 text-[#FFD700]",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",children:p.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"})}),p.jsx("a",{href:"mailto:contact@royaldev.com",className:"text-gray-400 hover:text-white transition-colors duration-300 font-['Cormorant_Garamond'] text-lg",children:"bekamdawit551@gmail.com"})]}),p.jsxs("li",{className:"flex items-center justify-center md:justify-start",children:[p.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-5 w-5 mr-3 text-[#FFD700]",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",children:[p.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"}),p.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M15 11a3 3 0 11-6 0 3 3 0 016 0z"})]}),p.jsx("span",{className:"text-gray-400 font-['Cormorant_Garamond'] text-lg",children:"Indiana, USA"})]})]})]})]})]}),p.jsxs(te.div,{className:"mt-16 pt-8 border-t border-gray-800 flex flex-col md:flex-row justify-between items-center text-sm",initial:"hidden",whileInView:"visible",viewport:{once:!0},variants:n,children:[p.jsxs("p",{className:"text-gray-500 mb-4 md:mb-0 font-['Cormorant_Garamond']",children:["© ",t," Bekam Guta. All rights reserved"]}),p.jsx("div",{className:"flex items-center",children:p.jsxs("p",{className:"text-gray-500 flex items-center font-['Cormorant_Garamond']",children:["Crafted with",p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-4 w-4 mx-1 text-[#FFD700]",viewBox:"0 0 20 20",fill:"currentColor",children:p.jsx("path",{fillRule:"evenodd",d:"M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z",clipRule:"evenodd"})}),"and royal precision"]})})]})]})]})},FL=()=>{const[t,e]=S.useState({x:0,y:0}),[n,i]=S.useState("default"),[r,s]=S.useState(!1);S.useEffect(()=>{const a=()=>{s(window.matchMedia("(max-width: 768px)").matches)};a(),window.addEventListener("resize",a);const l=f=>{e({x:f.clientX,y:f.clientY})};window.addEventListener("mousemove",l);const u=()=>i("hover"),c=()=>i("default"),d=document.querySelectorAll('a, button, input, textarea, select, [role="button"]');return d.forEach(f=>{f.addEventListener("mouseenter",u),f.addEventListener("mouseleave",c)}),()=>{window.removeEventListener("mousemove",l),window.removeEventListener("resize",a),d.forEach(f=>{f.removeEventListener("mouseenter",u),f.removeEventListener("mouseleave",c)})}},[]);const o={default:{x:t.x-8,y:t.y-8,backgroundColor:"rgba(255, 215, 0, 0)",height:24,width:24,border:"1px solid rgba(255, 215, 0, 0.5)",boxShadow:"0 0 10px rgba(255, 215, 0, 0.3)",opacity:.8,borderRadius:"50%"},hover:{x:t.x-20,y:t.y-20,backgroundColor:"rgba(255, 215, 0, 0.05)",height:40,width:40,border:"2px solid rgba(255, 215, 0, 0.8)",boxShadow:"0 0 15px rgba(255, 215, 0, 0.5), 0 0 30px rgba(255, 215, 0, 0.2)",opacity:1,borderRadius:"50%"}};return r?null:p.jsxs(p.Fragment,{children:[p.jsx(te.div,{className:"fixed pointer-events-none z-50",variants:o,animate:n,transition:{type:"tween",ease:"backOut",duration:.15}}),p.jsx(te.div,{className:"fixed bg-[#FFD700] rounded-full pointer-events-none z-50 mix-blend-difference",animate:{x:t.x-3,y:t.y-3,width:6,height:6,opacity:n==="hover"?1:.8},transition:{type:"tween",ease:"backOut",duration:.15}}),p.jsx(te.div,{className:"fixed bg-gradient-to-r from-[#FFD700]/30 via-[#FFF2AC]/25 to-[#B8860B]/20 rounded-full blur-md pointer-events-none z-40",animate:{x:t.x-30,y:t.y-30,width:n==="hover"?80:60,height:n==="hover"?80:60,opacity:n==="hover"?.6:.3,scale:n==="hover"?1.3:1},transition:{type:"tween",ease:"backOut",duration:.3}}),p.jsxs(te.div,{className:"fixed rounded-full pointer-events-none z-35 overflow-hidden",animate:{x:t.x-40,y:t.y-40,width:120,height:120,opacity:.15},transition:{type:"tween",ease:"linear",duration:.2},children:[p.jsx("div",{className:"absolute inset-0 bg-black opacity-70"}),p.jsx("div",{className:"w-full h-full relative",children:[...Array(8)].map((a,l)=>p.jsx(te.div,{className:"absolute w-1 h-1 bg-[#FFD700] rounded-full",style:{left:`${Math.random()*100}%`,top:`${Math.random()*100}%`},animate:{scale:[0,1,0],opacity:[0,1,0]},transition:{duration:2,repeat:1/0,delay:l*.2,repeatType:"loop"}},l))})]})]})},IL=()=>{const t=rC({offset:80,duration:1200,easing:e=>e<.5?4*e*e*e:1-Math.pow(-2*e+2,3)/2});return p.jsx("section",{id:"home",className:"section pt-32 pb-24 overflow-hidden relative min-h-screen flex items-center",children:p.jsxs("div",{className:"container mx-auto px-6 child-delay pt-16",children:[p.jsxs("div",{className:"flex flex-col lg:flex-row items-center justify-between gap-12",children:[p.jsxs(te.div,{className:"lg:w-1/2 text-white relative z-10",initial:{opacity:0,x:-50},animate:{opacity:1,x:0},transition:{duration:.8},children:[p.jsxs("div",{className:"relative inline-block",children:[p.jsx("span",{className:"inline-block px-4 py-1.5 text-sm font-semibold bg-black/30 text-white rounded-full royal-card backdrop-blur-md mb-6 border border-[#FFD700]/20",children:"Computer Science & Mathematics Student"}),p.jsx(te.span,{className:"absolute -right-2 -top-2 w-4 h-4 rounded-full bg-[#FFD700]",animate:{scale:[1,1.2,1],opacity:[.7,1,.7]},transition:{duration:2,repeat:1/0,repeatType:"reverse"}})]}),p.jsxs("h1",{className:"text-5xl md:text-6xl lg:text-7xl font-['Cinzel'] font-bold leading-tight mb-8",children:[p.jsx("span",{children:p.jsx("span",{className:"text-white",children:"Bekam"})}),p.jsx("span",{className:"block mt-1",children:p.jsx("span",{className:"text-white",children:"Guta"})})]}),p.jsx("p",{className:"text-lg md:text-xl text-white font-['Cormorant_Garamond'] mb-10 max-w-xl leading-relaxed",children:"Driven by a twin love of algorithms and altitude (skydiving), I craft AI-powered solutions that leverage machine learning to tackle real-world social challenges."}),p.jsxs("div",{className:"flex flex-wrap gap-5",children:[p.jsx(te.button,{onClick:()=>t("projects"),className:"royal-button px-8 py-4 rounded-lg font-medium text-lg shadow-lg hover:shadow-xl transition-all duration-300",whileHover:{y:-5,boxShadow:"0 15px 30px rgba(0, 0, 0, 0.6), 0 0 20px rgba(255, 215, 0, 0.3)"},whileTap:{scale:.97},children:"Explore Portfolio"}),p.jsx(te.button,{onClick:()=>t("contact"),className:"px-8 py-4 bg-transparent border border-[#FFD700] text-white rounded-lg font-medium hover:bg-[#FFD700]/10 transition-all duration-300 font-['Cinzel']",whileHover:{backgroundColor:"rgba(255, 215, 0, 0.1)",borderColor:"rgba(255, 215, 0, 0.8)",boxShadow:"0 0 15px rgba(255, 215, 0, 0.3)"},whileTap:{scale:.97},children:"Get in Touch"})]})]}),p.jsx(te.div,{className:"lg:w-1/2 relative",initial:{opacity:0,y:50},animate:{opacity:1,y:0},transition:{delay:.3,duration:.8},children:p.jsxs("div",{className:"relative mx-auto",children:[p.jsx("div",{className:"absolute -inset-4 bg-gradient-to-tr from-black/40 to-[#FFD700]/20 rounded-full blur-md z-0"}),p.jsxs("div",{className:"w-72 h-72 md:w-96 md:h-96 rounded-full overflow-hidden border-2 gold-border shadow-[0_0_30px_rgba(255,215,0,0.3)] mx-auto relative z-10",children:[p.jsx("div",{className:"absolute inset-0 bg-gradient-to-tr from-black to-[#111111] opacity-10"}),p.jsx("img",{src:"/images/IMG_3707.png",alt:"Bekam Guta",className:"w-full h-full object-cover object-top transform scale-[1]"})]}),p.jsx(te.div,{className:"absolute -bottom-10 -left-10 w-28 h-28 royal-card rounded-lg flex items-center justify-center z-20",initial:{rotate:0},animate:{rotate:12},transition:{duration:6,repeat:1/0,repeatType:"reverse"},children:p.jsxs("svg",{viewBox:"0 0 24 24",className:"w-14 h-14 gold-accent",fill:"currentColor",children:[p.jsx("path",{d:"M12 14.184c-6.002 0-10.886 4.148-11.98 9.541 2.075-4.049 4.446-5.513 11.98-5.513 7.534 0 9.905 1.464 11.98 5.513-1.095-5.393-5.978-9.541-11.98-9.541z"}),p.jsx("path",{d:"M12 8.046c4.526 0 8.2 3.674 8.2 8.2v1.607c1.954-.291 3.683-.955 5.089-1.937A13.225 13.225 0 0012 0C6.433 0 1.686 3.361.286 8.049 2.09 9.708 5.822 11.046 12 11.046c6.178 0 9.91-1.338 11.714-2.997-1.528-5.127-6.077-9.033-11.714-9.033a13.225 13.225 0 00-8.285 2.909 13.291 13.291 0 014.222-5.518C9.074 9.4 10.128 12.2 12 12.2c1.871 0 2.926-2.799 4.063-5.789 1.786 1.127 3.326 2.666 4.452 4.453-2.987 1.135-5.79 2.188-5.79 4.057 0 1.87 2.803 2.921 5.79 4.057-1.126 1.787-2.666 3.326-4.452 4.453-1.137-2.99-2.192-5.789-4.063-5.789-1.872 0-2.926 2.799-4.063 5.789-1.786-1.127-3.326-2.666-4.452-4.453 2.987-1.136 5.79-2.189 5.79-4.057s-2.803-2.921-5.79-4.057c1.126-1.787 2.666-3.326 4.452-4.453 1.137 2.99 2.191 5.789 4.063 5.789z"})]})}),p.jsx(te.div,{className:"absolute -top-8 -right-8 w-24 h-24 royal-card rounded-lg flex items-center justify-center z-20",initial:{rotate:0},animate:{rotate:-6},transition:{duration:5,repeat:1/0,repeatType:"reverse"},children:p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"w-12 h-12 gold-accent",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",children:p.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"})})}),p.jsx(te.div,{className:"absolute top-1/2 right-0 transform translate-x-1/2 -translate-y-1/2 w-14 h-14 royal-card rounded-full flex items-center justify-center z-10",animate:{scale:[1,1.1,1],opacity:[.8,1,.8]},transition:{duration:3,repeat:1/0,repeatType:"reverse"},children:p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"w-8 h-8 gold-accent",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",children:p.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M13 10V3L4 14h7v7l9-11h-7z"})})})]})})]}),p.jsx("div",{className:"flex flex-wrap justify-center md:justify-start gap-x-4 gap-y-2 md:gap-x-12 md:gap-y-6 mt-12 text-white",children:[{number:"4.0",label:"Major GPA"},{number:"1st",label:"Google DSC Hackathon Winner"},{number:"150+",label:"Hours of Peer Tutoring"},{number:"2+",label:"Skydive Jumps"},{number:"3+",label:"Internship under 2 Years"}].map((e,n)=>p.jsxs(te.div,{className:"text-center relative group",initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{delay:.4+n*.1,duration:.6},children:[p.jsx(te.div,{className:"absolute -inset-3 rounded-lg border border-[#FFD700]/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500",animate:{borderColor:["rgba(255, 215, 0, 0.1)","rgba(255, 215, 0, 0.3)","rgba(255, 215, 0, 0.1)"]},transition:{duration:2,repeat:1/0}}),p.jsx("p",{className:"text-lg md:text-3xl font-bold gold-accent font-['Cinzel']",children:e.number}),p.jsx("p",{className:"text-xs md:text-sm mt-1 text-white/70 font-['Cormorant_Garamond']",children:e.label})]},n))}),p.jsxs(te.div,{className:"absolute bottom-12 left-1/2 transform -translate-x-1/2 flex flex-col items-center cursor-pointer gold-shimmer",initial:{opacity:0},animate:{opacity:1,y:[0,10,0]},transition:{delay:1.2,duration:2,y:{duration:2,repeat:1/0,ease:"easeInOut"}},onClick:()=>t("projects"),whileHover:{scale:1.1},children:[p.jsxs("div",{className:"relative w-8 h-12 flex items-center justify-center",children:[p.jsx(te.div,{className:"absolute inset-0 border border-[#FFD700]/50 rounded-full",animate:{boxShadow:["0 0 5px rgba(255, 215, 0, 0.3)","0 0 10px rgba(255, 215, 0, 0.6)","0 0 5px rgba(255, 215, 0, 0.3)"],borderColor:["rgba(255, 215, 0, 0.3)","rgba(255, 215, 0, 0.7)","rgba(255, 215, 0, 0.3)"]},transition:{duration:2,repeat:1/0}}),p.jsx(te.div,{className:"w-2 h-2 rounded-full bg-[#FFD700] absolute z-10",animate:{y:[-5,5,-5],boxShadow:["0 0 5px rgba(255, 215, 0, 0.6), 0 0 10px rgba(255, 215, 0, 0.3)","0 0 10px rgba(255, 215, 0, 0.8), 0 0 20px rgba(255, 215, 0, 0.5)","0 0 5px rgba(255, 215, 0, 0.6), 0 0 10px rgba(255, 215, 0, 0.3)"]},transition:{duration:1.5,repeat:1/0,ease:"easeInOut"}}),p.jsx(te.svg,{xmlns:"http://www.w3.org/2000/svg",className:"absolute bottom-0 w-4 h-4 text-[#FFD700]",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",animate:{y:[0,2,0],opacity:[.7,1,.7]},transition:{duration:1.5,repeat:1/0,ease:"easeInOut",delay:.5},children:p.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M19 14l-7 7m0 0l-7-7m7 7V3"})})]}),p.jsx("p",{className:"gold-accent-glow mt-3 font-['Cinzel'] text-sm tracking-widest","data-text":"EXPLORE",children:"EXPLORE"})]})]})})},OL=({threshold:t=0,rootMargin:e="0px",triggerOnce:n=!1}={})=>{const[i,r]=S.useState(!1),s=S.useRef(null),o=S.useRef(!1);return S.useEffect(()=>{const a=s.current;if(!a||n&&o.current)return;const l=new IntersectionObserver(([u])=>{const c=u.isIntersecting;c&&n&&(o.current=!0),r(c)},{threshold:t,rootMargin:e});return l.observe(a),()=>{l.disconnect()}},[t,e,n]),{ref:s,inView:i}},jL=[{title:"Software Engineer Portfolio",description:"Ultra-luxurious personal portfolio built with React, TypeScript, and Framer Motion, featuring particle animations and a strict gold-black-white color scheme.",image:"/images/sorasak-_UIN-pFfJ7c-unsplash-1568x1046.jpg",category:"Frontend",technologies:[{name:"React",bgColor:"bg-blue-100",textColor:"text-blue-800"},{name:"TypeScript",bgColor:"bg-purple-100",textColor:"text-purple-800"},{name:"Framer Motion",bgColor:"bg-blue-100",textColor:"text-blue-800"},{name:"Particles.js",bgColor:"bg-green-100",textColor:"text-green-800"}],caseStudyUrl:"https://github.com/Ibek7/TravelCompanion",githubUrl:"https://github.com/Ibek7/TravelCompanion",liveUrl:"https://github.com/Ibek7/TravelCompanion"},{title:"Human Trafficking Analysis Tool",description:"Research project using machine learning and NLP techniques to identify patterns in human trafficking cases in East Africa, with 82% model accuracy.",image:"https://images.unsplash.com/photo-1611162617213-7d7a39e9b1d7?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2074&q=80",category:"AI Research",technologies:[{name:"Python",bgColor:"bg-blue-100",textColor:"text-blue-800"},{name:"ML",bgColor:"bg-yellow-100",textColor:"text-yellow-800"},{name:"NLP",bgColor:"bg-green-100",textColor:"text-green-800"},{name:"Data Analysis",bgColor:"bg-pink-100",textColor:"text-pink-800"}],caseStudyUrl:"https://github.com/Ibek7",githubUrl:"https://github.com/Ibek7",liveUrl:"https://github.com/Ibek7"},{title:"Vivavibe",description:"Built a Python Instagram Auto‑Poster with ChatGPT captions, DALL‑E 3 images, and Instagram Graph API publishing, storing 200+ posts in Firebase for a 21% efficiency boost",image:"/images/vecteezy_silhouette-standing-victorious-on-top-of-peak_32946211.jpg",category:"Social Media Automation",technologies:[{name:"JavaScript",bgColor:"bg-blue-100",textColor:"text-blue-800"},{name:"HTML/CSS",bgColor:"bg-orange-100",textColor:"text-orange-800"},{name:"LocalStorage API",bgColor:"bg-green-100",textColor:"text-green-800"},{name:"Responsive Design",bgColor:"bg-purple-100",textColor:"text-purple-800"}],caseStudyUrl:"https://github.com/Ibek7/VivaVibe",githubUrl:"https://github.com/Ibek7/VivaVibe",liveUrl:"https://github.com/Ibek7/VivaVibe"}],LL=[{name:"HTML / CSS / JavaScript",percentage:90},{name:"React / TypeScript",percentage:85},{name:"UI/UX Design",percentage:80},{name:"Responsive Design",percentage:88}],zL=[{name:"Python / Machine Learning",percentage:85},{name:"Java / C++",percentage:90},{name:"Data Structures & Algorithms",percentage:92},{name:"Object-Oriented Programming",percentage:88}],VL=[{name:"Statistical Analysis",percentage:85},{name:"Data Analysis with Python",percentage:80}],BL=[{name:"Git / GitHub",percentage:85},{name:"Agile Methodologies",percentage:75}],UL=[{title:"AI/Machine Learning Intern (Incoming)",company:"Mayo Clinic — Rochester, MN",period:"Jul 2025 - Aug 2025",description:"Anticipated contributions include engineering features from orthopedic imaging and EHR data; developing ML models to predict surgical outcomes; validating models and delivering integrated pipeline reports.",technologies:[{name:"Python"},{name:"scikit-learn"},{name:"TensorFlow + Keras"},{name:"Keras"}]},{title:"Full-Stack Software Engineer Intern",company:"Fullsteam",period:"May 2024 - Aug 2024",description:"Collaborated with an Agile team to integrate advanced AI solutions, streamline software performance, and simplify complex document processes, significantly enhancing efficiency and reliability.",technologies:[{name:"Azure"},{name:"OpenAI REST API"},{name:"Azure Document Intelligence"},{name:"Agile"}]},{title:"AI Researcher",company:"University of Chicago",period:"Dec 2023 - Jan 2024",description:"Built an AI+NLP model to detect human trafficking patterns with 82% accuracy; scraped 300+ articles using TF-IDF and PCA and applied hierarchical clustering to uncover 18% more hotspots.",technologies:[{name:"AI"},{name:"NLP"},{name:"TF-IDF"},{name:"PCA"},{name:"Hierarchical Clustering"}]},{title:"Head Researcher",company:"Addis Ababa University Research Program",period:"Aug 2021 - Sep 2021",description:"Designed and validated real-time sun-tracking solar panels using Fortran and LabView, improving energy efficiency by 19.3% and research efficiency by 6%.",technologies:[{name:"Fortran"},{name:"LabView"},{name:"Firmware Validation"},{name:"Solar Tracking"}]}],$L=[{title:"My Journey Learning Web Development",excerpt:"Sharing my experience learning React and TypeScript to build this portfolio site, including challenges I faced and resources (Youssef Hefnawy's journey) that helped me succeed.",image:"https://images.unsplash.com/photo-1593720213428-28a5b9e94613?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1769&q=80",date:"April 1, 2024",readTime:"15 min read",url:"https://dev.to/hefnawy/30-day-react-learning-journey-part-1-14od?utm_source=chatgpt.com"},{title:"AI for Social Good: My Research Experience",excerpt:"A look at my independent research using machine learning to analyze human trafficking patterns in East Africa—rooted in the insights from Tomašev et al.’s Nature Communications paper (18 May 2020).",image:"https://images.unsplash.com/photo-1509718443690-d8e2fb3474b7?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80",date:"February 10, 2024",readTime:"20 min read",url:"https://www.nature.com/articles/s41467-020-15871-z?utm_source=chatgpt.com"},{title:"Balancing Computer Science and Mathematics",excerpt:"Exploring my double-major journey in CS and Math—strategies for academic excellence shaped by Lincoln Sedlacek’s Edutopia article “Math Education: The Roots of Computer Science.",image:"https://images.unsplash.com/photo-1551650975-87deedd944c3?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1974&q=80",date:"March 15, 2024",readTime:"16 min read",url:"https://www.edutopia.org/blog/math-education-roots-computer-science-lincoln-sedlacek?utm_source=chatgpt.com"}],WL=()=>{const{ref:t,inView:e}=OL({threshold:.1,triggerOnce:!0}),n={hidden:{opacity:0},visible:{opacity:1,transition:{when:"beforeChildren",staggerChildren:.2}}},i={hidden:{opacity:0,y:20},visible:{opacity:1,y:0,transition:{duration:.5}}};return p.jsx("section",{id:"projects",className:"section py-24 bg-[#000000]",children:p.jsxs("div",{className:"container mx-auto px-6 child-delay",children:[p.jsxs(te.div,{className:"text-center mb-16",initial:{opacity:0,y:20},whileInView:{opacity:1,y:0},viewport:{once:!0},transition:{duration:.6},children:[p.jsx("h2",{className:"text-4xl font-bold gold-accent font-['Cinzel'] mb-4",children:"Featured Projects"}),p.jsx("p",{className:"text-white max-w-xl mx-auto font-['Cormorant_Garamond'] text-lg",children:"A curated selection of my work showcasing problem-solving abilities and technical expertise"})]}),p.jsx(te.div,{ref:t,className:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8",variants:n,initial:"hidden",animate:e?"visible":"hidden",children:jL.map((r,s)=>p.jsxs(te.div,{className:"project-card royal-card rounded-xl overflow-hidden border border-[#FFD700]/20",variants:i,children:[r.title==="Software Engineer Portfolio"?p.jsxs("div",{className:"relative h-56 overflow-hidden",children:[p.jsx("img",{src:r.image,alt:".NET MAUI & Azure Traveler: Travel Companion App",className:"w-full h-full object-cover transition-transform duration-500 hover:scale-110"}),p.jsx("div",{className:"absolute top-3 right-3 bg-black/80 backdrop-blur-sm border border-[#FFD700]/40 rounded-full py-1 px-3 text-xs font-semibold text-[#FFD700]",children:"AI Travel App"})]}):p.jsxs("div",{className:"relative h-56 overflow-hidden",children:[p.jsx("img",{src:r.image,alt:r.title,className:"w-full h-full object-cover transition-transform duration-500 hover:scale-110"}),p.jsx("div",{className:"absolute top-3 right-3 bg-black/80 backdrop-blur-sm border border-[#FFD700]/40 rounded-full py-1 px-3 text-xs font-semibold text-[#FFD700]",children:r.category})]}),p.jsxs("div",{className:"p-6 bg-black/40 backdrop-blur-md border-t border-[#FFD700]/20",children:[p.jsx("h3",{className:"text-xl font-bold text-[#FFD700] mb-2 font-['Cinzel']",children:r.title==="Software Engineer Portfolio"?".NET MAUI & Azure Traveler: Travel Companion App":r.title}),p.jsx("p",{className:"text-[#FFFFF7]/90 font-['Cormorant_Garamond'] text-lg mb-4",children:r.title==="Software Engineer Portfolio"?"Built a cross‑platform AI Travel Companion app with .NET MAUI, Azure, OpenAI, and Syncfusion integrations for seamless itinerary planning, dynamic scheduling, and Xcode‑based deployment.":r.description}),p.jsx("div",{className:"flex flex-wrap gap-2 mb-4",children:(r.title==="Software Engineer Portfolio"?[{name:".NET MAUI"},{name:"SQL"},{name:"Azure"},{name:"OpenAI"},{name:"Syncfusion"},{name:"Xcode"}]:r.technologies).map((o,a)=>p.jsx("span",{className:"text-xs font-medium bg-black/50 backdrop-blur-sm text-[#FFD700] px-2 py-1 rounded border border-[#FFD700]/30",children:o.name},a))}),p.jsxs("div",{className:"flex justify-between items-center",children:[p.jsx("a",{href:r.caseStudyUrl,className:"text-[#FFD700] font-medium hover:text-[#FFD700]/80 transition-colors",children:"View Case Study →"}),p.jsxs("div",{className:"flex gap-3",children:[p.jsx("a",{href:r.githubUrl,className:"text-[#FFD700]/70 hover:text-[#FFD700] transition-colors","aria-label":"GitHub Repository",children:p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-5 w-5",fill:"currentColor",viewBox:"0 0 24 24",children:p.jsx("path",{d:"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"})})}),p.jsx("a",{href:r.liveUrl,className:"text-[#FFD700]/70 hover:text-[#FFD700] transition-colors","aria-label":"Live Project",children:p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-5 w-5",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",children:p.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"})})})]})]})]})]},s))}),p.jsx(te.div,{className:"mt-16 text-center",initial:{opacity:0},whileInView:{opacity:1},viewport:{once:!0},transition:{duration:.6,delay:.4},children:p.jsxs("a",{href:"#",className:"inline-flex items-center px-6 py-3 bg-black/40 backdrop-blur-md text-[#FFD700] rounded-lg font-medium border border-[#FFD700]/30 transition-all hover:bg-black/60 hover:shadow-[0_0_15px_rgba(255,215,0,0.2)] font-['Cinzel']",children:["View All Projects",p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-5 w-5 ml-2",viewBox:"0 0 20 20",fill:"currentColor",children:p.jsx("path",{fillRule:"evenodd",d:"M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z",clipRule:"evenodd"})})]})})]})})},HL=({name:t,percentage:e,delay:n=0})=>{const i=S.useRef(null),r=vc(i,{once:!0,margin:"-100px 0px"});return p.jsxs("div",{ref:i,children:[p.jsxs("div",{className:"flex justify-between mb-2",children:[p.jsx("span",{className:"font-medium text-white font-['Cinzel']",children:t}),p.jsxs("span",{className:"text-[#FFFFF7] font-['Cormorant_Garamond'] text-lg",children:[e,"%"]})]}),p.jsx("div",{className:"skill-bar h-3 bg-black/50 rounded-full border border-[#FFD700]/20",children:p.jsx(te.div,{className:"skill-progress h-full rounded-full",initial:{width:"0%"},animate:r?{width:`${e}%`}:{width:"0%"},transition:{duration:1,delay:n,ease:"easeOut"}})})]})},vl=({title:t,skills:e,delayOffset:n=0})=>p.jsxs("div",{className:"royal-card p-6 rounded-xl bg-black/40 backdrop-blur-md border border-[#FFD700]/20 shadow-[0_0_15px_rgba(255,215,0,0.1)]",children:[p.jsx("h3",{className:"text-xl font-bold mb-6 text-white font-['Cinzel'] royal-heading",children:t}),p.jsx("div",{className:"space-y-6",children:e.map((i,r)=>p.jsx(HL,{name:i.name,percentage:i.percentage,delay:n+r*.1},i.name))})]}),qL=()=>{const t=S.useRef(null),e=vc(t,{once:!0}),n={hidden:{opacity:0},visible:{opacity:1,transition:{staggerChildren:.1,delayChildren:.2}}},i={hidden:{opacity:0,y:20},visible:{opacity:1,y:0,transition:{duration:.6}}};return p.jsx("section",{id:"skills",className:"section py-24 bg-[#000000]",children:p.jsxs("div",{ref:t,className:"container mx-auto px-6 child-delay",children:[p.jsxs(te.div,{className:"text-center mb-16",initial:{opacity:0,y:20},whileInView:{opacity:1,y:0},viewport:{once:!0},transition:{duration:.6},children:[p.jsx("h2",{className:"text-4xl font-bold gold-accent font-['Cinzel'] mb-4",children:"Technical Skills"}),p.jsx("p",{className:"text-[#FFFFF7]/70 max-w-xl mx-auto font-['Cormorant_Garamond'] text-lg",children:"Technologies and tools I've mastered throughout my professional journey"})]}),p.jsxs(te.div,{className:"grid grid-cols-1 md:grid-cols-2 gap-12",variants:n,initial:"hidden",animate:e?"visible":"hidden",children:[p.jsxs(te.div,{variants:i,children:[p.jsx(vl,{title:"Front-End Development",skills:LL}),p.jsx("div",{className:"mt-12",children:p.jsx(vl,{title:"Data Visualization",skills:VL,delayOffset:.4})})]}),p.jsxs(te.div,{variants:i,children:[p.jsx(vl,{title:"Back-End Development",skills:zL}),p.jsx("div",{className:"mt-12",children:p.jsx(vl,{title:"DevOps & Tools",skills:BL,delayOffset:.4})})]})]})]})})},GL=()=>{const t=S.useRef(null),e=vc(t,{once:!0,amount:.1}),[n,i]=S.useState(!1),r={hidden:{opacity:0},visible:{opacity:1,transition:{staggerChildren:.3}}},s={hidden:{opacity:0,y:30},visible:{opacity:1,y:0,transition:{duration:.6}}};return p.jsx("section",{id:"experience",className:"section py-24 bg-[#000000]",children:p.jsxs("div",{className:"container mx-auto px-6 child-delay",children:[p.jsxs(te.div,{className:"text-center mb-16",initial:{opacity:0,y:20},whileInView:{opacity:1,y:0},viewport:{once:!0},transition:{duration:.6},children:[p.jsx("h2",{className:"text-4xl font-bold gold-accent-glow font-['Cinzel'] mb-4","data-text":"Work Experience",children:"Work Experience"}),p.jsx("p",{className:"text-[#FFFFF7]/70 max-w-xl mx-auto font-['Cormorant_Garamond'] text-lg italic",children:"My professional journey through different roles and companies"})]}),p.jsxs("div",{ref:t,className:"relative",children:[p.jsx("div",{className:"absolute left-0 md:left-1/2 transform md:-translate-x-1/2 top-0 bottom-0 w-1 bg-gradient-to-b from-[#FFD700] via-[#FFD700]/50 to-transparent"}),p.jsx(te.div,{variants:r,initial:"hidden",animate:e?"visible":"hidden",children:UL.map((o,a)=>p.jsx(te.div,{className:"relative z-10 mb-12 last:mb-0",variants:s,children:p.jsxs("div",{className:"flex flex-col md:flex-row items-center",children:[p.jsx("div",{className:`md:w-1/2 ${a%2===0?"md:pr-12 md:text-right":"md:pl-12 text-left md:order-1"} mb-8 md:mb-0`,children:a%2===0?p.jsxs("div",{className:"royal-card p-6 rounded-xl bg-black/40 backdrop-blur-md border border-[#FFD700]/20 shadow-[0_0_15px_rgba(255,215,0,0.1)] hover:shadow-[0_10px_25px_rgba(255,215,0,0.2)] transition-all",children:[p.jsx("h3",{className:"text-xl font-bold text-[#FFD700] font-['Cinzel'] mb-2",children:o.title}),p.jsx("h4",{className:"text-[#FFD700]/80 font-medium mb-3 font-['Cinzel']",children:o.company}),p.jsx("p",{className:"text-[#FFFFF7]/90 font-['Cormorant_Garamond'] text-lg mb-4",children:o.description}),p.jsx("div",{className:"flex flex-wrap gap-2 justify-end",children:o.technologies.map((l,u)=>p.jsx("span",{className:"text-xs font-medium bg-black/50 backdrop-blur-sm text-[#FFD700] px-2 py-1 rounded border border-[#FFD700]/30",children:l.name},u))})]}):p.jsxs("div",{className:"text-[#FFD700] font-medium font-['Cinzel']",children:[p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-5 w-5 inline mr-2",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",children:p.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"})}),o.period]})}),p.jsx("div",{className:"w-10 h-10 rounded-full border-4 border-[#000000] bg-[#FFD700] text-[#000000] flex items-center justify-center shadow-[0_0_15px_rgba(255,215,0,0.5)] z-10",children:p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-5 w-5",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",children:p.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"})})}),p.jsx("div",{className:`md:w-1/2 ${a%2===0?"md:pl-12 text-left":"md:pr-12 md:text-right md:order-none"}`,children:a%2===0?p.jsxs("div",{className:"text-[#FFD700] font-medium font-['Cinzel']",children:[p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-5 w-5 inline mr-2",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",children:p.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"})}),o.period]}):p.jsxs("div",{className:"royal-card p-6 rounded-xl bg-black/40 backdrop-blur-md border border-[#FFD700]/20 shadow-[0_0_15px_rgba(255,215,0,0.1)] hover:shadow-[0_10px_25px_rgba(255,215,0,0.2)] transition-all",children:[p.jsx("h3",{className:"text-xl font-bold text-[#FFD700] font-['Cinzel'] mb-2",children:o.title}),p.jsx("h4",{className:"text-[#FFD700]/80 font-medium mb-3 font-['Cinzel']",children:o.company}),p.jsx("p",{className:"text-[#FFFFF7]/90 font-['Cormorant_Garamond'] text-lg mb-4",children:o.description}),p.jsx("div",{className:"flex flex-wrap gap-2",children:o.technologies.map((l,u)=>p.jsx("span",{className:"text-xs font-medium bg-black/50 backdrop-blur-sm text-[#FFD700] px-2 py-1 rounded border border-[#FFD700]/30",children:l.name},u))})]})})]})},a))})]}),p.jsx(te.div,{className:"mt-16 text-center",initial:{opacity:0,y:20},whileInView:{opacity:1,y:0},viewport:{once:!0},transition:{duration:.6,delay:.3},children:p.jsxs("button",{onClick:()=>i(!0),className:"inline-flex items-center px-6 py-3 bg-black text-[#FFD700] rounded-lg font-medium border border-[#FFD700]/30 transition-all hover:bg-[#FFD700]/10 font-['Cinzel']",children:["Request Full Resume",p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-5 w-5 ml-2",viewBox:"0 0 20 20",fill:"currentColor",children:p.jsx("path",{fillRule:"evenodd",d:"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z",clipRule:"evenodd"})})]})}),n&&p.jsx("div",{className:"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50",children:p.jsxs("div",{className:"bg-black/90 text-[#FFD700] p-6 rounded-xl max-w-md w-full shadow-[0_0_25px_rgba(255,215,0,0.3)] border border-[#FFD700]/20 relative",children:[p.jsx("button",{onClick:()=>i(!1),className:"absolute top-2 right-2 text-[#FFD700]/60 hover:text-[#FFD700] text-2xl font-bold",children:"×"}),p.jsx("h3",{className:"text-xl font-bold mb-4 font-['Cinzel']",children:"Request My Resume"}),p.jsxs("form",{onSubmit:o=>{o.preventDefault(),i(!1),alert("Request sent!")},children:[p.jsx("input",{type:"text",placeholder:"Your Name",className:"w-full border mb-3 px-3 py-2 rounded bg-black/70 text-[#FFD700] placeholder-[#FFD700]/50 border-[#FFD700]/30",required:!0}),p.jsx("input",{type:"email",placeholder:"Your Email",className:"w-full border mb-3 px-3 py-2 rounded bg-black/70 text-[#FFD700] placeholder-[#FFD700]/50 border-[#FFD700]/30",required:!0}),p.jsx("textarea",{placeholder:"Optional Message",className:"w-full border mb-3 px-3 py-2 rounded bg-black/70 text-[#FFD700] placeholder-[#FFD700]/50 border-[#FFD700]/30"}),p.jsx("button",{type:"submit",className:"w-full bg-[#FFD700] text-black py-2 rounded font-bold hover:bg-[#e6c200]",children:"Send Request"})]})]})})]})})},QL=()=>{const t=S.useRef(null),e=vc(t,{once:!0,amount:.1}),n={hidden:{opacity:0},visible:{opacity:1,transition:{staggerChildren:.2}}},i={hidden:{opacity:0,y:20},visible:{opacity:1,y:0,transition:{duration:.5}}};return p.jsx("section",{id:"blog",className:"section py-24 bg-[#000000]",children:p.jsxs("div",{className:"container mx-auto px-6 child-delay",children:[p.jsxs(te.div,{className:"text-center mb-16",initial:{opacity:0,y:20},whileInView:{opacity:1,y:0},viewport:{once:!0},transition:{duration:.6},children:[p.jsx("h2",{className:"text-4xl font-bold text-[#FFD700] font-['Cinzel'] mb-4",children:"Latest Articles"}),p.jsx("p",{className:"text-white/70 max-w-xl mx-auto font-['Cormorant_Garamond'] text-lg",children:"Thoughts, technical guides, and industry insights from my experience"})]}),p.jsx(te.div,{ref:t,className:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8",variants:n,initial:"hidden",animate:e?"visible":"hidden",children:$L.map((r,s)=>p.jsxs(te.article,{className:"bg-black/40 backdrop-blur-md rounded-xl overflow-hidden border border-[#FFD700]/20 shadow-[0_0_15px_rgba(255,215,0,0.1)] hover:shadow-[0_0_20px_rgba(255,215,0,0.2)] transition-all",variants:i,whileHover:{y:-5},children:[p.jsx("div",{className:"h-48 overflow-hidden border-b border-[#FFD700]/20",children:p.jsx("img",{src:r.image,alt:r.title,className:"w-full h-full object-cover transition-transform duration-500 hover:scale-110"})}),p.jsxs("div",{className:"p-6",children:[p.jsxs("div",{className:"flex items-center text-sm text-[#FFD700]/70 mb-3",children:[p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-4 w-4 mr-2",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",children:p.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"})}),p.jsx("span",{children:r.date}),p.jsx("span",{className:"mx-2",children:"•"}),p.jsx("span",{children:r.readTime})]}),p.jsx("h3",{className:"text-xl font-bold text-[#FFD700] font-['Cinzel'] mb-2",children:r.title}),p.jsx("p",{className:"text-white/70 font-['Cormorant_Garamond'] mb-4 text-lg",children:r.excerpt}),p.jsx("a",{href:r.url,className:"inline-block text-[#FFD700] font-medium hover:text-[#FFD700]/80 transition-colors border-b border-[#FFD700]/30 hover:border-[#FFD700]/60 pb-1",children:"Read Article →"})]})]},s))}),p.jsx(te.div,{className:"mt-16 text-center",initial:{opacity:0,y:20},whileInView:{opacity:1,y:0},viewport:{once:!0},transition:{duration:.6,delay:.3},children:p.jsxs("a",{href:"#",className:"inline-flex items-center px-8 py-3 bg-black/40 backdrop-blur-md border border-[#FFD700]/30 text-[#FFD700] rounded-lg font-['Cinzel'] font-medium transition-all hover:bg-black/60 hover:shadow-[0_0_15px_rgba(255,215,0,0.2)]",children:["View All Articles",p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-5 w-5 ml-2",viewBox:"0 0 20 20",fill:"currentColor",children:p.jsx("path",{fillRule:"evenodd",d:"M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z",clipRule:"evenodd"})})]})})]})})};var Wa=t=>t.type==="checkbox",kr=t=>t instanceof Date,Tt=t=>t==null;const sC=t=>typeof t=="object";var qe=t=>!Tt(t)&&!Array.isArray(t)&&sC(t)&&!kr(t),KL=t=>qe(t)&&t.target?Wa(t.target)?t.target.checked:t.target.value:t,ZL=t=>t.substring(0,t.search(/\.\d+(\.|$)/))||t,XL=(t,e)=>t.has(ZL(e)),YL=t=>{const e=t.constructor&&t.constructor.prototype;return qe(e)&&e.hasOwnProperty("isPrototypeOf")},nm=typeof window<"u"&&typeof window.HTMLElement<"u"&&typeof document<"u";function rn(t){let e;const n=Array.isArray(t);if(t instanceof Date)e=new Date(t);else if(t instanceof Set)e=new Set(t);else if(!(nm&&(t instanceof Blob||t instanceof FileList))&&(n||qe(t)))if(e=n?[]:{},!n&&!YL(t))e=t;else for(const i in t)t.hasOwnProperty(i)&&(e[i]=rn(t[i]));else return t;return e}var xc=t=>Array.isArray(t)?t.filter(Boolean):[],Ue=t=>t===void 0,W=(t,e,n)=>{if(!e||!qe(t))return n;const i=xc(e.split(/[,[\].]+?/)).reduce((r,s)=>Tt(r)?r:r[s],t);return Ue(i)||i===t?Ue(t[e])?n:t[e]:i},zn=t=>typeof t=="boolean",im=t=>/^\w*$/.test(t),oC=t=>xc(t.replace(/["|']|\]/g,"").split(/\.|\[/)),be=(t,e,n)=>{let i=-1;const r=im(e)?[e]:oC(e),s=r.length,o=s-1;for(;++i<s;){const a=r[i];let l=n;if(i!==o){const u=t[a];l=qe(u)||Array.isArray(u)?u:isNaN(+r[i+1])?{}:[]}if(a==="__proto__")return;t[a]=l,t=t[a]}return t};const Sv={BLUR:"blur",FOCUS_OUT:"focusout",CHANGE:"change"},Cn={onBlur:"onBlur",onChange:"onChange",onSubmit:"onSubmit",onTouched:"onTouched",all:"all"},ti={max:"max",min:"min",maxLength:"maxLength",minLength:"minLength",pattern:"pattern",required:"required",validate:"validate"};Me.createContext(null);var JL=(t,e,n,i=!0)=>{const r={defaultValues:e._defaultValues};for(const s in t)Object.defineProperty(r,s,{get:()=>{const o=s;return e._proxyFormState[o]!==Cn.all&&(e._proxyFormState[o]=!i||Cn.all),t[o]}});return r},Ft=t=>qe(t)&&!Object.keys(t).length,ez=(t,e,n,i)=>{n(t);const{name:r,...s}=t;return Ft(s)||Object.keys(s).length>=Object.keys(e).length||Object.keys(s).find(o=>e[o]===Cn.all)},Ll=t=>Array.isArray(t)?t:[t];function tz(t){const e=Me.useRef(t);e.current=t,Me.useEffect(()=>{const n=!t.disabled&&e.current.subject&&e.current.subject.subscribe({next:e.current.next});return()=>{n&&n.unsubscribe()}},[t.disabled])}var Wn=t=>typeof t=="string",nz=(t,e,n,i,r)=>Wn(t)?(i&&e.watch.add(t),W(n,t,r)):Array.isArray(t)?t.map(s=>(i&&e.watch.add(s),W(n,s))):(i&&(e.watchAll=!0),n),aC=(t,e,n,i,r)=>e?{...n[t],types:{...n[t]&&n[t].types?n[t].types:{},[i]:r||!0}}:{},_v=t=>({isOnSubmit:!t||t===Cn.onSubmit,isOnBlur:t===Cn.onBlur,isOnChange:t===Cn.onChange,isOnAll:t===Cn.all,isOnTouch:t===Cn.onTouched}),kv=(t,e,n)=>!n&&(e.watchAll||e.watch.has(t)||[...e.watch].some(i=>t.startsWith(i)&&/^\.\w+/.test(t.slice(i.length))));const Wo=(t,e,n,i)=>{for(const r of n||Object.keys(t)){const s=W(t,r);if(s){const{_f:o,...a}=s;if(o){if(o.refs&&o.refs[0]&&e(o.refs[0],r)&&!i)return!0;if(o.ref&&e(o.ref,o.name)&&!i)return!0;if(Wo(a,e))break}else if(qe(a)&&Wo(a,e))break}}};var iz=(t,e,n)=>{const i=Ll(W(t,n));return be(i,"root",e[n]),be(t,n,i),t},rm=t=>t.type==="file",ui=t=>typeof t=="function",Cu=t=>{if(!nm)return!1;const e=t?t.ownerDocument:0;return t instanceof(e&&e.defaultView?e.defaultView.HTMLElement:HTMLElement)},zl=t=>Wn(t),sm=t=>t.type==="radio",Tu=t=>t instanceof RegExp;const Cv={value:!1,isValid:!1},Tv={value:!0,isValid:!0};var lC=t=>{if(Array.isArray(t)){if(t.length>1){const e=t.filter(n=>n&&n.checked&&!n.disabled).map(n=>n.value);return{value:e,isValid:!!e.length}}return t[0].checked&&!t[0].disabled?t[0].attributes&&!Ue(t[0].attributes.value)?Ue(t[0].value)||t[0].value===""?Tv:{value:t[0].value,isValid:!0}:Tv:Cv}return Cv};const Pv={isValid:!1,value:null};var uC=t=>Array.isArray(t)?t.reduce((e,n)=>n&&n.checked&&!n.disabled?{isValid:!0,value:n.value}:e,Pv):Pv;function Ev(t,e,n="validate"){if(zl(t)||Array.isArray(t)&&t.every(zl)||zn(t)&&!t)return{type:n,message:zl(t)?t:"",ref:e}}var Zr=t=>qe(t)&&!Tu(t)?t:{value:t,message:""},Mv=async(t,e,n,i,r)=>{const{ref:s,refs:o,required:a,maxLength:l,minLength:u,min:c,max:d,pattern:f,validate:h,name:v,valueAsNumber:y,mount:w,disabled:g}=t._f,m=W(e,v);if(!w||g)return{};const x=o?o[0]:s,b=j=>{i&&x.reportValidity&&(x.setCustomValidity(zn(j)?"":j||""),x.reportValidity())},k={},E=sm(s),M=Wa(s),P=E||M,L=(y||rm(s))&&Ue(s.value)&&Ue(m)||Cu(s)&&s.value===""||m===""||Array.isArray(m)&&!m.length,z=aC.bind(null,v,n,k),ce=(j,ee,H,pe=ti.maxLength,ve=ti.minLength)=>{const se=j?ee:H;k[v]={type:j?pe:ve,message:se,ref:s,...z(j?pe:ve,se)}};if(r?!Array.isArray(m)||!m.length:a&&(!P&&(L||Tt(m))||zn(m)&&!m||M&&!lC(o).isValid||E&&!uC(o).isValid)){const{value:j,message:ee}=zl(a)?{value:!!a,message:a}:Zr(a);if(j&&(k[v]={type:ti.required,message:ee,ref:x,...z(ti.required,ee)},!n))return b(ee),k}if(!L&&(!Tt(c)||!Tt(d))){let j,ee;const H=Zr(d),pe=Zr(c);if(!Tt(m)&&!isNaN(m)){const ve=s.valueAsNumber||m&&+m;Tt(H.value)||(j=ve>H.value),Tt(pe.value)||(ee=ve<pe.value)}else{const ve=s.valueAsDate||new Date(m),se=K=>new Date(new Date().toDateString()+" "+K),I=s.type=="time",G=s.type=="week";Wn(H.value)&&m&&(j=I?se(m)>se(H.value):G?m>H.value:ve>new Date(H.value)),Wn(pe.value)&&m&&(ee=I?se(m)<se(pe.value):G?m<pe.value:ve<new Date(pe.value))}if((j||ee)&&(ce(!!j,H.message,pe.message,ti.max,ti.min),!n))return b(k[v].message),k}if((l||u)&&!L&&(Wn(m)||r&&Array.isArray(m))){const j=Zr(l),ee=Zr(u),H=!Tt(j.value)&&m.length>+j.value,pe=!Tt(ee.value)&&m.length<+ee.value;if((H||pe)&&(ce(H,j.message,ee.message),!n))return b(k[v].message),k}if(f&&!L&&Wn(m)){const{value:j,message:ee}=Zr(f);if(Tu(j)&&!m.match(j)&&(k[v]={type:ti.pattern,message:ee,ref:s,...z(ti.pattern,ee)},!n))return b(ee),k}if(h){if(ui(h)){const j=await h(m,e),ee=Ev(j,x);if(ee&&(k[v]={...ee,...z(ti.validate,ee.message)},!n))return b(ee.message),k}else if(qe(h)){let j={};for(const ee in h){if(!Ft(j)&&!n)break;const H=Ev(await h[ee](m,e),x,ee);H&&(j={...H,...z(ee,H.message)},b(H.message),n&&(k[v]=j))}if(!Ft(j)&&(k[v]={ref:x,...j},!n))return k}}return b(!0),k};function rz(t,e){const n=e.slice(0,-1).length;let i=0;for(;i<n;)t=Ue(t)?i++:t[e[i++]];return t}function sz(t){for(const e in t)if(t.hasOwnProperty(e)&&!Ue(t[e]))return!1;return!0}function Qe(t,e){const n=Array.isArray(e)?e:im(e)?[e]:oC(e),i=n.length===1?t:rz(t,n),r=n.length-1,s=n[r];return i&&delete i[s],r!==0&&(qe(i)&&Ft(i)||Array.isArray(i)&&sz(i))&&Qe(t,n.slice(0,-1)),t}var Ad=()=>{let t=[];return{get observers(){return t},next:r=>{for(const s of t)s.next&&s.next(r)},subscribe:r=>(t.push(r),{unsubscribe:()=>{t=t.filter(s=>s!==r)}}),unsubscribe:()=>{t=[]}}},oh=t=>Tt(t)||!sC(t);function Ai(t,e){if(oh(t)||oh(e))return t===e;if(kr(t)&&kr(e))return t.getTime()===e.getTime();const n=Object.keys(t),i=Object.keys(e);if(n.length!==i.length)return!1;for(const r of n){const s=t[r];if(!i.includes(r))return!1;if(r!=="ref"){const o=e[r];if(kr(s)&&kr(o)||qe(s)&&qe(o)||Array.isArray(s)&&Array.isArray(o)?!Ai(s,o):s!==o)return!1}}return!0}var cC=t=>t.type==="select-multiple",oz=t=>sm(t)||Wa(t),Rd=t=>Cu(t)&&t.isConnected,dC=t=>{for(const e in t)if(ui(t[e]))return!0;return!1};function Pu(t,e={}){const n=Array.isArray(t);if(qe(t)||n)for(const i in t)Array.isArray(t[i])||qe(t[i])&&!dC(t[i])?(e[i]=Array.isArray(t[i])?[]:{},Pu(t[i],e[i])):Tt(t[i])||(e[i]=!0);return e}function fC(t,e,n){const i=Array.isArray(t);if(qe(t)||i)for(const r in t)Array.isArray(t[r])||qe(t[r])&&!dC(t[r])?Ue(e)||oh(n[r])?n[r]=Array.isArray(t[r])?Pu(t[r],[]):{...Pu(t[r])}:fC(t[r],Tt(e)?{}:e[r],n[r]):n[r]=!Ai(t[r],e[r]);return n}var xo=(t,e)=>fC(t,e,Pu(e)),hC=(t,{valueAsNumber:e,valueAsDate:n,setValueAs:i})=>Ue(t)?t:e?t===""?NaN:t&&+t:n&&Wn(t)?new Date(t):i?i(t):t;function Fd(t){const e=t.ref;if(!(t.refs?t.refs.every(n=>n.disabled):e.disabled))return rm(e)?e.files:sm(e)?uC(t.refs).value:cC(e)?[...e.selectedOptions].map(({value:n})=>n):Wa(e)?lC(t.refs).value:hC(Ue(e.value)?t.ref.value:e.value,t)}var az=(t,e,n,i)=>{const r={};for(const s of t){const o=W(e,s);o&&be(r,s,o._f)}return{criteriaMode:n,names:[...t],fields:r,shouldUseNativeValidation:i}},wo=t=>Ue(t)?t:Tu(t)?t.source:qe(t)?Tu(t.value)?t.value.source:t.value:t;const Dv="AsyncFunction";var lz=t=>(!t||!t.validate)&&!!(ui(t.validate)&&t.validate.constructor.name===Dv||qe(t.validate)&&Object.values(t.validate).find(e=>e.constructor.name===Dv)),uz=t=>t.mount&&(t.required||t.min||t.max||t.maxLength||t.minLength||t.pattern||t.validate);function Nv(t,e,n){const i=W(t,n);if(i||im(n))return{error:i,name:n};const r=n.split(".");for(;r.length;){const s=r.join("."),o=W(e,s),a=W(t,s);if(o&&!Array.isArray(o)&&n!==s)return{name:n};if(a&&a.type)return{name:s,error:a};r.pop()}return{name:n}}var cz=(t,e,n,i,r)=>r.isOnAll?!1:!n&&r.isOnTouch?!(e||t):(n?i.isOnBlur:r.isOnBlur)?!t:(n?i.isOnChange:r.isOnChange)?t:!0,dz=(t,e)=>!xc(W(t,e)).length&&Qe(t,e);const fz={mode:Cn.onSubmit,reValidateMode:Cn.onChange,shouldFocusError:!0};function hz(t={}){let e={...fz,...t},n={submitCount:0,isDirty:!1,isLoading:ui(e.defaultValues),isValidating:!1,isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,touchedFields:{},dirtyFields:{},validatingFields:{},errors:e.errors||{},disabled:e.disabled||!1},i={},r=qe(e.defaultValues)||qe(e.values)?rn(e.defaultValues||e.values)||{}:{},s=e.shouldUnregister?{}:rn(r),o={action:!1,mount:!1,watch:!1},a={mount:new Set,unMount:new Set,array:new Set,watch:new Set},l,u=0;const c={isDirty:!1,dirtyFields:!1,validatingFields:!1,touchedFields:!1,isValidating:!1,isValid:!1,errors:!1},d={values:Ad(),array:Ad(),state:Ad()},f=_v(e.mode),h=_v(e.reValidateMode),v=e.criteriaMode===Cn.all,y=_=>T=>{clearTimeout(u),u=setTimeout(_,T)},w=async _=>{if(!t.disabled&&(c.isValid||_)){const T=e.resolver?Ft((await P()).errors):await z(i,!0);T!==n.isValid&&d.state.next({isValid:T})}},g=(_,T)=>{!t.disabled&&(c.isValidating||c.validatingFields)&&((_||Array.from(a.mount)).forEach(D=>{D&&(T?be(n.validatingFields,D,T):Qe(n.validatingFields,D))}),d.state.next({validatingFields:n.validatingFields,isValidating:!Ft(n.validatingFields)}))},m=(_,T=[],D,U,V=!0,O=!0)=>{if(U&&D&&!t.disabled){if(o.action=!0,O&&Array.isArray(W(i,_))){const Z=D(W(i,_),U.argA,U.argB);V&&be(i,_,Z)}if(O&&Array.isArray(W(n.errors,_))){const Z=D(W(n.errors,_),U.argA,U.argB);V&&be(n.errors,_,Z),dz(n.errors,_)}if(c.touchedFields&&O&&Array.isArray(W(n.touchedFields,_))){const Z=D(W(n.touchedFields,_),U.argA,U.argB);V&&be(n.touchedFields,_,Z)}c.dirtyFields&&(n.dirtyFields=xo(r,s)),d.state.next({name:_,isDirty:j(_,T),dirtyFields:n.dirtyFields,errors:n.errors,isValid:n.isValid})}else be(s,_,T)},x=(_,T)=>{be(n.errors,_,T),d.state.next({errors:n.errors})},b=_=>{n.errors=_,d.state.next({errors:n.errors,isValid:!1})},k=(_,T,D,U)=>{const V=W(i,_);if(V){const O=W(s,_,Ue(D)?W(r,_):D);Ue(O)||U&&U.defaultChecked||T?be(s,_,T?O:Fd(V._f)):pe(_,O),o.mount&&w()}},E=(_,T,D,U,V)=>{let O=!1,Z=!1;const de={name:_};if(!t.disabled){const Ye=!!(W(i,_)&&W(i,_)._f&&W(i,_)._f.disabled);if(!D||U){c.isDirty&&(Z=n.isDirty,n.isDirty=de.isDirty=j(),O=Z!==de.isDirty);const Je=Ye||Ai(W(r,_),T);Z=!!(!Ye&&W(n.dirtyFields,_)),Je||Ye?Qe(n.dirtyFields,_):be(n.dirtyFields,_,!0),de.dirtyFields=n.dirtyFields,O=O||c.dirtyFields&&Z!==!Je}if(D){const Je=W(n.touchedFields,_);Je||(be(n.touchedFields,_,D),de.touchedFields=n.touchedFields,O=O||c.touchedFields&&Je!==D)}O&&V&&d.state.next(de)}return O?de:{}},M=(_,T,D,U)=>{const V=W(n.errors,_),O=c.isValid&&zn(T)&&n.isValid!==T;if(t.delayError&&D?(l=y(()=>x(_,D)),l(t.delayError)):(clearTimeout(u),l=null,D?be(n.errors,_,D):Qe(n.errors,_)),(D?!Ai(V,D):V)||!Ft(U)||O){const Z={...U,...O&&zn(T)?{isValid:T}:{},errors:n.errors,name:_};n={...n,...Z},d.state.next(Z)}},P=async _=>{g(_,!0);const T=await e.resolver(s,e.context,az(_||a.mount,i,e.criteriaMode,e.shouldUseNativeValidation));return g(_),T},L=async _=>{const{errors:T}=await P(_);if(_)for(const D of _){const U=W(T,D);U?be(n.errors,D,U):Qe(n.errors,D)}else n.errors=T;return T},z=async(_,T,D={valid:!0})=>{for(const U in _){const V=_[U];if(V){const{_f:O,...Z}=V;if(O){const de=a.array.has(O.name),Ye=V._f&&lz(V._f);Ye&&c.validatingFields&&g([U],!0);const Je=await Mv(V,s,v,e.shouldUseNativeValidation&&!T,de);if(Ye&&c.validatingFields&&g([U]),Je[O.name]&&(D.valid=!1,T))break;!T&&(W(Je,O.name)?de?iz(n.errors,Je,O.name):be(n.errors,O.name,Je[O.name]):Qe(n.errors,O.name))}!Ft(Z)&&await z(Z,T,D)}}return D.valid},ce=()=>{for(const _ of a.unMount){const T=W(i,_);T&&(T._f.refs?T._f.refs.every(D=>!Rd(D)):!Rd(T._f.ref))&&yn(_)}a.unMount=new Set},j=(_,T)=>!t.disabled&&(_&&T&&be(s,_,T),!Ai(he(),r)),ee=(_,T,D)=>nz(_,a,{...o.mount?s:Ue(T)?r:Wn(_)?{[_]:T}:T},D,T),H=_=>xc(W(o.mount?s:r,_,t.shouldUnregister?W(r,_,[]):[])),pe=(_,T,D={})=>{const U=W(i,_);let V=T;if(U){const O=U._f;O&&(!O.disabled&&be(s,_,hC(T,O)),V=Cu(O.ref)&&Tt(T)?"":T,cC(O.ref)?[...O.ref.options].forEach(Z=>Z.selected=V.includes(Z.value)):O.refs?Wa(O.ref)?O.refs.length>1?O.refs.forEach(Z=>(!Z.defaultChecked||!Z.disabled)&&(Z.checked=Array.isArray(V)?!!V.find(de=>de===Z.value):V===Z.value)):O.refs[0]&&(O.refs[0].checked=!!V):O.refs.forEach(Z=>Z.checked=Z.value===V):rm(O.ref)?O.ref.value="":(O.ref.value=V,O.ref.type||d.values.next({name:_,values:{...s}})))}(D.shouldDirty||D.shouldTouch)&&E(_,V,D.shouldTouch,D.shouldDirty,!0),D.shouldValidate&&K(_)},ve=(_,T,D)=>{for(const U in T){const V=T[U],O=`${_}.${U}`,Z=W(i,O);(a.array.has(_)||qe(V)||Z&&!Z._f)&&!kr(V)?ve(O,V,D):pe(O,V,D)}},se=(_,T,D={})=>{const U=W(i,_),V=a.array.has(_),O=rn(T);be(s,_,O),V?(d.array.next({name:_,values:{...s}}),(c.isDirty||c.dirtyFields)&&D.shouldDirty&&d.state.next({name:_,dirtyFields:xo(r,s),isDirty:j(_,O)})):U&&!U._f&&!Tt(O)?ve(_,O,D):pe(_,O,D),kv(_,a)&&d.state.next({...n}),d.values.next({name:o.mount?_:void 0,values:{...s}})},I=async _=>{o.mount=!0;const T=_.target;let D=T.name,U=!0;const V=W(i,D),O=()=>T.type?Fd(V._f):KL(_),Z=de=>{U=Number.isNaN(de)||kr(de)&&isNaN(de.getTime())||Ai(de,W(s,D,de))};if(V){let de,Ye;const Je=O(),hr=_.type===Sv.BLUR||_.type===Sv.FOCUS_OUT,yP=!uz(V._f)&&!e.resolver&&!W(n.errors,D)&&!V._f.deps||cz(hr,W(n.touchedFields,D),n.isSubmitted,h,f),Sc=kv(D,a,hr);be(s,D,Je),hr?(V._f.onBlur&&V._f.onBlur(_),l&&l(0)):V._f.onChange&&V._f.onChange(_);const _c=E(D,Je,hr,!1),vP=!Ft(_c)||Sc;if(!hr&&d.values.next({name:D,type:_.type,values:{...s}}),yP)return c.isValid&&(t.mode==="onBlur"?hr&&w():w()),vP&&d.state.next({name:D,...Sc?{}:_c});if(!hr&&Sc&&d.state.next({...n}),e.resolver){const{errors:pm}=await P([D]);if(Z(Je),U){const xP=Nv(n.errors,i,D),mm=Nv(pm,i,xP.name||D);de=mm.error,D=mm.name,Ye=Ft(pm)}}else g([D],!0),de=(await Mv(V,s,v,e.shouldUseNativeValidation))[D],g([D]),Z(Je),U&&(de?Ye=!1:c.isValid&&(Ye=await z(i,!0)));U&&(V._f.deps&&K(V._f.deps),M(D,Ye,de,_c))}},G=(_,T)=>{if(W(n.errors,T)&&_.focus)return _.focus(),1},K=async(_,T={})=>{let D,U;const V=Ll(_);if(e.resolver){const O=await L(Ue(_)?_:V);D=Ft(O),U=_?!V.some(Z=>W(O,Z)):D}else _?(U=(await Promise.all(V.map(async O=>{const Z=W(i,O);return await z(Z&&Z._f?{[O]:Z}:Z)}))).every(Boolean),!(!U&&!n.isValid)&&w()):U=D=await z(i);return d.state.next({...!Wn(_)||c.isValid&&D!==n.isValid?{}:{name:_},...e.resolver||!_?{isValid:D}:{},errors:n.errors}),T.shouldFocus&&!U&&Wo(i,G,_?V:a.mount),U},he=_=>{const T={...o.mount?s:r};return Ue(_)?T:Wn(_)?W(T,_):_.map(D=>W(T,D))},ke=(_,T)=>({invalid:!!W((T||n).errors,_),isDirty:!!W((T||n).dirtyFields,_),error:W((T||n).errors,_),isValidating:!!W(n.validatingFields,_),isTouched:!!W((T||n).touchedFields,_)}),gn=_=>{_&&Ll(_).forEach(T=>Qe(n.errors,T)),d.state.next({errors:_?n.errors:{}})},Bt=(_,T,D)=>{const U=(W(i,_,{_f:{}})._f||{}).ref,V=W(n.errors,_)||{},{ref:O,message:Z,type:de,...Ye}=V;be(n.errors,_,{...Ye,...T,ref:U}),d.state.next({name:_,errors:n.errors,isValid:!1}),D&&D.shouldFocus&&U&&U.focus&&U.focus()},oo=(_,T)=>ui(_)?d.values.subscribe({next:D=>_(ee(void 0,T),D)}):ee(_,T,!0),yn=(_,T={})=>{for(const D of _?Ll(_):a.mount)a.mount.delete(D),a.array.delete(D),T.keepValue||(Qe(i,D),Qe(s,D)),!T.keepError&&Qe(n.errors,D),!T.keepDirty&&Qe(n.dirtyFields,D),!T.keepTouched&&Qe(n.touchedFields,D),!T.keepIsValidating&&Qe(n.validatingFields,D),!e.shouldUnregister&&!T.keepDefaultValue&&Qe(r,D);d.values.next({values:{...s}}),d.state.next({...n,...T.keepDirty?{isDirty:j()}:{}}),!T.keepIsValid&&w()},fr=({disabled:_,name:T,field:D,fields:U,value:V})=>{if(zn(_)&&o.mount||_){const O=_?void 0:Ue(V)?Fd(D?D._f:W(U,T)._f):V;be(s,T,O),E(T,O,!1,!1,!0)}},bc=(_,T={})=>{let D=W(i,_);const U=zn(T.disabled)||zn(t.disabled);return be(i,_,{...D||{},_f:{...D&&D._f?D._f:{ref:{name:_}},name:_,mount:!0,...T}}),a.mount.add(_),D?fr({field:D,disabled:zn(T.disabled)?T.disabled:t.disabled,name:_,value:T.value}):k(_,!0,T.value),{...U?{disabled:T.disabled||t.disabled}:{},...e.progressive?{required:!!T.required,min:wo(T.min),max:wo(T.max),minLength:wo(T.minLength),maxLength:wo(T.maxLength),pattern:wo(T.pattern)}:{},name:_,onChange:I,onBlur:I,ref:V=>{if(V){bc(_,T),D=W(i,_);const O=Ue(V.value)&&V.querySelectorAll&&V.querySelectorAll("input,select,textarea")[0]||V,Z=oz(O),de=D._f.refs||[];if(Z?de.find(Ye=>Ye===O):O===D._f.ref)return;be(i,_,{_f:{...D._f,...Z?{refs:[...de.filter(Rd),O,...Array.isArray(W(r,_))?[{}]:[]],ref:{type:O.type,name:_}}:{ref:O}}}),k(_,!1,void 0,O)}else D=W(i,_,{}),D._f&&(D._f.mount=!1),(e.shouldUnregister||T.shouldUnregister)&&!(XL(a.array,_)&&o.action)&&a.unMount.add(_)}}},cm=()=>e.shouldFocusError&&Wo(i,G,a.mount),mP=_=>{zn(_)&&(d.state.next({disabled:_}),Wo(i,(T,D)=>{const U=W(i,D);U&&(T.disabled=U._f.disabled||_,Array.isArray(U._f.refs)&&U._f.refs.forEach(V=>{V.disabled=U._f.disabled||_}))},0,!1))},dm=(_,T)=>async D=>{let U;D&&(D.preventDefault&&D.preventDefault(),D.persist&&D.persist());let V=rn(s);if(d.state.next({isSubmitting:!0}),e.resolver){const{errors:O,values:Z}=await P();n.errors=O,V=Z}else await z(i);if(Qe(n.errors,"root"),Ft(n.errors)){d.state.next({errors:{}});try{await _(V,D)}catch(O){U=O}}else T&&await T({...n.errors},D),cm(),setTimeout(cm);if(d.state.next({isSubmitted:!0,isSubmitting:!1,isSubmitSuccessful:Ft(n.errors)&&!U,submitCount:n.submitCount+1,errors:n.errors}),U)throw U},gP=(_,T={})=>{W(i,_)&&(Ue(T.defaultValue)?se(_,rn(W(r,_))):(se(_,T.defaultValue),be(r,_,rn(T.defaultValue))),T.keepTouched||Qe(n.touchedFields,_),T.keepDirty||(Qe(n.dirtyFields,_),n.isDirty=T.defaultValue?j(_,rn(W(r,_))):j()),T.keepError||(Qe(n.errors,_),c.isValid&&w()),d.state.next({...n}))},fm=(_,T={})=>{const D=_?rn(_):r,U=rn(D),V=Ft(_),O=V?r:U;if(T.keepDefaultValues||(r=D),!T.keepValues){if(T.keepDirtyValues){const Z=new Set([...a.mount,...Object.keys(xo(r,s))]);for(const de of Array.from(Z))W(n.dirtyFields,de)?be(O,de,W(s,de)):se(de,W(O,de))}else{if(nm&&Ue(_))for(const Z of a.mount){const de=W(i,Z);if(de&&de._f){const Ye=Array.isArray(de._f.refs)?de._f.refs[0]:de._f.ref;if(Cu(Ye)){const Je=Ye.closest("form");if(Je){Je.reset();break}}}}i={}}s=t.shouldUnregister?T.keepDefaultValues?rn(r):{}:rn(O),d.array.next({values:{...O}}),d.values.next({values:{...O}})}a={mount:T.keepDirtyValues?a.mount:new Set,unMount:new Set,array:new Set,watch:new Set,watchAll:!1,focus:""},o.mount=!c.isValid||!!T.keepIsValid||!!T.keepDirtyValues,o.watch=!!t.shouldUnregister,d.state.next({submitCount:T.keepSubmitCount?n.submitCount:0,isDirty:V?!1:T.keepDirty?n.isDirty:!!(T.keepDefaultValues&&!Ai(_,r)),isSubmitted:T.keepIsSubmitted?n.isSubmitted:!1,dirtyFields:V?{}:T.keepDirtyValues?T.keepDefaultValues&&s?xo(r,s):n.dirtyFields:T.keepDefaultValues&&_?xo(r,_):T.keepDirty?n.dirtyFields:{},touchedFields:T.keepTouched?n.touchedFields:{},errors:T.keepErrors?n.errors:{},isSubmitSuccessful:T.keepIsSubmitSuccessful?n.isSubmitSuccessful:!1,isSubmitting:!1})},hm=(_,T)=>fm(ui(_)?_(s):_,T);return{control:{register:bc,unregister:yn,getFieldState:ke,handleSubmit:dm,setError:Bt,_executeSchema:P,_getWatch:ee,_getDirty:j,_updateValid:w,_removeUnmounted:ce,_updateFieldArray:m,_updateDisabledField:fr,_getFieldArray:H,_reset:fm,_resetDefaultValues:()=>ui(e.defaultValues)&&e.defaultValues().then(_=>{hm(_,e.resetOptions),d.state.next({isLoading:!1})}),_updateFormState:_=>{n={...n,..._}},_disableForm:mP,_subjects:d,_proxyFormState:c,_setErrors:b,get _fields(){return i},get _formValues(){return s},get _state(){return o},set _state(_){o=_},get _defaultValues(){return r},get _names(){return a},set _names(_){a=_},get _formState(){return n},set _formState(_){n=_},get _options(){return e},set _options(_){e={...e,..._}}},trigger:K,register:bc,handleSubmit:dm,watch:oo,setValue:se,getValues:he,reset:hm,resetField:gP,clearErrors:gn,unregister:yn,setError:Bt,setFocus:(_,T={})=>{const D=W(i,_),U=D&&D._f;if(U){const V=U.refs?U.refs[0]:U.ref;V.focus&&(V.focus(),T.shouldSelect&&V.select())}},getFieldState:ke}}function pz(t={}){const e=Me.useRef(),n=Me.useRef(),[i,r]=Me.useState({isDirty:!1,isValidating:!1,isLoading:ui(t.defaultValues),isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,submitCount:0,dirtyFields:{},touchedFields:{},validatingFields:{},errors:t.errors||{},disabled:t.disabled||!1,defaultValues:ui(t.defaultValues)?void 0:t.defaultValues});e.current||(e.current={...hz(t),formState:i});const s=e.current.control;return s._options=t,tz({subject:s._subjects.state,next:o=>{ez(o,s._proxyFormState,s._updateFormState)&&r({...s._formState})}}),Me.useEffect(()=>s._disableForm(t.disabled),[s,t.disabled]),Me.useEffect(()=>{if(s._proxyFormState.isDirty){const o=s._getDirty();o!==i.isDirty&&s._subjects.state.next({isDirty:o})}},[s,i.isDirty]),Me.useEffect(()=>{t.values&&!Ai(t.values,n.current)?(s._reset(t.values,s._options.resetOptions),n.current=t.values,r(o=>({...o}))):s._resetDefaultValues()},[t.values,s]),Me.useEffect(()=>{t.errors&&s._setErrors(t.errors)},[t.errors,s]),Me.useEffect(()=>{s._state.mount||(s._updateValid(),s._state.mount=!0),s._state.watch&&(s._state.watch=!1,s._subjects.state.next({...s._formState})),s._removeUnmounted()}),Me.useEffect(()=>{t.shouldUnregister&&s._subjects.values.next({values:s._getWatch()})},[t.shouldUnregister,s]),Me.useEffect(()=>{e.current&&(e.current.watch=e.current.watch.bind({}))},[i]),e.current.formState=JL(i,s),e.current}const Av=(t,e,n)=>{if(t&&"reportValidity"in t){const i=W(n,e);t.setCustomValidity(i&&i.message||""),t.reportValidity()}},pC=(t,e)=>{for(const n in e.fields){const i=e.fields[n];i&&i.ref&&"reportValidity"in i.ref?Av(i.ref,n,t):i.refs&&i.refs.forEach(r=>Av(r,n,t))}},mz=(t,e)=>{e.shouldUseNativeValidation&&pC(t,e);const n={};for(const i in t){const r=W(e.fields,i),s=Object.assign(t[i]||{},{ref:r&&r.ref});if(gz(e.names||Object.keys(t),i)){const o=Object.assign({},W(n,i));be(o,"root",s),be(n,i,o)}else be(n,i,s)}return n},gz=(t,e)=>t.some(n=>n.startsWith(e+"."));var yz=function(t,e){for(var n={};t.length;){var i=t[0],r=i.code,s=i.message,o=i.path.join(".");if(!n[o])if("unionErrors"in i){var a=i.unionErrors[0].errors[0];n[o]={message:a.message,type:a.code}}else n[o]={message:s,type:r};if("unionErrors"in i&&i.unionErrors.forEach(function(c){return c.errors.forEach(function(d){return t.push(d)})}),e){var l=n[o].types,u=l&&l[i.code];n[o]=aC(o,e,n,r,u?[].concat(u,i.message):i.message)}t.shift()}return n},vz=function(t,e,n){return n===void 0&&(n={}),function(i,r,s){try{return Promise.resolve(function(o,a){try{var l=Promise.resolve(t[n.mode==="sync"?"parse":"parseAsync"](i,e)).then(function(u){return s.shouldUseNativeValidation&&pC({},s),{errors:{},values:n.raw?i:u}})}catch(u){return a(u)}return l&&l.then?l.then(void 0,a):l}(0,function(o){if(function(a){return Array.isArray(a==null?void 0:a.errors)}(o))return{values:{},errors:mz(yz(o.errors,!s.shouldUseNativeValidation&&s.criteriaMode==="all"),s)};throw o}))}catch(o){return Promise.reject(o)}}};const A=Symbol.for("drizzle:entityKind");function ot(t,e){if(!t||typeof t!="object")return!1;if(t instanceof e)return!0;if(!Object.prototype.hasOwnProperty.call(e,A))throw new Error(`Class "${e.name??"<unknown>"}" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`);let n=Object.getPrototypeOf(t).constructor;if(n)for(;n;){if(A in n&&n[A]===e[A])return!0;n=Object.getPrototypeOf(n)}return!1}var Zv;Zv=A;class Zs{constructor(e,n){C(this,"name");C(this,"keyAsName");C(this,"primary");C(this,"notNull");C(this,"default");C(this,"defaultFn");C(this,"onUpdateFn");C(this,"hasDefault");C(this,"isUnique");C(this,"uniqueName");C(this,"uniqueType");C(this,"dataType");C(this,"columnType");C(this,"enumValues");C(this,"generated");C(this,"generatedIdentity");C(this,"config");this.table=e,this.config=n,this.name=n.name,this.keyAsName=n.keyAsName,this.notNull=n.notNull,this.default=n.default,this.defaultFn=n.defaultFn,this.onUpdateFn=n.onUpdateFn,this.hasDefault=n.hasDefault,this.primary=n.primaryKey,this.isUnique=n.isUnique,this.uniqueName=n.uniqueName,this.uniqueType=n.uniqueType,this.dataType=n.dataType,this.columnType=n.columnType,this.generated=n.generated,this.generatedIdentity=n.generatedIdentity}mapFromDriverValue(e){return e}mapToDriverValue(e){return e}shouldDisableInsert(){return this.config.generated!==void 0&&this.config.generated.type!=="byDefault"}}C(Zs,Zv,"Column");var Xv;Xv=A;class mC{constructor(e,n,i){C(this,"config");C(this,"$default",this.$defaultFn);C(this,"$onUpdate",this.$onUpdateFn);this.config={name:e,keyAsName:e==="",notNull:!1,default:void 0,hasDefault:!1,primaryKey:!1,isUnique:!1,uniqueName:void 0,uniqueType:void 0,dataType:n,columnType:i,generated:void 0}}$type(){return this}notNull(){return this.config.notNull=!0,this}default(e){return this.config.default=e,this.config.hasDefault=!0,this}$defaultFn(e){return this.config.defaultFn=e,this.config.hasDefault=!0,this}$onUpdateFn(e){return this.config.onUpdateFn=e,this.config.hasDefault=!0,this}primaryKey(){return this.config.primaryKey=!0,this.config.notNull=!0,this}setName(e){this.config.name===""&&(this.config.name=e)}}C(mC,Xv,"ColumnBuilder");const Cs=Symbol.for("drizzle:Name");var Yv;Yv=A;class gC{constructor(e,n){C(this,"reference");C(this,"_onUpdate","no action");C(this,"_onDelete","no action");this.reference=()=>{const{name:i,columns:r,foreignColumns:s}=e();return{name:i,columns:r,foreignTable:s[0].table,foreignColumns:s}},n&&(this._onUpdate=n.onUpdate,this._onDelete=n.onDelete)}onUpdate(e){return this._onUpdate=e===void 0?"no action":e,this}onDelete(e){return this._onDelete=e===void 0?"no action":e,this}build(e){return new yC(e,this)}}C(gC,Yv,"PgForeignKeyBuilder");var Jv;Jv=A;class yC{constructor(e,n){C(this,"reference");C(this,"onUpdate");C(this,"onDelete");this.table=e,this.reference=n.reference,this.onUpdate=n._onUpdate,this.onDelete=n._onDelete}getName(){const{name:e,columns:n,foreignColumns:i}=this.reference(),r=n.map(a=>a.name),s=i.map(a=>a.name),o=[this.table[Cs],...r,i[0].table[Cs],...s];return e??`${o.join("_")}_fk`}}C(yC,Jv,"PgForeignKey");function xz(t,...e){return t(...e)}function wz(t,e){return`${t[Cs]}_${e.join("_")}_unique`}function Rv(t,e,n){for(let i=e;i<t.length;i++){const r=t[i];if(r==="\\"){i++;continue}if(r==='"')return[t.slice(e,i).replace(/\\/g,""),i+1];if(!n&&(r===","||r==="}"))return[t.slice(e,i).replace(/\\/g,""),i]}return[t.slice(e).replace(/\\/g,""),t.length]}function vC(t,e=0){const n=[];let i=e,r=!1;for(;i<t.length;){const s=t[i];if(s===","){(r||i===e)&&n.push(""),r=!0,i++;continue}if(r=!1,s==="\\"){i+=2;continue}if(s==='"'){const[l,u]=Rv(t,i+1,!0);n.push(l),i=u;continue}if(s==="}")return[n,i+1];if(s==="{"){const[l,u]=vC(t,i+1);n.push(l),i=u;continue}const[o,a]=Rv(t,i,!1);n.push(o),i=a}return[n,i]}function bz(t){const[e]=vC(t,1);return e}function xC(t){return`{${t.map(e=>Array.isArray(e)?xC(e):typeof e=="string"?`"${e.replace(/\\/g,"\\\\").replace(/"/g,'\\"')}"`:`${e}`).join(",")}}`}var e0,t0;class ge extends(t0=mC,e0=A,t0){constructor(){super(...arguments);C(this,"foreignKeyConfigs",[])}array(n){return new bC(this.config.name,this,n)}references(n,i={}){return this.foreignKeyConfigs.push({ref:n,actions:i}),this}unique(n,i){return this.config.isUnique=!0,this.config.uniqueName=n,this.config.uniqueType=i==null?void 0:i.nulls,this}generatedAlwaysAs(n){return this.config.generated={as:n,type:"always",mode:"stored"},this}buildForeignKeys(n,i){return this.foreignKeyConfigs.map(({ref:r,actions:s})=>xz((o,a)=>{const l=new gC(()=>{const u=o();return{columns:[n],foreignColumns:[u]}});return a.onUpdate&&l.onUpdate(a.onUpdate),a.onDelete&&l.onDelete(a.onDelete),l.build(i)},r,s))}buildExtraConfigColumn(n){return new wC(n,this.config)}}C(ge,e0,"PgColumnBuilder");var n0,i0;class re extends(i0=Zs,n0=A,i0){constructor(e,n){n.uniqueName||(n.uniqueName=wz(e,[n.name])),super(e,n),this.table=e}}C(re,n0,"PgColumn");var r0,s0;class wC extends(s0=re,r0=A,s0){constructor(){super(...arguments);C(this,"indexConfig",{order:this.config.order??"asc",nulls:this.config.nulls??"last",opClass:this.config.opClass});C(this,"defaultConfig",{order:"asc",nulls:"last",opClass:void 0})}getSQLType(){return this.getSQLType()}asc(){return this.indexConfig.order="asc",this}desc(){return this.indexConfig.order="desc",this}nullsFirst(){return this.indexConfig.nulls="first",this}nullsLast(){return this.indexConfig.nulls="last",this}op(n){return this.indexConfig.opClass=n,this}}C(wC,r0,"ExtraConfigColumn");var o0,a0;class bC extends(a0=ge,o0=A,a0){constructor(e,n,i){super(e,"array","PgArray"),this.config.baseBuilder=n,this.config.size=i}build(e){const n=this.config.baseBuilder.build(e);return new ah(e,this.config,n)}}C(bC,o0,"PgArrayBuilder");var l0,u0;const Vu=class Vu extends(u0=re,l0=A,u0){constructor(n,i,r,s){super(n,i);C(this,"size");this.baseColumn=r,this.range=s,this.size=i.size}getSQLType(){return`${this.baseColumn.getSQLType()}[${typeof this.size=="number"?this.size:""}]`}mapFromDriverValue(n){return typeof n=="string"&&(n=bz(n)),n.map(i=>this.baseColumn.mapFromDriverValue(i))}mapToDriverValue(n,i=!1){const r=n.map(s=>s===null?null:ot(this.baseColumn,Vu)?this.baseColumn.mapToDriverValue(s,!0):this.baseColumn.mapToDriverValue(s));return i?r:xC(r)}};C(Vu,l0,"PgArray");let ah=Vu;const Fv=Symbol.for("drizzle:isPgEnum");function Sz(t){return!!t&&typeof t=="function"&&Fv in t&&t[Fv]===!0}var c0;c0=A;class om{constructor(e,n,i,r=!1){this._={brand:"Subquery",sql:e,selectedFields:n,alias:i,isWith:r}}}C(om,c0,"Subquery");const _z={startActiveSpan(t,e){return e()}},Ts=Symbol.for("drizzle:ViewBaseConfig"),Id=Symbol.for("drizzle:Schema"),Iv=Symbol.for("drizzle:Columns"),Ov=Symbol.for("drizzle:ExtraConfigColumns"),Od=Symbol.for("drizzle:OriginalName"),jd=Symbol.for("drizzle:BaseName"),Eu=Symbol.for("drizzle:IsAlias"),jv=Symbol.for("drizzle:ExtraConfigBuilder"),SC=Symbol.for("drizzle:IsDrizzleTable");var d0,f0,h0,p0,m0,g0,y0,v0,x0,w0;w0=A,x0=Cs,v0=Od,y0=Id,g0=Iv,m0=Ov,p0=jd,h0=Eu,f0=SC,d0=jv;class Et{constructor(e,n,i){C(this,x0);C(this,v0);C(this,y0);C(this,g0);C(this,m0);C(this,p0);C(this,h0,!1);C(this,f0,!0);C(this,d0);this[Cs]=this[Od]=e,this[Id]=n,this[jd]=i}}C(Et,w0,"Table"),C(Et,"Symbol",{Name:Cs,Schema:Id,OriginalName:Od,Columns:Iv,ExtraConfigColumns:Ov,BaseName:jd,IsAlias:Eu,ExtraConfigBuilder:jv});function _C(t){return typeof t=="object"&&t!==null&&SC in t}function kz(t){return t!=null&&typeof t.getSQL=="function"}function Cz(t){var n;const e={sql:"",params:[]};for(const i of t)e.sql+=i.sql,e.params.push(...i.params),(n=i.typings)!=null&&n.length&&(e.typings||(e.typings=[]),e.typings.push(...i.typings));return e}var b0;b0=A;class an{constructor(e){C(this,"value");this.value=Array.isArray(e)?e:[e]}getSQL(){return new Xe([this])}}C(an,b0,"StringChunk");var S0;S0=A;const xr=class xr{constructor(e){C(this,"decoder",kC);C(this,"shouldInlineParams",!1);this.queryChunks=e}append(e){return this.queryChunks.push(...e.queryChunks),this}toQuery(e){return _z.startActiveSpan("drizzle.buildSQL",n=>{const i=this.buildQueryFromSourceParams(this.queryChunks,e);return n==null||n.setAttributes({"drizzle.query.text":i.sql,"drizzle.query.params":JSON.stringify(i.params)}),i})}buildQueryFromSourceParams(e,n){const i=Object.assign({},n,{inlineParams:n.inlineParams||this.shouldInlineParams,paramStartIndex:n.paramStartIndex||{value:0}}),{casing:r,escapeName:s,escapeParam:o,prepareTyping:a,inlineParams:l,paramStartIndex:u}=i;return Cz(e.map(c=>{var d;if(ot(c,an))return{sql:c.value.join(""),params:[]};if(ot(c,Mu))return{sql:s(c.value),params:[]};if(c===void 0)return{sql:"",params:[]};if(Array.isArray(c)){const f=[new an("(")];for(const[h,v]of c.entries())f.push(v),h<c.length-1&&f.push(new an(", "));return f.push(new an(")")),this.buildQueryFromSourceParams(f,i)}if(ot(c,xr))return this.buildQueryFromSourceParams(c.queryChunks,{...i,inlineParams:l||c.shouldInlineParams});if(ot(c,Et)){const f=c[Et.Symbol.Schema],h=c[Et.Symbol.Name];return{sql:f===void 0||c[Eu]?s(h):s(f)+"."+s(h),params:[]}}if(ot(c,Zs)){const f=r.getColumnCasing(c);if(n.invokeSource==="indexes")return{sql:s(f),params:[]};const h=c.table[Et.Symbol.Schema];return{sql:c.table[Eu]||h===void 0?s(c.table[Et.Symbol.Name])+"."+s(f):s(h)+"."+s(c.table[Et.Symbol.Name])+"."+s(f),params:[]}}if(ot(c,PC)){const f=c[Ts].schema,h=c[Ts].name;return{sql:f===void 0||c[Ts].isAlias?s(h):s(f)+"."+s(h),params:[]}}if(ot(c,am)){if(ot(c.value,Nu))return{sql:o(u.value++,c),params:[c],typings:["none"]};const f=c.value===null?null:c.encoder.mapToDriverValue(c.value);if(ot(f,xr))return this.buildQueryFromSourceParams([f],i);if(l)return{sql:this.mapInlineParam(f,i),params:[]};let h=["none"];return a&&(h=[a(c.encoder)]),{sql:o(u.value++,f),params:[f],typings:h}}return ot(c,Nu)?{sql:o(u.value++,c),params:[c],typings:["none"]}:ot(c,xr.Aliased)&&c.fieldAlias!==void 0?{sql:s(c.fieldAlias),params:[]}:ot(c,om)?c._.isWith?{sql:s(c._.alias),params:[]}:this.buildQueryFromSourceParams([new an("("),c._.sql,new an(") "),new Mu(c._.alias)],i):Sz(c)?c.schema?{sql:s(c.schema)+"."+s(c.enumName),params:[]}:{sql:s(c.enumName),params:[]}:kz(c)?(d=c.shouldOmitSQLParens)!=null&&d.call(c)?this.buildQueryFromSourceParams([c.getSQL()],i):this.buildQueryFromSourceParams([new an("("),c.getSQL(),new an(")")],i):l?{sql:this.mapInlineParam(c,i),params:[]}:{sql:o(u.value++,c),params:[c],typings:["none"]}}))}mapInlineParam(e,{escapeString:n}){if(e===null)return"null";if(typeof e=="number"||typeof e=="boolean")return e.toString();if(typeof e=="string")return n(e);if(typeof e=="object"){const i=e.toString();return n(i==="[object Object]"?JSON.stringify(e):i)}throw new Error("Unexpected param value: "+e)}getSQL(){return this}as(e){return e===void 0?this:new xr.Aliased(this,e)}mapWith(e){return this.decoder=typeof e=="function"?{mapFromDriverValue:e}:e,this}inlineParams(){return this.shouldInlineParams=!0,this}if(e){return e?this:void 0}};C(xr,S0,"SQL");let Xe=xr;var _0;_0=A;class Mu{constructor(e){C(this,"brand");this.value=e}getSQL(){return new Xe([this])}}C(Mu,_0,"Name");const kC={mapFromDriverValue:t=>t},CC={mapToDriverValue:t=>t};({...kC,...CC});var k0;k0=A;class am{constructor(e,n=CC){C(this,"brand");this.value=e,this.encoder=n}getSQL(){return new Xe([this])}}C(am,k0,"Param");function Du(t,...e){const n=[];(e.length>0||t.length>0&&t[0]!=="")&&n.push(new an(t[0]));for(const[i,r]of e.entries())n.push(r,new an(t[i+1]));return new Xe(n)}(t=>{function e(){return new Xe([])}t.empty=e;function n(l){return new Xe(l)}t.fromList=n;function i(l){return new Xe([new an(l)])}t.raw=i;function r(l,u){const c=[];for(const[d,f]of l.entries())d>0&&u!==void 0&&c.push(u),c.push(f);return new Xe(c)}t.join=r;function s(l){return new Mu(l)}t.identifier=s;function o(l){return new Nu(l)}t.placeholder=o;function a(l,u){return new am(l,u)}t.param=a})(Du||(Du={}));(t=>{var n;n=A;const i=class i{constructor(s,o){C(this,"isSelectionField",!1);this.sql=s,this.fieldAlias=o}getSQL(){return this.sql}clone(){return new i(this.sql,this.fieldAlias)}};C(i,n,"SQL.Aliased");let e=i;t.Aliased=e})(Xe||(Xe={}));var C0;C0=A;class Nu{constructor(e){this.name=e}getSQL(){return new Xe([this])}}C(Nu,C0,"Placeholder");const TC=Symbol.for("drizzle:IsDrizzleView");var T0,P0,E0;E0=A,P0=Ts,T0=TC;class PC{constructor({name:e,schema:n,selectedFields:i,query:r}){C(this,P0);C(this,T0,!0);this[Ts]={name:e,originalName:e,schema:n,selectedFields:i,query:r,isExisting:!r,isAlias:!1}}getSQL(){return new Xe([this])}}C(PC,E0,"View");function Tz(t){return typeof t=="object"&&t!==null&&TC in t}Zs.prototype.getSQL=function(){return new Xe([this])};Et.prototype.getSQL=function(){return new Xe([this])};om.prototype.getSQL=function(){return new Xe([this])};function Pz(t){return t[Et.Symbol.Columns]}function Ez(t){return t[Ts].selectedFields}function rt(t,e){return{name:typeof t=="string"&&t.length>0?t:"",config:typeof t=="object"?t:e}}var M0,D0;class Ha extends(D0=ge,M0=A,D0){generatedAlwaysAsIdentity(e){if(e){const{name:n,...i}=e;this.config.generatedIdentity={type:"always",sequenceName:n,sequenceOptions:i}}else this.config.generatedIdentity={type:"always"};return this.config.hasDefault=!0,this.config.notNull=!0,this}generatedByDefaultAsIdentity(e){if(e){const{name:n,...i}=e;this.config.generatedIdentity={type:"byDefault",sequenceName:n,sequenceOptions:i}}else this.config.generatedIdentity={type:"byDefault"};return this.config.hasDefault=!0,this.config.notNull=!0,this}}C(Ha,M0,"PgIntColumnBaseBuilder");var N0,A0;class EC extends(A0=Ha,N0=A,A0){constructor(e){super(e,"number","PgBigInt53")}build(e){return new MC(e,this.config)}}C(EC,N0,"PgBigInt53Builder");var R0,F0;class MC extends(F0=re,R0=A,F0){getSQLType(){return"bigint"}mapFromDriverValue(e){return typeof e=="number"?e:Number(e)}}C(MC,R0,"PgBigInt53");var I0,O0;class DC extends(O0=Ha,I0=A,O0){constructor(e){super(e,"bigint","PgBigInt64")}build(e){return new NC(e,this.config)}}C(DC,I0,"PgBigInt64Builder");var j0,L0;class NC extends(L0=re,j0=A,L0){getSQLType(){return"bigint"}mapFromDriverValue(e){return BigInt(e)}}C(NC,j0,"PgBigInt64");function Mz(t,e){const{name:n,config:i}=rt(t,e);return i.mode==="number"?new EC(n):new DC(n)}var z0,V0;class AC extends(V0=ge,z0=A,V0){constructor(e){super(e,"number","PgBigSerial53"),this.config.hasDefault=!0,this.config.notNull=!0}build(e){return new RC(e,this.config)}}C(AC,z0,"PgBigSerial53Builder");var B0,U0;class RC extends(U0=re,B0=A,U0){getSQLType(){return"bigserial"}mapFromDriverValue(e){return typeof e=="number"?e:Number(e)}}C(RC,B0,"PgBigSerial53");var $0,W0;class FC extends(W0=ge,$0=A,W0){constructor(e){super(e,"bigint","PgBigSerial64"),this.config.hasDefault=!0}build(e){return new IC(e,this.config)}}C(FC,$0,"PgBigSerial64Builder");var H0,q0;class IC extends(q0=re,H0=A,q0){getSQLType(){return"bigserial"}mapFromDriverValue(e){return BigInt(e)}}C(IC,H0,"PgBigSerial64");function Dz(t,e){const{name:n,config:i}=rt(t,e);return i.mode==="number"?new AC(n):new FC(n)}var G0,Q0;class OC extends(Q0=ge,G0=A,Q0){constructor(e){super(e,"boolean","PgBoolean")}build(e){return new jC(e,this.config)}}C(OC,G0,"PgBooleanBuilder");var K0,Z0;class jC extends(Z0=re,K0=A,Z0){getSQLType(){return"boolean"}}C(jC,K0,"PgBoolean");function Nz(t){return new OC(t??"")}var X0,Y0;class LC extends(Y0=ge,X0=A,Y0){constructor(e,n){super(e,"string","PgChar"),this.config.length=n.length,this.config.enumValues=n.enum}build(e){return new zC(e,this.config)}}C(LC,X0,"PgCharBuilder");var J0,ex;class zC extends(ex=re,J0=A,ex){constructor(){super(...arguments);C(this,"length",this.config.length);C(this,"enumValues",this.config.enumValues)}getSQLType(){return this.length===void 0?"char":`char(${this.length})`}}C(zC,J0,"PgChar");function Az(t,e={}){const{name:n,config:i}=rt(t,e);return new LC(n,i)}var tx,nx;class VC extends(nx=ge,tx=A,nx){constructor(e){super(e,"string","PgCidr")}build(e){return new BC(e,this.config)}}C(VC,tx,"PgCidrBuilder");var ix,rx;class BC extends(rx=re,ix=A,rx){getSQLType(){return"cidr"}}C(BC,ix,"PgCidr");function Rz(t){return new VC(t??"")}var sx,ox;class UC extends(ox=ge,sx=A,ox){constructor(e,n,i){super(e,"custom","PgCustomColumn"),this.config.fieldConfig=n,this.config.customTypeParams=i}build(e){return new $C(e,this.config)}}C(UC,sx,"PgCustomColumnBuilder");var ax,lx;class $C extends(lx=re,ax=A,lx){constructor(n,i){super(n,i);C(this,"sqlName");C(this,"mapTo");C(this,"mapFrom");this.sqlName=i.customTypeParams.dataType(i.fieldConfig),this.mapTo=i.customTypeParams.toDriver,this.mapFrom=i.customTypeParams.fromDriver}getSQLType(){return this.sqlName}mapFromDriverValue(n){return typeof this.mapFrom=="function"?this.mapFrom(n):n}mapToDriverValue(n){return typeof this.mapTo=="function"?this.mapTo(n):n}}C($C,ax,"PgCustomColumn");function Fz(t){return(e,n)=>{const{name:i,config:r}=rt(e,n);return new UC(i,r,t)}}var ux,cx;class so extends(cx=ge,ux=A,cx){defaultNow(){return this.default(Du`now()`)}}C(so,ux,"PgDateColumnBaseBuilder");var dx,fx;class WC extends(fx=so,dx=A,fx){constructor(e){super(e,"date","PgDate")}build(e){return new HC(e,this.config)}}C(WC,dx,"PgDateBuilder");var hx,px;class HC extends(px=re,hx=A,px){getSQLType(){return"date"}mapFromDriverValue(e){return new Date(e)}mapToDriverValue(e){return e.toISOString()}}C(HC,hx,"PgDate");var mx,gx;class qC extends(gx=so,mx=A,gx){constructor(e){super(e,"string","PgDateString")}build(e){return new GC(e,this.config)}}C(qC,mx,"PgDateStringBuilder");var yx,vx;class GC extends(vx=re,yx=A,vx){getSQLType(){return"date"}}C(GC,yx,"PgDateString");function Iz(t,e){const{name:n,config:i}=rt(t,e);return(i==null?void 0:i.mode)==="date"?new WC(n):new qC(n)}var xx,wx;class QC extends(wx=ge,xx=A,wx){constructor(e){super(e,"number","PgDoublePrecision")}build(e){return new KC(e,this.config)}}C(QC,xx,"PgDoublePrecisionBuilder");var bx,Sx;class KC extends(Sx=re,bx=A,Sx){getSQLType(){return"double precision"}mapFromDriverValue(e){return typeof e=="string"?Number.parseFloat(e):e}}C(KC,bx,"PgDoublePrecision");function Oz(t){return new QC(t??"")}var _x,kx;class ZC extends(kx=ge,_x=A,kx){constructor(e){super(e,"string","PgInet")}build(e){return new XC(e,this.config)}}C(ZC,_x,"PgInetBuilder");var Cx,Tx;class XC extends(Tx=re,Cx=A,Tx){getSQLType(){return"inet"}}C(XC,Cx,"PgInet");function jz(t){return new ZC(t??"")}var Px,Ex;class YC extends(Ex=Ha,Px=A,Ex){constructor(e){super(e,"number","PgInteger")}build(e){return new JC(e,this.config)}}C(YC,Px,"PgIntegerBuilder");var Mx,Dx;class JC extends(Dx=re,Mx=A,Dx){getSQLType(){return"integer"}mapFromDriverValue(e){return typeof e=="string"?Number.parseInt(e):e}}C(JC,Mx,"PgInteger");function Lz(t){return new YC(t??"")}var Nx,Ax;class eT extends(Ax=ge,Nx=A,Ax){constructor(e,n){super(e,"string","PgInterval"),this.config.intervalConfig=n}build(e){return new tT(e,this.config)}}C(eT,Nx,"PgIntervalBuilder");var Rx,Fx;class tT extends(Fx=re,Rx=A,Fx){constructor(){super(...arguments);C(this,"fields",this.config.intervalConfig.fields);C(this,"precision",this.config.intervalConfig.precision)}getSQLType(){const n=this.fields?` ${this.fields}`:"",i=this.precision?`(${this.precision})`:"";return`interval${n}${i}`}}C(tT,Rx,"PgInterval");function zz(t,e={}){const{name:n,config:i}=rt(t,e);return new eT(n,i)}var Ix,Ox;class nT extends(Ox=ge,Ix=A,Ox){constructor(e){super(e,"json","PgJson")}build(e){return new iT(e,this.config)}}C(nT,Ix,"PgJsonBuilder");var jx,Lx;class iT extends(Lx=re,jx=A,Lx){constructor(e,n){super(e,n)}getSQLType(){return"json"}mapToDriverValue(e){return JSON.stringify(e)}mapFromDriverValue(e){if(typeof e=="string")try{return JSON.parse(e)}catch{return e}return e}}C(iT,jx,"PgJson");function Vz(t){return new nT(t??"")}var zx,Vx;class rT extends(Vx=ge,zx=A,Vx){constructor(e){super(e,"json","PgJsonb")}build(e){return new sT(e,this.config)}}C(rT,zx,"PgJsonbBuilder");var Bx,Ux;class sT extends(Ux=re,Bx=A,Ux){constructor(e,n){super(e,n)}getSQLType(){return"jsonb"}mapToDriverValue(e){return JSON.stringify(e)}mapFromDriverValue(e){if(typeof e=="string")try{return JSON.parse(e)}catch{return e}return e}}C(sT,Bx,"PgJsonb");function Bz(t){return new rT(t??"")}var $x,Wx;class oT extends(Wx=ge,$x=A,Wx){constructor(e){super(e,"array","PgLine")}build(e){return new aT(e,this.config)}}C(oT,$x,"PgLineBuilder");var Hx,qx;class aT extends(qx=re,Hx=A,qx){getSQLType(){return"line"}mapFromDriverValue(e){const[n,i,r]=e.slice(1,-1).split(",");return[Number.parseFloat(n),Number.parseFloat(i),Number.parseFloat(r)]}mapToDriverValue(e){return`{${e[0]},${e[1]},${e[2]}}`}}C(aT,Hx,"PgLine");var Gx,Qx;class lT extends(Qx=ge,Gx=A,Qx){constructor(e){super(e,"json","PgLineABC")}build(e){return new uT(e,this.config)}}C(lT,Gx,"PgLineABCBuilder");var Kx,Zx;class uT extends(Zx=re,Kx=A,Zx){getSQLType(){return"line"}mapFromDriverValue(e){const[n,i,r]=e.slice(1,-1).split(",");return{a:Number.parseFloat(n),b:Number.parseFloat(i),c:Number.parseFloat(r)}}mapToDriverValue(e){return`{${e.a},${e.b},${e.c}}`}}C(uT,Kx,"PgLineABC");function Uz(t,e){const{name:n,config:i}=rt(t,e);return!(i!=null&&i.mode)||i.mode==="tuple"?new oT(n):new lT(n)}var Xx,Yx;class cT extends(Yx=ge,Xx=A,Yx){constructor(e){super(e,"string","PgMacaddr")}build(e){return new dT(e,this.config)}}C(cT,Xx,"PgMacaddrBuilder");var Jx,ew;class dT extends(ew=re,Jx=A,ew){getSQLType(){return"macaddr"}}C(dT,Jx,"PgMacaddr");function $z(t){return new cT(t??"")}var tw,nw;class fT extends(nw=ge,tw=A,nw){constructor(e){super(e,"string","PgMacaddr8")}build(e){return new hT(e,this.config)}}C(fT,tw,"PgMacaddr8Builder");var iw,rw;class hT extends(rw=re,iw=A,rw){getSQLType(){return"macaddr8"}}C(hT,iw,"PgMacaddr8");function Wz(t){return new fT(t??"")}var sw,ow;class pT extends(ow=ge,sw=A,ow){constructor(e,n,i){super(e,"string","PgNumeric"),this.config.precision=n,this.config.scale=i}build(e){return new mT(e,this.config)}}C(pT,sw,"PgNumericBuilder");var aw,lw;class mT extends(lw=re,aw=A,lw){constructor(n,i){super(n,i);C(this,"precision");C(this,"scale");this.precision=i.precision,this.scale=i.scale}getSQLType(){return this.precision!==void 0&&this.scale!==void 0?`numeric(${this.precision}, ${this.scale})`:this.precision===void 0?"numeric":`numeric(${this.precision})`}}C(mT,aw,"PgNumeric");function Hz(t,e){const{name:n,config:i}=rt(t,e);return new pT(n,i==null?void 0:i.precision,i==null?void 0:i.scale)}var uw,cw;class gT extends(cw=ge,uw=A,cw){constructor(e){super(e,"array","PgPointTuple")}build(e){return new yT(e,this.config)}}C(gT,uw,"PgPointTupleBuilder");var dw,fw;class yT extends(fw=re,dw=A,fw){getSQLType(){return"point"}mapFromDriverValue(e){if(typeof e=="string"){const[n,i]=e.slice(1,-1).split(",");return[Number.parseFloat(n),Number.parseFloat(i)]}return[e.x,e.y]}mapToDriverValue(e){return`(${e[0]},${e[1]})`}}C(yT,dw,"PgPointTuple");var hw,pw;class vT extends(pw=ge,hw=A,pw){constructor(e){super(e,"json","PgPointObject")}build(e){return new xT(e,this.config)}}C(vT,hw,"PgPointObjectBuilder");var mw,gw;class xT extends(gw=re,mw=A,gw){getSQLType(){return"point"}mapFromDriverValue(e){if(typeof e=="string"){const[n,i]=e.slice(1,-1).split(",");return{x:Number.parseFloat(n),y:Number.parseFloat(i)}}return e}mapToDriverValue(e){return`(${e.x},${e.y})`}}C(xT,mw,"PgPointObject");function qz(t,e){const{name:n,config:i}=rt(t,e);return!(i!=null&&i.mode)||i.mode==="tuple"?new gT(n):new vT(n)}function Gz(t){const e=[];for(let n=0;n<t.length;n+=2)e.push(Number.parseInt(t.slice(n,n+2),16));return new Uint8Array(e)}function Lv(t,e){const n=new ArrayBuffer(8),i=new DataView(n);for(let r=0;r<8;r++)i.setUint8(r,t[e+r]);return i.getFloat64(0,!0)}function wT(t){const e=Gz(t);let n=0;const i=e[n];n+=1;const r=new DataView(e.buffer),s=r.getUint32(n,i===1);if(n+=4,s&536870912&&(r.getUint32(n,i===1),n+=4),(s&65535)===1){const o=Lv(e,n);n+=8;const a=Lv(e,n);return n+=8,[o,a]}throw new Error("Unsupported geometry type")}var yw,vw;class bT extends(vw=ge,yw=A,vw){constructor(e){super(e,"array","PgGeometry")}build(e){return new ST(e,this.config)}}C(bT,yw,"PgGeometryBuilder");var xw,ww;class ST extends(ww=re,xw=A,ww){getSQLType(){return"geometry(point)"}mapFromDriverValue(e){return wT(e)}mapToDriverValue(e){return`point(${e[0]} ${e[1]})`}}C(ST,xw,"PgGeometry");var bw,Sw;class _T extends(Sw=ge,bw=A,Sw){constructor(e){super(e,"json","PgGeometryObject")}build(e){return new kT(e,this.config)}}C(_T,bw,"PgGeometryObjectBuilder");var _w,kw;class kT extends(kw=re,_w=A,kw){getSQLType(){return"geometry(point)"}mapFromDriverValue(e){const n=wT(e);return{x:n[0],y:n[1]}}mapToDriverValue(e){return`point(${e.x} ${e.y})`}}C(kT,_w,"PgGeometryObject");function Qz(t,e){const{name:n,config:i}=rt(t,e);return!(i!=null&&i.mode)||i.mode==="tuple"?new bT(n):new _T(n)}var Cw,Tw;class CT extends(Tw=ge,Cw=A,Tw){constructor(e,n){super(e,"number","PgReal"),this.config.length=n}build(e){return new TT(e,this.config)}}C(CT,Cw,"PgRealBuilder");var Pw,Ew;class TT extends(Ew=re,Pw=A,Ew){constructor(n,i){super(n,i);C(this,"mapFromDriverValue",n=>typeof n=="string"?Number.parseFloat(n):n)}getSQLType(){return"real"}}C(TT,Pw,"PgReal");function Kz(t){return new CT(t??"")}var Mw,Dw;class PT extends(Dw=ge,Mw=A,Dw){constructor(e){super(e,"number","PgSerial"),this.config.hasDefault=!0,this.config.notNull=!0}build(e){return new ET(e,this.config)}}C(PT,Mw,"PgSerialBuilder");var Nw,Aw;class ET extends(Aw=re,Nw=A,Aw){getSQLType(){return"serial"}}C(ET,Nw,"PgSerial");function lm(t){return new PT(t??"")}var Rw,Fw;class MT extends(Fw=Ha,Rw=A,Fw){constructor(e){super(e,"number","PgSmallInt")}build(e){return new DT(e,this.config)}}C(MT,Rw,"PgSmallIntBuilder");var Iw,Ow;class DT extends(Ow=re,Iw=A,Ow){constructor(){super(...arguments);C(this,"mapFromDriverValue",n=>typeof n=="string"?Number(n):n)}getSQLType(){return"smallint"}}C(DT,Iw,"PgSmallInt");function Zz(t){return new MT(t??"")}var jw,Lw;class NT extends(Lw=ge,jw=A,Lw){constructor(e){super(e,"number","PgSmallSerial"),this.config.hasDefault=!0,this.config.notNull=!0}build(e){return new AT(e,this.config)}}C(NT,jw,"PgSmallSerialBuilder");var zw,Vw;class AT extends(Vw=re,zw=A,Vw){getSQLType(){return"smallserial"}}C(AT,zw,"PgSmallSerial");function Xz(t){return new NT(t??"")}var Bw,Uw;class RT extends(Uw=ge,Bw=A,Uw){constructor(e,n){super(e,"string","PgText"),this.config.enumValues=n.enum}build(e){return new FT(e,this.config)}}C(RT,Bw,"PgTextBuilder");var $w,Ww;class FT extends(Ww=re,$w=A,Ww){constructor(){super(...arguments);C(this,"enumValues",this.config.enumValues)}getSQLType(){return"text"}}C(FT,$w,"PgText");function Cr(t,e={}){const{name:n,config:i}=rt(t,e);return new RT(n,i)}var Hw,qw;class IT extends(qw=so,Hw=A,qw){constructor(e,n,i){super(e,"string","PgTime"),this.withTimezone=n,this.precision=i,this.config.withTimezone=n,this.config.precision=i}build(e){return new OT(e,this.config)}}C(IT,Hw,"PgTimeBuilder");var Gw,Qw;class OT extends(Qw=re,Gw=A,Qw){constructor(n,i){super(n,i);C(this,"withTimezone");C(this,"precision");this.withTimezone=i.withTimezone,this.precision=i.precision}getSQLType(){return`time${this.precision===void 0?"":`(${this.precision})`}${this.withTimezone?" with time zone":""}`}}C(OT,Gw,"PgTime");function Yz(t,e={}){const{name:n,config:i}=rt(t,e);return new IT(n,i.withTimezone??!1,i.precision)}var Kw,Zw;class jT extends(Zw=so,Kw=A,Zw){constructor(e,n,i){super(e,"date","PgTimestamp"),this.config.withTimezone=n,this.config.precision=i}build(e){return new LT(e,this.config)}}C(jT,Kw,"PgTimestampBuilder");var Xw,Yw;class LT extends(Yw=re,Xw=A,Yw){constructor(n,i){super(n,i);C(this,"withTimezone");C(this,"precision");C(this,"mapFromDriverValue",n=>new Date(this.withTimezone?n:n+"+0000"));C(this,"mapToDriverValue",n=>n.toISOString());this.withTimezone=i.withTimezone,this.precision=i.precision}getSQLType(){return`timestamp${this.precision===void 0?"":` (${this.precision})`}${this.withTimezone?" with time zone":""}`}}C(LT,Xw,"PgTimestamp");var Jw,e1;class zT extends(e1=so,Jw=A,e1){constructor(e,n,i){super(e,"string","PgTimestampString"),this.config.withTimezone=n,this.config.precision=i}build(e){return new VT(e,this.config)}}C(zT,Jw,"PgTimestampStringBuilder");var t1,n1;class VT extends(n1=re,t1=A,n1){constructor(n,i){super(n,i);C(this,"withTimezone");C(this,"precision");this.withTimezone=i.withTimezone,this.precision=i.precision}getSQLType(){return`timestamp${this.precision===void 0?"":`(${this.precision})`}${this.withTimezone?" with time zone":""}`}}C(VT,t1,"PgTimestampString");function BT(t,e={}){const{name:n,config:i}=rt(t,e);return(i==null?void 0:i.mode)==="string"?new zT(n,i.withTimezone??!1,i.precision):new jT(n,(i==null?void 0:i.withTimezone)??!1,i==null?void 0:i.precision)}var i1,r1;class UT extends(r1=ge,i1=A,r1){constructor(e){super(e,"string","PgUUID")}defaultRandom(){return this.default(Du`gen_random_uuid()`)}build(e){return new $T(e,this.config)}}C(UT,i1,"PgUUIDBuilder");var s1,o1;class $T extends(o1=re,s1=A,o1){getSQLType(){return"uuid"}}C($T,s1,"PgUUID");function Jz(t){return new UT(t??"")}var a1,l1;class WT extends(l1=ge,a1=A,l1){constructor(e,n){super(e,"string","PgVarchar"),this.config.length=n.length,this.config.enumValues=n.enum}build(e){return new HT(e,this.config)}}C(WT,a1,"PgVarcharBuilder");var u1,c1;class HT extends(c1=re,u1=A,c1){constructor(){super(...arguments);C(this,"length",this.config.length);C(this,"enumValues",this.config.enumValues)}getSQLType(){return this.length===void 0?"varchar":`varchar(${this.length})`}}C(HT,u1,"PgVarchar");function eV(t,e={}){const{name:n,config:i}=rt(t,e);return new WT(n,i)}var d1,f1;class qT extends(f1=ge,d1=A,f1){constructor(e,n){super(e,"string","PgBinaryVector"),this.config.dimensions=n.dimensions}build(e){return new GT(e,this.config)}}C(qT,d1,"PgBinaryVectorBuilder");var h1,p1;class GT extends(p1=re,h1=A,p1){constructor(){super(...arguments);C(this,"dimensions",this.config.dimensions)}getSQLType(){return`bit(${this.dimensions})`}}C(GT,h1,"PgBinaryVector");function tV(t,e){const{name:n,config:i}=rt(t,e);return new qT(n,i)}var m1,g1;class QT extends(g1=ge,m1=A,g1){constructor(e,n){super(e,"array","PgHalfVector"),this.config.dimensions=n.dimensions}build(e){return new KT(e,this.config)}}C(QT,m1,"PgHalfVectorBuilder");var y1,v1;class KT extends(v1=re,y1=A,v1){constructor(){super(...arguments);C(this,"dimensions",this.config.dimensions)}getSQLType(){return`halfvec(${this.dimensions})`}mapToDriverValue(n){return JSON.stringify(n)}mapFromDriverValue(n){return n.slice(1,-1).split(",").map(i=>Number.parseFloat(i))}}C(KT,y1,"PgHalfVector");function nV(t,e){const{name:n,config:i}=rt(t,e);return new QT(n,i)}var x1,w1;class ZT extends(w1=ge,x1=A,w1){constructor(e,n){super(e,"string","PgSparseVector"),this.config.dimensions=n.dimensions}build(e){return new XT(e,this.config)}}C(ZT,x1,"PgSparseVectorBuilder");var b1,S1;class XT extends(S1=re,b1=A,S1){constructor(){super(...arguments);C(this,"dimensions",this.config.dimensions)}getSQLType(){return`sparsevec(${this.dimensions})`}}C(XT,b1,"PgSparseVector");function iV(t,e){const{name:n,config:i}=rt(t,e);return new ZT(n,i)}var _1,k1;class YT extends(k1=ge,_1=A,k1){constructor(e,n){super(e,"array","PgVector"),this.config.dimensions=n.dimensions}build(e){return new JT(e,this.config)}}C(YT,_1,"PgVectorBuilder");var C1,T1;class JT extends(T1=re,C1=A,T1){constructor(){super(...arguments);C(this,"dimensions",this.config.dimensions)}getSQLType(){return`vector(${this.dimensions})`}mapToDriverValue(n){return JSON.stringify(n)}mapFromDriverValue(n){return n.slice(1,-1).split(",").map(i=>Number.parseFloat(i))}}C(JT,C1,"PgVector");function rV(t,e){const{name:n,config:i}=rt(t,e);return new YT(n,i)}function sV(){return{bigint:Mz,bigserial:Dz,boolean:Nz,char:Az,cidr:Rz,customType:Fz,date:Iz,doublePrecision:Oz,inet:jz,integer:Lz,interval:zz,json:Vz,jsonb:Bz,line:Uz,macaddr:$z,macaddr8:Wz,numeric:Hz,point:qz,geometry:Qz,real:Kz,serial:lm,smallint:Zz,smallserial:Xz,text:Cr,time:Yz,timestamp:BT,uuid:Jz,varchar:eV,bit:tV,halfvec:nV,sparsevec:iV,vector:rV}}const lh=Symbol.for("drizzle:PgInlineForeignKeys"),zv=Symbol.for("drizzle:EnableRLS");var P1,E1,M1,D1,N1;class Au extends(N1=Et,D1=A,M1=lh,E1=zv,P1=Et.Symbol.ExtraConfigBuilder,N1){constructor(){super(...arguments);C(this,M1,[]);C(this,E1,!1);C(this,P1)}}C(Au,D1,"PgTable"),C(Au,"Symbol",Object.assign({},Et.Symbol,{InlineForeignKeys:lh,EnableRLS:zv}));function oV(t,e,n,i,r=t){const s=new Au(t,i,r),o=typeof e=="function"?e(sV()):e,a=Object.fromEntries(Object.entries(o).map(([c,d])=>{const f=d;f.setName(c);const h=f.build(s);return s[lh].push(...f.buildForeignKeys(h,s)),[c,h]})),l=Object.fromEntries(Object.entries(o).map(([c,d])=>{const f=d;f.setName(c);const h=f.buildExtraConfigColumn(s);return[c,h]})),u=Object.assign(s,a);return u[Et.Symbol.Columns]=a,u[Et.Symbol.ExtraConfigColumns]=l,Object.assign(u,{enableRLS:()=>(u[Au.Symbol.EnableRLS]=!0,u)})}const eP=(t,e,n)=>oV(t,e,n,void 0);var me;(function(t){t.assertEqual=r=>r;function e(r){}t.assertIs=e;function n(r){throw new Error}t.assertNever=n,t.arrayToEnum=r=>{const s={};for(const o of r)s[o]=o;return s},t.getValidEnumValues=r=>{const s=t.objectKeys(r).filter(a=>typeof r[r[a]]!="number"),o={};for(const a of s)o[a]=r[a];return t.objectValues(o)},t.objectValues=r=>t.objectKeys(r).map(function(s){return r[s]}),t.objectKeys=typeof Object.keys=="function"?r=>Object.keys(r):r=>{const s=[];for(const o in r)Object.prototype.hasOwnProperty.call(r,o)&&s.push(o);return s},t.find=(r,s)=>{for(const o of r)if(s(o))return o},t.isInteger=typeof Number.isInteger=="function"?r=>Number.isInteger(r):r=>typeof r=="number"&&isFinite(r)&&Math.floor(r)===r;function i(r,s=" | "){return r.map(o=>typeof o=="string"?`'${o}'`:o).join(s)}t.joinValues=i,t.jsonStringifyReplacer=(r,s)=>typeof s=="bigint"?s.toString():s})(me||(me={}));var uh;(function(t){t.mergeShapes=(e,n)=>({...e,...n})})(uh||(uh={}));const $=me.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),Ri=t=>{switch(typeof t){case"undefined":return $.undefined;case"string":return $.string;case"number":return isNaN(t)?$.nan:$.number;case"boolean":return $.boolean;case"function":return $.function;case"bigint":return $.bigint;case"symbol":return $.symbol;case"object":return Array.isArray(t)?$.array:t===null?$.null:t.then&&typeof t.then=="function"&&t.catch&&typeof t.catch=="function"?$.promise:typeof Map<"u"&&t instanceof Map?$.map:typeof Set<"u"&&t instanceof Set?$.set:typeof Date<"u"&&t instanceof Date?$.date:$.object;default:return $.unknown}},F=me.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]),aV=t=>JSON.stringify(t,null,2).replace(/"([^"]+)":/g,"$1:");class Zt extends Error{constructor(e){super(),this.issues=[],this.addIssue=i=>{this.issues=[...this.issues,i]},this.addIssues=(i=[])=>{this.issues=[...this.issues,...i]};const n=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,n):this.__proto__=n,this.name="ZodError",this.issues=e}get errors(){return this.issues}format(e){const n=e||function(s){return s.message},i={_errors:[]},r=s=>{for(const o of s.issues)if(o.code==="invalid_union")o.unionErrors.map(r);else if(o.code==="invalid_return_type")r(o.returnTypeError);else if(o.code==="invalid_arguments")r(o.argumentsError);else if(o.path.length===0)i._errors.push(n(o));else{let a=i,l=0;for(;l<o.path.length;){const u=o.path[l];l===o.path.length-1?(a[u]=a[u]||{_errors:[]},a[u]._errors.push(n(o))):a[u]=a[u]||{_errors:[]},a=a[u],l++}}};return r(this),i}static assert(e){if(!(e instanceof Zt))throw new Error(`Not a ZodError: ${e}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,me.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=n=>n.message){const n={},i=[];for(const r of this.issues)r.path.length>0?(n[r.path[0]]=n[r.path[0]]||[],n[r.path[0]].push(e(r))):i.push(e(r));return{formErrors:i,fieldErrors:n}}get formErrors(){return this.flatten()}}Zt.create=t=>new Zt(t);const Xs=(t,e)=>{let n;switch(t.code){case F.invalid_type:t.received===$.undefined?n="Required":n=`Expected ${t.expected}, received ${t.received}`;break;case F.invalid_literal:n=`Invalid literal value, expected ${JSON.stringify(t.expected,me.jsonStringifyReplacer)}`;break;case F.unrecognized_keys:n=`Unrecognized key(s) in object: ${me.joinValues(t.keys,", ")}`;break;case F.invalid_union:n="Invalid input";break;case F.invalid_union_discriminator:n=`Invalid discriminator value. Expected ${me.joinValues(t.options)}`;break;case F.invalid_enum_value:n=`Invalid enum value. Expected ${me.joinValues(t.options)}, received '${t.received}'`;break;case F.invalid_arguments:n="Invalid function arguments";break;case F.invalid_return_type:n="Invalid function return type";break;case F.invalid_date:n="Invalid date";break;case F.invalid_string:typeof t.validation=="object"?"includes"in t.validation?(n=`Invalid input: must include "${t.validation.includes}"`,typeof t.validation.position=="number"&&(n=`${n} at one or more positions greater than or equal to ${t.validation.position}`)):"startsWith"in t.validation?n=`Invalid input: must start with "${t.validation.startsWith}"`:"endsWith"in t.validation?n=`Invalid input: must end with "${t.validation.endsWith}"`:me.assertNever(t.validation):t.validation!=="regex"?n=`Invalid ${t.validation}`:n="Invalid";break;case F.too_small:t.type==="array"?n=`Array must contain ${t.exact?"exactly":t.inclusive?"at least":"more than"} ${t.minimum} element(s)`:t.type==="string"?n=`String must contain ${t.exact?"exactly":t.inclusive?"at least":"over"} ${t.minimum} character(s)`:t.type==="number"?n=`Number must be ${t.exact?"exactly equal to ":t.inclusive?"greater than or equal to ":"greater than "}${t.minimum}`:t.type==="date"?n=`Date must be ${t.exact?"exactly equal to ":t.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(t.minimum))}`:n="Invalid input";break;case F.too_big:t.type==="array"?n=`Array must contain ${t.exact?"exactly":t.inclusive?"at most":"less than"} ${t.maximum} element(s)`:t.type==="string"?n=`String must contain ${t.exact?"exactly":t.inclusive?"at most":"under"} ${t.maximum} character(s)`:t.type==="number"?n=`Number must be ${t.exact?"exactly":t.inclusive?"less than or equal to":"less than"} ${t.maximum}`:t.type==="bigint"?n=`BigInt must be ${t.exact?"exactly":t.inclusive?"less than or equal to":"less than"} ${t.maximum}`:t.type==="date"?n=`Date must be ${t.exact?"exactly":t.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(t.maximum))}`:n="Invalid input";break;case F.custom:n="Invalid input";break;case F.invalid_intersection_types:n="Intersection results could not be merged";break;case F.not_multiple_of:n=`Number must be a multiple of ${t.multipleOf}`;break;case F.not_finite:n="Number must be finite";break;default:n=e.defaultError,me.assertNever(t)}return{message:n}};let tP=Xs;function lV(t){tP=t}function Ru(){return tP}const Fu=t=>{const{data:e,path:n,errorMaps:i,issueData:r}=t,s=[...n,...r.path||[]],o={...r,path:s};if(r.message!==void 0)return{...r,path:s,message:r.message};let a="";const l=i.filter(u=>!!u).slice().reverse();for(const u of l)a=u(o,{data:e,defaultError:a}).message;return{...r,path:s,message:a}},uV=[];function B(t,e){const n=Ru(),i=Fu({issueData:e,data:t.data,path:t.path,errorMaps:[t.common.contextualErrorMap,t.schemaErrorMap,n,n===Xs?void 0:Xs].filter(r=>!!r)});t.common.issues.push(i)}class _t{constructor(){this.value="valid"}dirty(){this.value==="valid"&&(this.value="dirty")}abort(){this.value!=="aborted"&&(this.value="aborted")}static mergeArray(e,n){const i=[];for(const r of n){if(r.status==="aborted")return ne;r.status==="dirty"&&e.dirty(),i.push(r.value)}return{status:e.value,value:i}}static async mergeObjectAsync(e,n){const i=[];for(const r of n){const s=await r.key,o=await r.value;i.push({key:s,value:o})}return _t.mergeObjectSync(e,i)}static mergeObjectSync(e,n){const i={};for(const r of n){const{key:s,value:o}=r;if(s.status==="aborted"||o.status==="aborted")return ne;s.status==="dirty"&&e.dirty(),o.status==="dirty"&&e.dirty(),s.value!=="__proto__"&&(typeof o.value<"u"||r.alwaysSet)&&(i[s.value]=o.value)}return{status:e.value,value:i}}}const ne=Object.freeze({status:"aborted"}),ys=t=>({status:"dirty",value:t}),Nt=t=>({status:"valid",value:t}),ch=t=>t.status==="aborted",dh=t=>t.status==="dirty",ya=t=>t.status==="valid",va=t=>typeof Promise<"u"&&t instanceof Promise;function Iu(t,e,n,i){if(typeof e=="function"?t!==e||!i:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return e.get(t)}function nP(t,e,n,i,r){if(typeof e=="function"?t!==e||!r:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return e.set(t,n),n}var Q;(function(t){t.errToObj=e=>typeof e=="string"?{message:e}:e||{},t.toString=e=>typeof e=="string"?e:e==null?void 0:e.message})(Q||(Q={}));var Po,Eo;class Zn{constructor(e,n,i,r){this._cachedPath=[],this.parent=e,this.data=n,this._path=i,this._key=r}get path(){return this._cachedPath.length||(this._key instanceof Array?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}}const Vv=(t,e)=>{if(ya(e))return{success:!0,data:e.value};if(!t.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;const n=new Zt(t.common.issues);return this._error=n,this._error}}};function ie(t){if(!t)return{};const{errorMap:e,invalid_type_error:n,required_error:i,description:r}=t;if(e&&(n||i))throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);return e?{errorMap:e,description:r}:{errorMap:(o,a)=>{var l,u;const{message:c}=t;return o.code==="invalid_enum_value"?{message:c??a.defaultError}:typeof a.data>"u"?{message:(l=c??i)!==null&&l!==void 0?l:a.defaultError}:o.code!=="invalid_type"?{message:a.defaultError}:{message:(u=c??n)!==null&&u!==void 0?u:a.defaultError}},description:r}}class ue{constructor(e){this.spa=this.safeParseAsync,this._def=e,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this)}get description(){return this._def.description}_getType(e){return Ri(e.data)}_getOrReturnCtx(e,n){return n||{common:e.parent.common,data:e.data,parsedType:Ri(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}_processInputParams(e){return{status:new _t,ctx:{common:e.parent.common,data:e.data,parsedType:Ri(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}}_parseSync(e){const n=this._parse(e);if(va(n))throw new Error("Synchronous parse encountered promise.");return n}_parseAsync(e){const n=this._parse(e);return Promise.resolve(n)}parse(e,n){const i=this.safeParse(e,n);if(i.success)return i.data;throw i.error}safeParse(e,n){var i;const r={common:{issues:[],async:(i=n==null?void 0:n.async)!==null&&i!==void 0?i:!1,contextualErrorMap:n==null?void 0:n.errorMap},path:(n==null?void 0:n.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Ri(e)},s=this._parseSync({data:e,path:r.path,parent:r});return Vv(r,s)}async parseAsync(e,n){const i=await this.safeParseAsync(e,n);if(i.success)return i.data;throw i.error}async safeParseAsync(e,n){const i={common:{issues:[],contextualErrorMap:n==null?void 0:n.errorMap,async:!0},path:(n==null?void 0:n.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Ri(e)},r=this._parse({data:e,path:i.path,parent:i}),s=await(va(r)?r:Promise.resolve(r));return Vv(i,s)}refine(e,n){const i=r=>typeof n=="string"||typeof n>"u"?{message:n}:typeof n=="function"?n(r):n;return this._refinement((r,s)=>{const o=e(r),a=()=>s.addIssue({code:F.custom,...i(r)});return typeof Promise<"u"&&o instanceof Promise?o.then(l=>l?!0:(a(),!1)):o?!0:(a(),!1)})}refinement(e,n){return this._refinement((i,r)=>e(i)?!0:(r.addIssue(typeof n=="function"?n(i,r):n),!1))}_refinement(e){return new On({schema:this,typeName:J.ZodEffects,effect:{type:"refinement",refinement:e}})}superRefine(e){return this._refinement(e)}optional(){return Kn.create(this,this._def)}nullable(){return or.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return An.create(this,this._def)}promise(){return Js.create(this,this._def)}or(e){return Sa.create([this,e],this._def)}and(e){return _a.create(this,e,this._def)}transform(e){return new On({...ie(this._def),schema:this,typeName:J.ZodEffects,effect:{type:"transform",transform:e}})}default(e){const n=typeof e=="function"?e:()=>e;return new Ea({...ie(this._def),innerType:this,defaultValue:n,typeName:J.ZodDefault})}brand(){return new um({typeName:J.ZodBranded,type:this,...ie(this._def)})}catch(e){const n=typeof e=="function"?e:()=>e;return new Ma({...ie(this._def),innerType:this,catchValue:n,typeName:J.ZodCatch})}describe(e){const n=this.constructor;return new n({...this._def,description:e})}pipe(e){return qa.create(this,e)}readonly(){return Da.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}const cV=/^c[^\s-]{8,}$/i,dV=/^[0-9a-z]+$/,fV=/^[0-9A-HJKMNP-TV-Z]{26}$/,hV=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,pV=/^[a-z0-9_-]{21}$/i,mV=/^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,gV=/^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,yV="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";let Ld;const vV=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,xV=/^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,wV=/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,iP="((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",bV=new RegExp(`^${iP}$`);function rP(t){let e="([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d";return t.precision?e=`${e}\\.\\d{${t.precision}}`:t.precision==null&&(e=`${e}(\\.\\d+)?`),e}function SV(t){return new RegExp(`^${rP(t)}$`)}function sP(t){let e=`${iP}T${rP(t)}`;const n=[];return n.push(t.local?"Z?":"Z"),t.offset&&n.push("([+-]\\d{2}:?\\d{2})"),e=`${e}(${n.join("|")})`,new RegExp(`^${e}$`)}function _V(t,e){return!!((e==="v4"||!e)&&vV.test(t)||(e==="v6"||!e)&&xV.test(t))}class Tn extends ue{_parse(e){if(this._def.coerce&&(e.data=String(e.data)),this._getType(e)!==$.string){const s=this._getOrReturnCtx(e);return B(s,{code:F.invalid_type,expected:$.string,received:s.parsedType}),ne}const i=new _t;let r;for(const s of this._def.checks)if(s.kind==="min")e.data.length<s.value&&(r=this._getOrReturnCtx(e,r),B(r,{code:F.too_small,minimum:s.value,type:"string",inclusive:!0,exact:!1,message:s.message}),i.dirty());else if(s.kind==="max")e.data.length>s.value&&(r=this._getOrReturnCtx(e,r),B(r,{code:F.too_big,maximum:s.value,type:"string",inclusive:!0,exact:!1,message:s.message}),i.dirty());else if(s.kind==="length"){const o=e.data.length>s.value,a=e.data.length<s.value;(o||a)&&(r=this._getOrReturnCtx(e,r),o?B(r,{code:F.too_big,maximum:s.value,type:"string",inclusive:!0,exact:!0,message:s.message}):a&&B(r,{code:F.too_small,minimum:s.value,type:"string",inclusive:!0,exact:!0,message:s.message}),i.dirty())}else if(s.kind==="email")gV.test(e.data)||(r=this._getOrReturnCtx(e,r),B(r,{validation:"email",code:F.invalid_string,message:s.message}),i.dirty());else if(s.kind==="emoji")Ld||(Ld=new RegExp(yV,"u")),Ld.test(e.data)||(r=this._getOrReturnCtx(e,r),B(r,{validation:"emoji",code:F.invalid_string,message:s.message}),i.dirty());else if(s.kind==="uuid")hV.test(e.data)||(r=this._getOrReturnCtx(e,r),B(r,{validation:"uuid",code:F.invalid_string,message:s.message}),i.dirty());else if(s.kind==="nanoid")pV.test(e.data)||(r=this._getOrReturnCtx(e,r),B(r,{validation:"nanoid",code:F.invalid_string,message:s.message}),i.dirty());else if(s.kind==="cuid")cV.test(e.data)||(r=this._getOrReturnCtx(e,r),B(r,{validation:"cuid",code:F.invalid_string,message:s.message}),i.dirty());else if(s.kind==="cuid2")dV.test(e.data)||(r=this._getOrReturnCtx(e,r),B(r,{validation:"cuid2",code:F.invalid_string,message:s.message}),i.dirty());else if(s.kind==="ulid")fV.test(e.data)||(r=this._getOrReturnCtx(e,r),B(r,{validation:"ulid",code:F.invalid_string,message:s.message}),i.dirty());else if(s.kind==="url")try{new URL(e.data)}catch{r=this._getOrReturnCtx(e,r),B(r,{validation:"url",code:F.invalid_string,message:s.message}),i.dirty()}else s.kind==="regex"?(s.regex.lastIndex=0,s.regex.test(e.data)||(r=this._getOrReturnCtx(e,r),B(r,{validation:"regex",code:F.invalid_string,message:s.message}),i.dirty())):s.kind==="trim"?e.data=e.data.trim():s.kind==="includes"?e.data.includes(s.value,s.position)||(r=this._getOrReturnCtx(e,r),B(r,{code:F.invalid_string,validation:{includes:s.value,position:s.position},message:s.message}),i.dirty()):s.kind==="toLowerCase"?e.data=e.data.toLowerCase():s.kind==="toUpperCase"?e.data=e.data.toUpperCase():s.kind==="startsWith"?e.data.startsWith(s.value)||(r=this._getOrReturnCtx(e,r),B(r,{code:F.invalid_string,validation:{startsWith:s.value},message:s.message}),i.dirty()):s.kind==="endsWith"?e.data.endsWith(s.value)||(r=this._getOrReturnCtx(e,r),B(r,{code:F.invalid_string,validation:{endsWith:s.value},message:s.message}),i.dirty()):s.kind==="datetime"?sP(s).test(e.data)||(r=this._getOrReturnCtx(e,r),B(r,{code:F.invalid_string,validation:"datetime",message:s.message}),i.dirty()):s.kind==="date"?bV.test(e.data)||(r=this._getOrReturnCtx(e,r),B(r,{code:F.invalid_string,validation:"date",message:s.message}),i.dirty()):s.kind==="time"?SV(s).test(e.data)||(r=this._getOrReturnCtx(e,r),B(r,{code:F.invalid_string,validation:"time",message:s.message}),i.dirty()):s.kind==="duration"?mV.test(e.data)||(r=this._getOrReturnCtx(e,r),B(r,{validation:"duration",code:F.invalid_string,message:s.message}),i.dirty()):s.kind==="ip"?_V(e.data,s.version)||(r=this._getOrReturnCtx(e,r),B(r,{validation:"ip",code:F.invalid_string,message:s.message}),i.dirty()):s.kind==="base64"?wV.test(e.data)||(r=this._getOrReturnCtx(e,r),B(r,{validation:"base64",code:F.invalid_string,message:s.message}),i.dirty()):me.assertNever(s);return{status:i.value,value:e.data}}_regex(e,n,i){return this.refinement(r=>e.test(r),{validation:n,code:F.invalid_string,...Q.errToObj(i)})}_addCheck(e){return new Tn({...this._def,checks:[...this._def.checks,e]})}email(e){return this._addCheck({kind:"email",...Q.errToObj(e)})}url(e){return this._addCheck({kind:"url",...Q.errToObj(e)})}emoji(e){return this._addCheck({kind:"emoji",...Q.errToObj(e)})}uuid(e){return this._addCheck({kind:"uuid",...Q.errToObj(e)})}nanoid(e){return this._addCheck({kind:"nanoid",...Q.errToObj(e)})}cuid(e){return this._addCheck({kind:"cuid",...Q.errToObj(e)})}cuid2(e){return this._addCheck({kind:"cuid2",...Q.errToObj(e)})}ulid(e){return this._addCheck({kind:"ulid",...Q.errToObj(e)})}base64(e){return this._addCheck({kind:"base64",...Q.errToObj(e)})}ip(e){return this._addCheck({kind:"ip",...Q.errToObj(e)})}datetime(e){var n,i;return typeof e=="string"?this._addCheck({kind:"datetime",precision:null,offset:!1,local:!1,message:e}):this._addCheck({kind:"datetime",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,offset:(n=e==null?void 0:e.offset)!==null&&n!==void 0?n:!1,local:(i=e==null?void 0:e.local)!==null&&i!==void 0?i:!1,...Q.errToObj(e==null?void 0:e.message)})}date(e){return this._addCheck({kind:"date",message:e})}time(e){return typeof e=="string"?this._addCheck({kind:"time",precision:null,message:e}):this._addCheck({kind:"time",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,...Q.errToObj(e==null?void 0:e.message)})}duration(e){return this._addCheck({kind:"duration",...Q.errToObj(e)})}regex(e,n){return this._addCheck({kind:"regex",regex:e,...Q.errToObj(n)})}includes(e,n){return this._addCheck({kind:"includes",value:e,position:n==null?void 0:n.position,...Q.errToObj(n==null?void 0:n.message)})}startsWith(e,n){return this._addCheck({kind:"startsWith",value:e,...Q.errToObj(n)})}endsWith(e,n){return this._addCheck({kind:"endsWith",value:e,...Q.errToObj(n)})}min(e,n){return this._addCheck({kind:"min",value:e,...Q.errToObj(n)})}max(e,n){return this._addCheck({kind:"max",value:e,...Q.errToObj(n)})}length(e,n){return this._addCheck({kind:"length",value:e,...Q.errToObj(n)})}nonempty(e){return this.min(1,Q.errToObj(e))}trim(){return new Tn({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new Tn({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new Tn({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find(e=>e.kind==="datetime")}get isDate(){return!!this._def.checks.find(e=>e.kind==="date")}get isTime(){return!!this._def.checks.find(e=>e.kind==="time")}get isDuration(){return!!this._def.checks.find(e=>e.kind==="duration")}get isEmail(){return!!this._def.checks.find(e=>e.kind==="email")}get isURL(){return!!this._def.checks.find(e=>e.kind==="url")}get isEmoji(){return!!this._def.checks.find(e=>e.kind==="emoji")}get isUUID(){return!!this._def.checks.find(e=>e.kind==="uuid")}get isNANOID(){return!!this._def.checks.find(e=>e.kind==="nanoid")}get isCUID(){return!!this._def.checks.find(e=>e.kind==="cuid")}get isCUID2(){return!!this._def.checks.find(e=>e.kind==="cuid2")}get isULID(){return!!this._def.checks.find(e=>e.kind==="ulid")}get isIP(){return!!this._def.checks.find(e=>e.kind==="ip")}get isBase64(){return!!this._def.checks.find(e=>e.kind==="base64")}get minLength(){let e=null;for(const n of this._def.checks)n.kind==="min"&&(e===null||n.value>e)&&(e=n.value);return e}get maxLength(){let e=null;for(const n of this._def.checks)n.kind==="max"&&(e===null||n.value<e)&&(e=n.value);return e}}Tn.create=t=>{var e;return new Tn({checks:[],typeName:J.ZodString,coerce:(e=t==null?void 0:t.coerce)!==null&&e!==void 0?e:!1,...ie(t)})};function kV(t,e){const n=(t.toString().split(".")[1]||"").length,i=(e.toString().split(".")[1]||"").length,r=n>i?n:i,s=parseInt(t.toFixed(r).replace(".","")),o=parseInt(e.toFixed(r).replace(".",""));return s%o/Math.pow(10,r)}class ir extends ue{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(e){if(this._def.coerce&&(e.data=Number(e.data)),this._getType(e)!==$.number){const s=this._getOrReturnCtx(e);return B(s,{code:F.invalid_type,expected:$.number,received:s.parsedType}),ne}let i;const r=new _t;for(const s of this._def.checks)s.kind==="int"?me.isInteger(e.data)||(i=this._getOrReturnCtx(e,i),B(i,{code:F.invalid_type,expected:"integer",received:"float",message:s.message}),r.dirty()):s.kind==="min"?(s.inclusive?e.data<s.value:e.data<=s.value)&&(i=this._getOrReturnCtx(e,i),B(i,{code:F.too_small,minimum:s.value,type:"number",inclusive:s.inclusive,exact:!1,message:s.message}),r.dirty()):s.kind==="max"?(s.inclusive?e.data>s.value:e.data>=s.value)&&(i=this._getOrReturnCtx(e,i),B(i,{code:F.too_big,maximum:s.value,type:"number",inclusive:s.inclusive,exact:!1,message:s.message}),r.dirty()):s.kind==="multipleOf"?kV(e.data,s.value)!==0&&(i=this._getOrReturnCtx(e,i),B(i,{code:F.not_multiple_of,multipleOf:s.value,message:s.message}),r.dirty()):s.kind==="finite"?Number.isFinite(e.data)||(i=this._getOrReturnCtx(e,i),B(i,{code:F.not_finite,message:s.message}),r.dirty()):me.assertNever(s);return{status:r.value,value:e.data}}gte(e,n){return this.setLimit("min",e,!0,Q.toString(n))}gt(e,n){return this.setLimit("min",e,!1,Q.toString(n))}lte(e,n){return this.setLimit("max",e,!0,Q.toString(n))}lt(e,n){return this.setLimit("max",e,!1,Q.toString(n))}setLimit(e,n,i,r){return new ir({...this._def,checks:[...this._def.checks,{kind:e,value:n,inclusive:i,message:Q.toString(r)}]})}_addCheck(e){return new ir({...this._def,checks:[...this._def.checks,e]})}int(e){return this._addCheck({kind:"int",message:Q.toString(e)})}positive(e){return this._addCheck({kind:"min",value:0,inclusive:!1,message:Q.toString(e)})}negative(e){return this._addCheck({kind:"max",value:0,inclusive:!1,message:Q.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:0,inclusive:!0,message:Q.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:0,inclusive:!0,message:Q.toString(e)})}multipleOf(e,n){return this._addCheck({kind:"multipleOf",value:e,message:Q.toString(n)})}finite(e){return this._addCheck({kind:"finite",message:Q.toString(e)})}safe(e){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:Q.toString(e)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:Q.toString(e)})}get minValue(){let e=null;for(const n of this._def.checks)n.kind==="min"&&(e===null||n.value>e)&&(e=n.value);return e}get maxValue(){let e=null;for(const n of this._def.checks)n.kind==="max"&&(e===null||n.value<e)&&(e=n.value);return e}get isInt(){return!!this._def.checks.find(e=>e.kind==="int"||e.kind==="multipleOf"&&me.isInteger(e.value))}get isFinite(){let e=null,n=null;for(const i of this._def.checks){if(i.kind==="finite"||i.kind==="int"||i.kind==="multipleOf")return!0;i.kind==="min"?(n===null||i.value>n)&&(n=i.value):i.kind==="max"&&(e===null||i.value<e)&&(e=i.value)}return Number.isFinite(n)&&Number.isFinite(e)}}ir.create=t=>new ir({checks:[],typeName:J.ZodNumber,coerce:(t==null?void 0:t.coerce)||!1,...ie(t)});class rr extends ue{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(e){if(this._def.coerce&&(e.data=BigInt(e.data)),this._getType(e)!==$.bigint){const s=this._getOrReturnCtx(e);return B(s,{code:F.invalid_type,expected:$.bigint,received:s.parsedType}),ne}let i;const r=new _t;for(const s of this._def.checks)s.kind==="min"?(s.inclusive?e.data<s.value:e.data<=s.value)&&(i=this._getOrReturnCtx(e,i),B(i,{code:F.too_small,type:"bigint",minimum:s.value,inclusive:s.inclusive,message:s.message}),r.dirty()):s.kind==="max"?(s.inclusive?e.data>s.value:e.data>=s.value)&&(i=this._getOrReturnCtx(e,i),B(i,{code:F.too_big,type:"bigint",maximum:s.value,inclusive:s.inclusive,message:s.message}),r.dirty()):s.kind==="multipleOf"?e.data%s.value!==BigInt(0)&&(i=this._getOrReturnCtx(e,i),B(i,{code:F.not_multiple_of,multipleOf:s.value,message:s.message}),r.dirty()):me.assertNever(s);return{status:r.value,value:e.data}}gte(e,n){return this.setLimit("min",e,!0,Q.toString(n))}gt(e,n){return this.setLimit("min",e,!1,Q.toString(n))}lte(e,n){return this.setLimit("max",e,!0,Q.toString(n))}lt(e,n){return this.setLimit("max",e,!1,Q.toString(n))}setLimit(e,n,i,r){return new rr({...this._def,checks:[...this._def.checks,{kind:e,value:n,inclusive:i,message:Q.toString(r)}]})}_addCheck(e){return new rr({...this._def,checks:[...this._def.checks,e]})}positive(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:Q.toString(e)})}negative(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:Q.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:Q.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:Q.toString(e)})}multipleOf(e,n){return this._addCheck({kind:"multipleOf",value:e,message:Q.toString(n)})}get minValue(){let e=null;for(const n of this._def.checks)n.kind==="min"&&(e===null||n.value>e)&&(e=n.value);return e}get maxValue(){let e=null;for(const n of this._def.checks)n.kind==="max"&&(e===null||n.value<e)&&(e=n.value);return e}}rr.create=t=>{var e;return new rr({checks:[],typeName:J.ZodBigInt,coerce:(e=t==null?void 0:t.coerce)!==null&&e!==void 0?e:!1,...ie(t)})};class xa extends ue{_parse(e){if(this._def.coerce&&(e.data=!!e.data),this._getType(e)!==$.boolean){const i=this._getOrReturnCtx(e);return B(i,{code:F.invalid_type,expected:$.boolean,received:i.parsedType}),ne}return Nt(e.data)}}xa.create=t=>new xa({typeName:J.ZodBoolean,coerce:(t==null?void 0:t.coerce)||!1,...ie(t)});class $r extends ue{_parse(e){if(this._def.coerce&&(e.data=new Date(e.data)),this._getType(e)!==$.date){const s=this._getOrReturnCtx(e);return B(s,{code:F.invalid_type,expected:$.date,received:s.parsedType}),ne}if(isNaN(e.data.getTime())){const s=this._getOrReturnCtx(e);return B(s,{code:F.invalid_date}),ne}const i=new _t;let r;for(const s of this._def.checks)s.kind==="min"?e.data.getTime()<s.value&&(r=this._getOrReturnCtx(e,r),B(r,{code:F.too_small,message:s.message,inclusive:!0,exact:!1,minimum:s.value,type:"date"}),i.dirty()):s.kind==="max"?e.data.getTime()>s.value&&(r=this._getOrReturnCtx(e,r),B(r,{code:F.too_big,message:s.message,inclusive:!0,exact:!1,maximum:s.value,type:"date"}),i.dirty()):me.assertNever(s);return{status:i.value,value:new Date(e.data.getTime())}}_addCheck(e){return new $r({...this._def,checks:[...this._def.checks,e]})}min(e,n){return this._addCheck({kind:"min",value:e.getTime(),message:Q.toString(n)})}max(e,n){return this._addCheck({kind:"max",value:e.getTime(),message:Q.toString(n)})}get minDate(){let e=null;for(const n of this._def.checks)n.kind==="min"&&(e===null||n.value>e)&&(e=n.value);return e!=null?new Date(e):null}get maxDate(){let e=null;for(const n of this._def.checks)n.kind==="max"&&(e===null||n.value<e)&&(e=n.value);return e!=null?new Date(e):null}}$r.create=t=>new $r({checks:[],coerce:(t==null?void 0:t.coerce)||!1,typeName:J.ZodDate,...ie(t)});class Ou extends ue{_parse(e){if(this._getType(e)!==$.symbol){const i=this._getOrReturnCtx(e);return B(i,{code:F.invalid_type,expected:$.symbol,received:i.parsedType}),ne}return Nt(e.data)}}Ou.create=t=>new Ou({typeName:J.ZodSymbol,...ie(t)});class wa extends ue{_parse(e){if(this._getType(e)!==$.undefined){const i=this._getOrReturnCtx(e);return B(i,{code:F.invalid_type,expected:$.undefined,received:i.parsedType}),ne}return Nt(e.data)}}wa.create=t=>new wa({typeName:J.ZodUndefined,...ie(t)});class ba extends ue{_parse(e){if(this._getType(e)!==$.null){const i=this._getOrReturnCtx(e);return B(i,{code:F.invalid_type,expected:$.null,received:i.parsedType}),ne}return Nt(e.data)}}ba.create=t=>new ba({typeName:J.ZodNull,...ie(t)});class Ys extends ue{constructor(){super(...arguments),this._any=!0}_parse(e){return Nt(e.data)}}Ys.create=t=>new Ys({typeName:J.ZodAny,...ie(t)});class Rr extends ue{constructor(){super(...arguments),this._unknown=!0}_parse(e){return Nt(e.data)}}Rr.create=t=>new Rr({typeName:J.ZodUnknown,...ie(t)});class bi extends ue{_parse(e){const n=this._getOrReturnCtx(e);return B(n,{code:F.invalid_type,expected:$.never,received:n.parsedType}),ne}}bi.create=t=>new bi({typeName:J.ZodNever,...ie(t)});class ju extends ue{_parse(e){if(this._getType(e)!==$.undefined){const i=this._getOrReturnCtx(e);return B(i,{code:F.invalid_type,expected:$.void,received:i.parsedType}),ne}return Nt(e.data)}}ju.create=t=>new ju({typeName:J.ZodVoid,...ie(t)});class An extends ue{_parse(e){const{ctx:n,status:i}=this._processInputParams(e),r=this._def;if(n.parsedType!==$.array)return B(n,{code:F.invalid_type,expected:$.array,received:n.parsedType}),ne;if(r.exactLength!==null){const o=n.data.length>r.exactLength.value,a=n.data.length<r.exactLength.value;(o||a)&&(B(n,{code:o?F.too_big:F.too_small,minimum:a?r.exactLength.value:void 0,maximum:o?r.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:r.exactLength.message}),i.dirty())}if(r.minLength!==null&&n.data.length<r.minLength.value&&(B(n,{code:F.too_small,minimum:r.minLength.value,type:"array",inclusive:!0,exact:!1,message:r.minLength.message}),i.dirty()),r.maxLength!==null&&n.data.length>r.maxLength.value&&(B(n,{code:F.too_big,maximum:r.maxLength.value,type:"array",inclusive:!0,exact:!1,message:r.maxLength.message}),i.dirty()),n.common.async)return Promise.all([...n.data].map((o,a)=>r.type._parseAsync(new Zn(n,o,n.path,a)))).then(o=>_t.mergeArray(i,o));const s=[...n.data].map((o,a)=>r.type._parseSync(new Zn(n,o,n.path,a)));return _t.mergeArray(i,s)}get element(){return this._def.type}min(e,n){return new An({...this._def,minLength:{value:e,message:Q.toString(n)}})}max(e,n){return new An({...this._def,maxLength:{value:e,message:Q.toString(n)}})}length(e,n){return new An({...this._def,exactLength:{value:e,message:Q.toString(n)}})}nonempty(e){return this.min(1,e)}}An.create=(t,e)=>new An({type:t,minLength:null,maxLength:null,exactLength:null,typeName:J.ZodArray,...ie(e)});function Xr(t){if(t instanceof Re){const e={};for(const n in t.shape){const i=t.shape[n];e[n]=Kn.create(Xr(i))}return new Re({...t._def,shape:()=>e})}else return t instanceof An?new An({...t._def,type:Xr(t.element)}):t instanceof Kn?Kn.create(Xr(t.unwrap())):t instanceof or?or.create(Xr(t.unwrap())):t instanceof Xn?Xn.create(t.items.map(e=>Xr(e))):t}class Re extends ue{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(this._cached!==null)return this._cached;const e=this._def.shape(),n=me.objectKeys(e);return this._cached={shape:e,keys:n}}_parse(e){if(this._getType(e)!==$.object){const u=this._getOrReturnCtx(e);return B(u,{code:F.invalid_type,expected:$.object,received:u.parsedType}),ne}const{status:i,ctx:r}=this._processInputParams(e),{shape:s,keys:o}=this._getCached(),a=[];if(!(this._def.catchall instanceof bi&&this._def.unknownKeys==="strip"))for(const u in r.data)o.includes(u)||a.push(u);const l=[];for(const u of o){const c=s[u],d=r.data[u];l.push({key:{status:"valid",value:u},value:c._parse(new Zn(r,d,r.path,u)),alwaysSet:u in r.data})}if(this._def.catchall instanceof bi){const u=this._def.unknownKeys;if(u==="passthrough")for(const c of a)l.push({key:{status:"valid",value:c},value:{status:"valid",value:r.data[c]}});else if(u==="strict")a.length>0&&(B(r,{code:F.unrecognized_keys,keys:a}),i.dirty());else if(u!=="strip")throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{const u=this._def.catchall;for(const c of a){const d=r.data[c];l.push({key:{status:"valid",value:c},value:u._parse(new Zn(r,d,r.path,c)),alwaysSet:c in r.data})}}return r.common.async?Promise.resolve().then(async()=>{const u=[];for(const c of l){const d=await c.key,f=await c.value;u.push({key:d,value:f,alwaysSet:c.alwaysSet})}return u}).then(u=>_t.mergeObjectSync(i,u)):_t.mergeObjectSync(i,l)}get shape(){return this._def.shape()}strict(e){return Q.errToObj,new Re({...this._def,unknownKeys:"strict",...e!==void 0?{errorMap:(n,i)=>{var r,s,o,a;const l=(o=(s=(r=this._def).errorMap)===null||s===void 0?void 0:s.call(r,n,i).message)!==null&&o!==void 0?o:i.defaultError;return n.code==="unrecognized_keys"?{message:(a=Q.errToObj(e).message)!==null&&a!==void 0?a:l}:{message:l}}}:{}})}strip(){return new Re({...this._def,unknownKeys:"strip"})}passthrough(){return new Re({...this._def,unknownKeys:"passthrough"})}extend(e){return new Re({...this._def,shape:()=>({...this._def.shape(),...e})})}merge(e){return new Re({unknownKeys:e._def.unknownKeys,catchall:e._def.catchall,shape:()=>({...this._def.shape(),...e._def.shape()}),typeName:J.ZodObject})}setKey(e,n){return this.augment({[e]:n})}catchall(e){return new Re({...this._def,catchall:e})}pick(e){const n={};return me.objectKeys(e).forEach(i=>{e[i]&&this.shape[i]&&(n[i]=this.shape[i])}),new Re({...this._def,shape:()=>n})}omit(e){const n={};return me.objectKeys(this.shape).forEach(i=>{e[i]||(n[i]=this.shape[i])}),new Re({...this._def,shape:()=>n})}deepPartial(){return Xr(this)}partial(e){const n={};return me.objectKeys(this.shape).forEach(i=>{const r=this.shape[i];e&&!e[i]?n[i]=r:n[i]=r.optional()}),new Re({...this._def,shape:()=>n})}required(e){const n={};return me.objectKeys(this.shape).forEach(i=>{if(e&&!e[i])n[i]=this.shape[i];else{let s=this.shape[i];for(;s instanceof Kn;)s=s._def.innerType;n[i]=s}}),new Re({...this._def,shape:()=>n})}keyof(){return oP(me.objectKeys(this.shape))}}Re.create=(t,e)=>new Re({shape:()=>t,unknownKeys:"strip",catchall:bi.create(),typeName:J.ZodObject,...ie(e)});Re.strictCreate=(t,e)=>new Re({shape:()=>t,unknownKeys:"strict",catchall:bi.create(),typeName:J.ZodObject,...ie(e)});Re.lazycreate=(t,e)=>new Re({shape:t,unknownKeys:"strip",catchall:bi.create(),typeName:J.ZodObject,...ie(e)});class Sa extends ue{_parse(e){const{ctx:n}=this._processInputParams(e),i=this._def.options;function r(s){for(const a of s)if(a.result.status==="valid")return a.result;for(const a of s)if(a.result.status==="dirty")return n.common.issues.push(...a.ctx.common.issues),a.result;const o=s.map(a=>new Zt(a.ctx.common.issues));return B(n,{code:F.invalid_union,unionErrors:o}),ne}if(n.common.async)return Promise.all(i.map(async s=>{const o={...n,common:{...n.common,issues:[]},parent:null};return{result:await s._parseAsync({data:n.data,path:n.path,parent:o}),ctx:o}})).then(r);{let s;const o=[];for(const l of i){const u={...n,common:{...n.common,issues:[]},parent:null},c=l._parseSync({data:n.data,path:n.path,parent:u});if(c.status==="valid")return c;c.status==="dirty"&&!s&&(s={result:c,ctx:u}),u.common.issues.length&&o.push(u.common.issues)}if(s)return n.common.issues.push(...s.ctx.common.issues),s.result;const a=o.map(l=>new Zt(l));return B(n,{code:F.invalid_union,unionErrors:a}),ne}}get options(){return this._def.options}}Sa.create=(t,e)=>new Sa({options:t,typeName:J.ZodUnion,...ie(e)});const ii=t=>t instanceof Ca?ii(t.schema):t instanceof On?ii(t.innerType()):t instanceof Ta?[t.value]:t instanceof sr?t.options:t instanceof Pa?me.objectValues(t.enum):t instanceof Ea?ii(t._def.innerType):t instanceof wa?[void 0]:t instanceof ba?[null]:t instanceof Kn?[void 0,...ii(t.unwrap())]:t instanceof or?[null,...ii(t.unwrap())]:t instanceof um||t instanceof Da?ii(t.unwrap()):t instanceof Ma?ii(t._def.innerType):[];class wc extends ue{_parse(e){const{ctx:n}=this._processInputParams(e);if(n.parsedType!==$.object)return B(n,{code:F.invalid_type,expected:$.object,received:n.parsedType}),ne;const i=this.discriminator,r=n.data[i],s=this.optionsMap.get(r);return s?n.common.async?s._parseAsync({data:n.data,path:n.path,parent:n}):s._parseSync({data:n.data,path:n.path,parent:n}):(B(n,{code:F.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[i]}),ne)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(e,n,i){const r=new Map;for(const s of n){const o=ii(s.shape[e]);if(!o.length)throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);for(const a of o){if(r.has(a))throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(a)}`);r.set(a,s)}}return new wc({typeName:J.ZodDiscriminatedUnion,discriminator:e,options:n,optionsMap:r,...ie(i)})}}function fh(t,e){const n=Ri(t),i=Ri(e);if(t===e)return{valid:!0,data:t};if(n===$.object&&i===$.object){const r=me.objectKeys(e),s=me.objectKeys(t).filter(a=>r.indexOf(a)!==-1),o={...t,...e};for(const a of s){const l=fh(t[a],e[a]);if(!l.valid)return{valid:!1};o[a]=l.data}return{valid:!0,data:o}}else if(n===$.array&&i===$.array){if(t.length!==e.length)return{valid:!1};const r=[];for(let s=0;s<t.length;s++){const o=t[s],a=e[s],l=fh(o,a);if(!l.valid)return{valid:!1};r.push(l.data)}return{valid:!0,data:r}}else return n===$.date&&i===$.date&&+t==+e?{valid:!0,data:t}:{valid:!1}}class _a extends ue{_parse(e){const{status:n,ctx:i}=this._processInputParams(e),r=(s,o)=>{if(ch(s)||ch(o))return ne;const a=fh(s.value,o.value);return a.valid?((dh(s)||dh(o))&&n.dirty(),{status:n.value,value:a.data}):(B(i,{code:F.invalid_intersection_types}),ne)};return i.common.async?Promise.all([this._def.left._parseAsync({data:i.data,path:i.path,parent:i}),this._def.right._parseAsync({data:i.data,path:i.path,parent:i})]).then(([s,o])=>r(s,o)):r(this._def.left._parseSync({data:i.data,path:i.path,parent:i}),this._def.right._parseSync({data:i.data,path:i.path,parent:i}))}}_a.create=(t,e,n)=>new _a({left:t,right:e,typeName:J.ZodIntersection,...ie(n)});class Xn extends ue{_parse(e){const{status:n,ctx:i}=this._processInputParams(e);if(i.parsedType!==$.array)return B(i,{code:F.invalid_type,expected:$.array,received:i.parsedType}),ne;if(i.data.length<this._def.items.length)return B(i,{code:F.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),ne;!this._def.rest&&i.data.length>this._def.items.length&&(B(i,{code:F.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),n.dirty());const s=[...i.data].map((o,a)=>{const l=this._def.items[a]||this._def.rest;return l?l._parse(new Zn(i,o,i.path,a)):null}).filter(o=>!!o);return i.common.async?Promise.all(s).then(o=>_t.mergeArray(n,o)):_t.mergeArray(n,s)}get items(){return this._def.items}rest(e){return new Xn({...this._def,rest:e})}}Xn.create=(t,e)=>{if(!Array.isArray(t))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new Xn({items:t,typeName:J.ZodTuple,rest:null,...ie(e)})};class ka extends ue{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:n,ctx:i}=this._processInputParams(e);if(i.parsedType!==$.object)return B(i,{code:F.invalid_type,expected:$.object,received:i.parsedType}),ne;const r=[],s=this._def.keyType,o=this._def.valueType;for(const a in i.data)r.push({key:s._parse(new Zn(i,a,i.path,a)),value:o._parse(new Zn(i,i.data[a],i.path,a)),alwaysSet:a in i.data});return i.common.async?_t.mergeObjectAsync(n,r):_t.mergeObjectSync(n,r)}get element(){return this._def.valueType}static create(e,n,i){return n instanceof ue?new ka({keyType:e,valueType:n,typeName:J.ZodRecord,...ie(i)}):new ka({keyType:Tn.create(),valueType:e,typeName:J.ZodRecord,...ie(n)})}}class Lu extends ue{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:n,ctx:i}=this._processInputParams(e);if(i.parsedType!==$.map)return B(i,{code:F.invalid_type,expected:$.map,received:i.parsedType}),ne;const r=this._def.keyType,s=this._def.valueType,o=[...i.data.entries()].map(([a,l],u)=>({key:r._parse(new Zn(i,a,i.path,[u,"key"])),value:s._parse(new Zn(i,l,i.path,[u,"value"]))}));if(i.common.async){const a=new Map;return Promise.resolve().then(async()=>{for(const l of o){const u=await l.key,c=await l.value;if(u.status==="aborted"||c.status==="aborted")return ne;(u.status==="dirty"||c.status==="dirty")&&n.dirty(),a.set(u.value,c.value)}return{status:n.value,value:a}})}else{const a=new Map;for(const l of o){const u=l.key,c=l.value;if(u.status==="aborted"||c.status==="aborted")return ne;(u.status==="dirty"||c.status==="dirty")&&n.dirty(),a.set(u.value,c.value)}return{status:n.value,value:a}}}}Lu.create=(t,e,n)=>new Lu({valueType:e,keyType:t,typeName:J.ZodMap,...ie(n)});class Wr extends ue{_parse(e){const{status:n,ctx:i}=this._processInputParams(e);if(i.parsedType!==$.set)return B(i,{code:F.invalid_type,expected:$.set,received:i.parsedType}),ne;const r=this._def;r.minSize!==null&&i.data.size<r.minSize.value&&(B(i,{code:F.too_small,minimum:r.minSize.value,type:"set",inclusive:!0,exact:!1,message:r.minSize.message}),n.dirty()),r.maxSize!==null&&i.data.size>r.maxSize.value&&(B(i,{code:F.too_big,maximum:r.maxSize.value,type:"set",inclusive:!0,exact:!1,message:r.maxSize.message}),n.dirty());const s=this._def.valueType;function o(l){const u=new Set;for(const c of l){if(c.status==="aborted")return ne;c.status==="dirty"&&n.dirty(),u.add(c.value)}return{status:n.value,value:u}}const a=[...i.data.values()].map((l,u)=>s._parse(new Zn(i,l,i.path,u)));return i.common.async?Promise.all(a).then(l=>o(l)):o(a)}min(e,n){return new Wr({...this._def,minSize:{value:e,message:Q.toString(n)}})}max(e,n){return new Wr({...this._def,maxSize:{value:e,message:Q.toString(n)}})}size(e,n){return this.min(e,n).max(e,n)}nonempty(e){return this.min(1,e)}}Wr.create=(t,e)=>new Wr({valueType:t,minSize:null,maxSize:null,typeName:J.ZodSet,...ie(e)});class Ps extends ue{constructor(){super(...arguments),this.validate=this.implement}_parse(e){const{ctx:n}=this._processInputParams(e);if(n.parsedType!==$.function)return B(n,{code:F.invalid_type,expected:$.function,received:n.parsedType}),ne;function i(a,l){return Fu({data:a,path:n.path,errorMaps:[n.common.contextualErrorMap,n.schemaErrorMap,Ru(),Xs].filter(u=>!!u),issueData:{code:F.invalid_arguments,argumentsError:l}})}function r(a,l){return Fu({data:a,path:n.path,errorMaps:[n.common.contextualErrorMap,n.schemaErrorMap,Ru(),Xs].filter(u=>!!u),issueData:{code:F.invalid_return_type,returnTypeError:l}})}const s={errorMap:n.common.contextualErrorMap},o=n.data;if(this._def.returns instanceof Js){const a=this;return Nt(async function(...l){const u=new Zt([]),c=await a._def.args.parseAsync(l,s).catch(h=>{throw u.addIssue(i(l,h)),u}),d=await Reflect.apply(o,this,c);return await a._def.returns._def.type.parseAsync(d,s).catch(h=>{throw u.addIssue(r(d,h)),u})})}else{const a=this;return Nt(function(...l){const u=a._def.args.safeParse(l,s);if(!u.success)throw new Zt([i(l,u.error)]);const c=Reflect.apply(o,this,u.data),d=a._def.returns.safeParse(c,s);if(!d.success)throw new Zt([r(c,d.error)]);return d.data})}}parameters(){return this._def.args}returnType(){return this._def.returns}args(...e){return new Ps({...this._def,args:Xn.create(e).rest(Rr.create())})}returns(e){return new Ps({...this._def,returns:e})}implement(e){return this.parse(e)}strictImplement(e){return this.parse(e)}static create(e,n,i){return new Ps({args:e||Xn.create([]).rest(Rr.create()),returns:n||Rr.create(),typeName:J.ZodFunction,...ie(i)})}}class Ca extends ue{get schema(){return this._def.getter()}_parse(e){const{ctx:n}=this._processInputParams(e);return this._def.getter()._parse({data:n.data,path:n.path,parent:n})}}Ca.create=(t,e)=>new Ca({getter:t,typeName:J.ZodLazy,...ie(e)});class Ta extends ue{_parse(e){if(e.data!==this._def.value){const n=this._getOrReturnCtx(e);return B(n,{received:n.data,code:F.invalid_literal,expected:this._def.value}),ne}return{status:"valid",value:e.data}}get value(){return this._def.value}}Ta.create=(t,e)=>new Ta({value:t,typeName:J.ZodLiteral,...ie(e)});function oP(t,e){return new sr({values:t,typeName:J.ZodEnum,...ie(e)})}class sr extends ue{constructor(){super(...arguments),Po.set(this,void 0)}_parse(e){if(typeof e.data!="string"){const n=this._getOrReturnCtx(e),i=this._def.values;return B(n,{expected:me.joinValues(i),received:n.parsedType,code:F.invalid_type}),ne}if(Iu(this,Po)||nP(this,Po,new Set(this._def.values)),!Iu(this,Po).has(e.data)){const n=this._getOrReturnCtx(e),i=this._def.values;return B(n,{received:n.data,code:F.invalid_enum_value,options:i}),ne}return Nt(e.data)}get options(){return this._def.values}get enum(){const e={};for(const n of this._def.values)e[n]=n;return e}get Values(){const e={};for(const n of this._def.values)e[n]=n;return e}get Enum(){const e={};for(const n of this._def.values)e[n]=n;return e}extract(e,n=this._def){return sr.create(e,{...this._def,...n})}exclude(e,n=this._def){return sr.create(this.options.filter(i=>!e.includes(i)),{...this._def,...n})}}Po=new WeakMap;sr.create=oP;class Pa extends ue{constructor(){super(...arguments),Eo.set(this,void 0)}_parse(e){const n=me.getValidEnumValues(this._def.values),i=this._getOrReturnCtx(e);if(i.parsedType!==$.string&&i.parsedType!==$.number){const r=me.objectValues(n);return B(i,{expected:me.joinValues(r),received:i.parsedType,code:F.invalid_type}),ne}if(Iu(this,Eo)||nP(this,Eo,new Set(me.getValidEnumValues(this._def.values))),!Iu(this,Eo).has(e.data)){const r=me.objectValues(n);return B(i,{received:i.data,code:F.invalid_enum_value,options:r}),ne}return Nt(e.data)}get enum(){return this._def.values}}Eo=new WeakMap;Pa.create=(t,e)=>new Pa({values:t,typeName:J.ZodNativeEnum,...ie(e)});class Js extends ue{unwrap(){return this._def.type}_parse(e){const{ctx:n}=this._processInputParams(e);if(n.parsedType!==$.promise&&n.common.async===!1)return B(n,{code:F.invalid_type,expected:$.promise,received:n.parsedType}),ne;const i=n.parsedType===$.promise?n.data:Promise.resolve(n.data);return Nt(i.then(r=>this._def.type.parseAsync(r,{path:n.path,errorMap:n.common.contextualErrorMap})))}}Js.create=(t,e)=>new Js({type:t,typeName:J.ZodPromise,...ie(e)});class On extends ue{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===J.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(e){const{status:n,ctx:i}=this._processInputParams(e),r=this._def.effect||null,s={addIssue:o=>{B(i,o),o.fatal?n.abort():n.dirty()},get path(){return i.path}};if(s.addIssue=s.addIssue.bind(s),r.type==="preprocess"){const o=r.transform(i.data,s);if(i.common.async)return Promise.resolve(o).then(async a=>{if(n.value==="aborted")return ne;const l=await this._def.schema._parseAsync({data:a,path:i.path,parent:i});return l.status==="aborted"?ne:l.status==="dirty"||n.value==="dirty"?ys(l.value):l});{if(n.value==="aborted")return ne;const a=this._def.schema._parseSync({data:o,path:i.path,parent:i});return a.status==="aborted"?ne:a.status==="dirty"||n.value==="dirty"?ys(a.value):a}}if(r.type==="refinement"){const o=a=>{const l=r.refinement(a,s);if(i.common.async)return Promise.resolve(l);if(l instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return a};if(i.common.async===!1){const a=this._def.schema._parseSync({data:i.data,path:i.path,parent:i});return a.status==="aborted"?ne:(a.status==="dirty"&&n.dirty(),o(a.value),{status:n.value,value:a.value})}else return this._def.schema._parseAsync({data:i.data,path:i.path,parent:i}).then(a=>a.status==="aborted"?ne:(a.status==="dirty"&&n.dirty(),o(a.value).then(()=>({status:n.value,value:a.value}))))}if(r.type==="transform")if(i.common.async===!1){const o=this._def.schema._parseSync({data:i.data,path:i.path,parent:i});if(!ya(o))return o;const a=r.transform(o.value,s);if(a instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:n.value,value:a}}else return this._def.schema._parseAsync({data:i.data,path:i.path,parent:i}).then(o=>ya(o)?Promise.resolve(r.transform(o.value,s)).then(a=>({status:n.value,value:a})):o);me.assertNever(r)}}On.create=(t,e,n)=>new On({schema:t,typeName:J.ZodEffects,effect:e,...ie(n)});On.createWithPreprocess=(t,e,n)=>new On({schema:e,effect:{type:"preprocess",transform:t},typeName:J.ZodEffects,...ie(n)});class Kn extends ue{_parse(e){return this._getType(e)===$.undefined?Nt(void 0):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}Kn.create=(t,e)=>new Kn({innerType:t,typeName:J.ZodOptional,...ie(e)});class or extends ue{_parse(e){return this._getType(e)===$.null?Nt(null):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}or.create=(t,e)=>new or({innerType:t,typeName:J.ZodNullable,...ie(e)});class Ea extends ue{_parse(e){const{ctx:n}=this._processInputParams(e);let i=n.data;return n.parsedType===$.undefined&&(i=this._def.defaultValue()),this._def.innerType._parse({data:i,path:n.path,parent:n})}removeDefault(){return this._def.innerType}}Ea.create=(t,e)=>new Ea({innerType:t,typeName:J.ZodDefault,defaultValue:typeof e.default=="function"?e.default:()=>e.default,...ie(e)});class Ma extends ue{_parse(e){const{ctx:n}=this._processInputParams(e),i={...n,common:{...n.common,issues:[]}},r=this._def.innerType._parse({data:i.data,path:i.path,parent:{...i}});return va(r)?r.then(s=>({status:"valid",value:s.status==="valid"?s.value:this._def.catchValue({get error(){return new Zt(i.common.issues)},input:i.data})})):{status:"valid",value:r.status==="valid"?r.value:this._def.catchValue({get error(){return new Zt(i.common.issues)},input:i.data})}}removeCatch(){return this._def.innerType}}Ma.create=(t,e)=>new Ma({innerType:t,typeName:J.ZodCatch,catchValue:typeof e.catch=="function"?e.catch:()=>e.catch,...ie(e)});class zu extends ue{_parse(e){if(this._getType(e)!==$.nan){const i=this._getOrReturnCtx(e);return B(i,{code:F.invalid_type,expected:$.nan,received:i.parsedType}),ne}return{status:"valid",value:e.data}}}zu.create=t=>new zu({typeName:J.ZodNaN,...ie(t)});const CV=Symbol("zod_brand");class um extends ue{_parse(e){const{ctx:n}=this._processInputParams(e),i=n.data;return this._def.type._parse({data:i,path:n.path,parent:n})}unwrap(){return this._def.type}}class qa extends ue{_parse(e){const{status:n,ctx:i}=this._processInputParams(e);if(i.common.async)return(async()=>{const s=await this._def.in._parseAsync({data:i.data,path:i.path,parent:i});return s.status==="aborted"?ne:s.status==="dirty"?(n.dirty(),ys(s.value)):this._def.out._parseAsync({data:s.value,path:i.path,parent:i})})();{const r=this._def.in._parseSync({data:i.data,path:i.path,parent:i});return r.status==="aborted"?ne:r.status==="dirty"?(n.dirty(),{status:"dirty",value:r.value}):this._def.out._parseSync({data:r.value,path:i.path,parent:i})}}static create(e,n){return new qa({in:e,out:n,typeName:J.ZodPipeline})}}class Da extends ue{_parse(e){const n=this._def.innerType._parse(e),i=r=>(ya(r)&&(r.value=Object.freeze(r.value)),r);return va(n)?n.then(r=>i(r)):i(n)}unwrap(){return this._def.innerType}}Da.create=(t,e)=>new Da({innerType:t,typeName:J.ZodReadonly,...ie(e)});function aP(t,e={},n){return t?Ys.create().superRefine((i,r)=>{var s,o;if(!t(i)){const a=typeof e=="function"?e(i):typeof e=="string"?{message:e}:e,l=(o=(s=a.fatal)!==null&&s!==void 0?s:n)!==null&&o!==void 0?o:!0,u=typeof a=="string"?{message:a}:a;r.addIssue({code:"custom",...u,fatal:l})}}):Ys.create()}const TV={object:Re.lazycreate};var J;(function(t){t.ZodString="ZodString",t.ZodNumber="ZodNumber",t.ZodNaN="ZodNaN",t.ZodBigInt="ZodBigInt",t.ZodBoolean="ZodBoolean",t.ZodDate="ZodDate",t.ZodSymbol="ZodSymbol",t.ZodUndefined="ZodUndefined",t.ZodNull="ZodNull",t.ZodAny="ZodAny",t.ZodUnknown="ZodUnknown",t.ZodNever="ZodNever",t.ZodVoid="ZodVoid",t.ZodArray="ZodArray",t.ZodObject="ZodObject",t.ZodUnion="ZodUnion",t.ZodDiscriminatedUnion="ZodDiscriminatedUnion",t.ZodIntersection="ZodIntersection",t.ZodTuple="ZodTuple",t.ZodRecord="ZodRecord",t.ZodMap="ZodMap",t.ZodSet="ZodSet",t.ZodFunction="ZodFunction",t.ZodLazy="ZodLazy",t.ZodLiteral="ZodLiteral",t.ZodEnum="ZodEnum",t.ZodEffects="ZodEffects",t.ZodNativeEnum="ZodNativeEnum",t.ZodOptional="ZodOptional",t.ZodNullable="ZodNullable",t.ZodDefault="ZodDefault",t.ZodCatch="ZodCatch",t.ZodPromise="ZodPromise",t.ZodBranded="ZodBranded",t.ZodPipeline="ZodPipeline",t.ZodReadonly="ZodReadonly"})(J||(J={}));const PV=(t,e={message:`Input not instance of ${t.name}`})=>aP(n=>n instanceof t,e),lP=Tn.create,uP=ir.create,EV=zu.create,MV=rr.create,cP=xa.create,DV=$r.create,NV=Ou.create,AV=wa.create,RV=ba.create,FV=Ys.create,IV=Rr.create,OV=bi.create,jV=ju.create,LV=An.create,zV=Re.create,VV=Re.strictCreate,BV=Sa.create,UV=wc.create,$V=_a.create,WV=Xn.create,HV=ka.create,qV=Lu.create,GV=Wr.create,QV=Ps.create,KV=Ca.create,ZV=Ta.create,XV=sr.create,YV=Pa.create,JV=Js.create,Bv=On.create,e6=Kn.create,t6=or.create,n6=On.createWithPreprocess,i6=qa.create,r6=()=>lP().optional(),s6=()=>uP().optional(),o6=()=>cP().optional(),a6={string:t=>Tn.create({...t,coerce:!0}),number:t=>ir.create({...t,coerce:!0}),boolean:t=>xa.create({...t,coerce:!0}),bigint:t=>rr.create({...t,coerce:!0}),date:t=>$r.create({...t,coerce:!0})},l6=ne;var yt=Object.freeze({__proto__:null,defaultErrorMap:Xs,setErrorMap:lV,getErrorMap:Ru,makeIssue:Fu,EMPTY_PATH:uV,addIssueToContext:B,ParseStatus:_t,INVALID:ne,DIRTY:ys,OK:Nt,isAborted:ch,isDirty:dh,isValid:ya,isAsync:va,get util(){return me},get objectUtil(){return uh},ZodParsedType:$,getParsedType:Ri,ZodType:ue,datetimeRegex:sP,ZodString:Tn,ZodNumber:ir,ZodBigInt:rr,ZodBoolean:xa,ZodDate:$r,ZodSymbol:Ou,ZodUndefined:wa,ZodNull:ba,ZodAny:Ys,ZodUnknown:Rr,ZodNever:bi,ZodVoid:ju,ZodArray:An,ZodObject:Re,ZodUnion:Sa,ZodDiscriminatedUnion:wc,ZodIntersection:_a,ZodTuple:Xn,ZodRecord:ka,ZodMap:Lu,ZodSet:Wr,ZodFunction:Ps,ZodLazy:Ca,ZodLiteral:Ta,ZodEnum:sr,ZodNativeEnum:Pa,ZodPromise:Js,ZodEffects:On,ZodTransformer:On,ZodOptional:Kn,ZodNullable:or,ZodDefault:Ea,ZodCatch:Ma,ZodNaN:zu,BRAND:CV,ZodBranded:um,ZodPipeline:qa,ZodReadonly:Da,custom:aP,Schema:ue,ZodSchema:ue,late:TV,get ZodFirstPartyTypeKind(){return J},coerce:a6,any:FV,array:LV,bigint:MV,boolean:cP,date:DV,discriminatedUnion:UV,effect:Bv,enum:XV,function:QV,instanceof:PV,intersection:$V,lazy:KV,literal:ZV,map:qV,nan:EV,nativeEnum:YV,never:OV,null:RV,nullable:t6,number:uP,object:zV,oboolean:o6,onumber:s6,optional:e6,ostring:r6,pipeline:i6,preprocess:n6,promise:JV,record:HV,set:GV,strictObject:VV,string:lP,symbol:NV,transformer:Bv,tuple:WV,undefined:AV,union:BV,unknown:IV,void:jV,NEVER:l6,ZodIssueCode:F,quotelessJson:aV,ZodError:Zt});const Ae={INT8_MIN:-128,INT8_MAX:127,INT8_UNSIGNED_MAX:255,INT16_MIN:-32768,INT16_MAX:32767,INT16_UNSIGNED_MAX:65535,INT24_MIN:-8388608,INT24_MAX:8388607,INT24_UNSIGNED_MAX:16777215,INT32_MIN:-2147483648,INT32_MAX:2147483647,INT32_UNSIGNED_MAX:4294967295,INT48_MIN:-0x800000000000,INT48_MAX:0x7fffffffffff,INT48_UNSIGNED_MAX:0xffffffffffff,INT64_MIN:-9223372036854775808n,INT64_MAX:9223372036854775807n,INT64_UNSIGNED_MAX:18446744073709551615n};function $e(t,e){return e.includes(t.columnType)}function u6(t){return"enumValues"in t&&Array.isArray(t.enumValues)&&t.enumValues.length>0}const c6=yt.union([yt.string(),yt.number(),yt.boolean(),yt.null()]),d6=yt.union([c6,yt.record(yt.any()),yt.array(yt.any())]),f6=yt.custom(t=>t instanceof Buffer);function dP(t,e){const n=(e==null?void 0:e.zodInstance)??yt,i=(e==null?void 0:e.coerce)??{};let r;return u6(t)&&(r=t.enumValues.length?n.enum(t.enumValues):n.string()),r||($e(t,["PgGeometry","PgPointTuple"])?r=n.tuple([n.number(),n.number()]):$e(t,["PgGeometryObject","PgPointObject"])?r=n.object({x:n.number(),y:n.number()}):$e(t,["PgHalfVector","PgVector"])?(r=n.array(n.number()),r=t.dimensions?r.length(t.dimensions):r):$e(t,["PgLine"])?r=n.tuple([n.number(),n.number(),n.number()]):$e(t,["PgLineABC"])?r=n.object({a:n.number(),b:n.number(),c:n.number()}):$e(t,["PgArray"])?(r=n.array(dP(t.baseColumn,n)),r=t.size?r.length(t.size):r):t.dataType==="array"?r=n.array(n.any()):t.dataType==="number"?r=h6(t,n,i):t.dataType==="bigint"?r=p6(t,n,i):t.dataType==="boolean"?r=i===!0||i.boolean?n.coerce.boolean():n.boolean():t.dataType==="date"?r=i===!0||i.date?n.coerce.date():n.date():t.dataType==="string"?r=m6(t,n,i):t.dataType==="json"?r=d6:t.dataType==="custom"?r=n.any():t.dataType==="buffer"&&(r=f6)),r||(r=n.any()),r}function h6(t,e,n){let i=t.getSQLType().includes("unsigned"),r,s,o=!1;$e(t,["MySqlTinyInt","SingleStoreTinyInt"])?(r=i?0:Ae.INT8_MIN,s=i?Ae.INT8_UNSIGNED_MAX:Ae.INT8_MAX,o=!0):$e(t,["PgSmallInt","PgSmallSerial","MySqlSmallInt","SingleStoreSmallInt"])?(r=i?0:Ae.INT16_MIN,s=i?Ae.INT16_UNSIGNED_MAX:Ae.INT16_MAX,o=!0):$e(t,["PgReal","MySqlFloat","MySqlMediumInt","SingleStoreMediumInt","SingleStoreFloat"])?(r=i?0:Ae.INT24_MIN,s=i?Ae.INT24_UNSIGNED_MAX:Ae.INT24_MAX,o=$e(t,["MySqlMediumInt","SingleStoreMediumInt"])):$e(t,["PgInteger","PgSerial","MySqlInt","SingleStoreInt"])?(r=i?0:Ae.INT32_MIN,s=i?Ae.INT32_UNSIGNED_MAX:Ae.INT32_MAX,o=!0):$e(t,["PgDoublePrecision","MySqlReal","MySqlDouble","SingleStoreReal","SingleStoreDouble","SQLiteReal"])?(r=i?0:Ae.INT48_MIN,s=i?Ae.INT48_UNSIGNED_MAX:Ae.INT48_MAX):$e(t,["PgBigInt53","PgBigSerial53","MySqlBigInt53","MySqlSerial","SingleStoreBigInt53","SingleStoreSerial","SQLiteInteger"])?(i=i||$e(t,["MySqlSerial","SingleStoreSerial"]),r=i?0:Number.MIN_SAFE_INTEGER,s=Number.MAX_SAFE_INTEGER,o=!0):$e(t,["MySqlYear","SingleStoreYear"])?(r=1901,s=2155,o=!0):(r=Number.MIN_SAFE_INTEGER,s=Number.MAX_SAFE_INTEGER);let a=n===!0||n!=null&&n.number?e.coerce.number():e.number();return a=a.min(r).max(s),o?a.int():a}function p6(t,e,n){const i=t.getSQLType().includes("unsigned"),r=i?0n:Ae.INT64_MIN,s=i?Ae.INT64_UNSIGNED_MAX:Ae.INT64_MAX;return(n===!0||n!=null&&n.bigint?e.coerce.bigint():e.bigint()).min(r).max(s)}function m6(t,e,n){if($e(t,["PgUUID"]))return e.string().uuid();let i,r,s=!1;$e(t,["PgVarchar","SQLiteText"])?i=t.length:$e(t,["MySqlVarChar","SingleStoreVarChar"])?i=t.length??Ae.INT16_UNSIGNED_MAX:$e(t,["MySqlText","SingleStoreText"])&&(t.textType==="longtext"?i=Ae.INT32_UNSIGNED_MAX:t.textType==="mediumtext"?i=Ae.INT24_UNSIGNED_MAX:t.textType==="text"?i=Ae.INT16_UNSIGNED_MAX:i=Ae.INT8_UNSIGNED_MAX),$e(t,["PgChar","MySqlChar","SingleStoreChar"])&&(i=t.length,s=!0),$e(t,["PgBinaryVector"])&&(r=/^[01]+$/,i=t.dimensions);let o=n===!0||n!=null&&n.string?e.coerce.string():e.string();return o=r?o.regex(r):o,i&&s?o.length(i):i?o.max(i):o}function fP(t){return _C(t)?Pz(t):Ez(t)}function hP(t,e,n,i){const r={};for(const[s,o]of Object.entries(t)){if(!ot(o,Zs)&&!ot(o,Xe)&&!ot(o,Xe.Aliased)&&typeof o=="object"){const d=_C(o)||Tz(o)?fP(o):o;r[s]=hP(d,e[s]??{},n,i);continue}const a=e[s];if(a!==void 0&&typeof a!="function"){r[s]=a;continue}const l=ot(o,Zs)?o:void 0,u=l?dP(l,i):yt.any(),c=typeof a=="function"?a(u):u;n.never(l)||(r[s]=c,l&&(n.nullable(l)&&(r[s]=r[s].nullable()),n.optional(l)&&(r[s]=r[s].optional())))}return yt.object(r)}const g6={never:t=>{var e,n;return((e=t==null?void 0:t.generated)==null?void 0:e.type)==="always"||((n=t==null?void 0:t.generatedIdentity)==null?void 0:n.type)==="always"},optional:t=>!t.notNull||t.notNull&&t.hasDefault,nullable:t=>!t.notNull},pP=(t,e)=>{const n=fP(t);return hP(n,{},g6)},y6=eP("users",{id:lm("id").primaryKey(),username:Cr("username").notNull().unique(),password:Cr("password").notNull()});pP(y6).pick({username:!0,password:!0});const v6=eP("contact_messages",{id:lm("id").primaryKey(),name:Cr("name").notNull(),email:Cr("email").notNull(),subject:Cr("subject").notNull(),message:Cr("message").notNull(),created_at:BT("created_at").defaultNow().notNull()}),x6=pP(v6).pick({name:!0,email:!0,subject:!0,message:!0}),w6=x6.extend({email:yt.string().email("Please enter a valid email address"),message:yt.string().min(10,"Message must be at least 10 characters long")}),b6=()=>{const[t,e]=S.useState(!1),{toast:n}=f_(),{register:i,handleSubmit:r,reset:s,formState:{errors:o}}=pz({resolver:vz(w6),defaultValues:{name:"",email:"",subject:"",message:""}}),a=async h=>{e(!0);try{await KD("POST","/api/contact",h),n({title:"Message sent!",description:"Thank you for reaching out. I'll get back to you soon.",variant:"default"}),s()}catch(v){n({title:"Failed to send message",description:v instanceof Error?v.message:"Please try again later",variant:"destructive"})}finally{e(!1)}},l="w-full px-4 py-3 border border-[#FFD700]/30 rounded-lg focus:ring-2 focus:ring-[#FFD700]/50 focus:border-[#FFD700]/50 transition-colors bg-black/60 text-[#FFFFF7] placeholder:text-[#FFFFF7]/40",u="block text-[#FFD700] font-medium mb-2 font-['Cinzel']",c="text-red-400 text-sm mt-1 font-['Cormorant_Garamond']",d=[{icon:p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-6 w-6",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",children:p.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"})}),title:"Email",content:p.jsx("a",{href:"mailto:bekamguta_2027@depauw.edu",className:"hover:text-white transition-colors",children:"bekamguta_2027@depauw.edu"})},{icon:p.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-6 w-6",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",children:[p.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"}),p.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M15 11a3 3 0 11-6 0 3 3 0 016 0z"})]}),title:"Location",content:"Greencastle, IN, 46135"},{icon:p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-6 w-6",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",children:p.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"})}),title:"Phone",content:"765-712-3354"}],f=[{icon:p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-6 w-6",fill:"currentColor",viewBox:"0 0 24 24",children:p.jsx("path",{d:"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"})}),url:"https://github.com/Ibek7"},{icon:p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-6 w-6",fill:"currentColor",viewBox:"0 0 24 24",children:p.jsx("path",{d:"M4.98 3.5c0 1.381-1.11 2.5-2.48 2.5s-2.48-1.119-2.48-2.5c0-1.38 1.11-2.5 2.48-2.5s2.48 1.12 2.48 2.5zm.02 4.5h-5v16h5v-16zm7.982 0h-4.968v16h4.969v-8.399c0-4.67 6.029-5.052 6.029 0v8.399h4.988v-10.131c0-7.88-8.922-7.593-11.018-3.714v-2.155z"})}),url:"https://linkedin.com/in/bekam-guta"},{icon:p.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-6 w-6",fill:"currentColor",viewBox:"0 0 24 24",children:p.jsx("path",{d:"M22.5 6.908V16.9c0 3.33-2.7 6.03-6.03 6.03H7.53C4.2 22.93 1.5 20.23 1.5 16.9V7c0-3.33 2.7-6.03 6.03-6.03h8.94C19.8.97 22.5 3.67 22.5 7v-.092zM7 10.25c-.83 0-1.5.67-1.5 1.5v4.75c0 .83.67 1.5 1.5 1.5h.5c.83 0 1.5-.67 1.5-1.5v-4.75c0-.83-.67-1.5-1.5-1.5H7zm5 0c-.83 0-1.5.67-1.5 1.5v4.75c0 .83.67 1.5 1.5 1.5h.5c.83 0 1.5-.67 1.5-1.5v-4.75c0-.83-.67-1.5-1.5-1.5h-.5zm5 0c-.83 0-1.5.67-1.5 1.5v4.75c0 .83.67 1.5 1.5 1.5h.5c.83 0 1.5-.67 1.5-1.5v-4.75c0-.83-.67-1.5-1.5-1.5h-.5zm-10-3.5c-.83 0-1.5.67-1.5 1.5v.25c0 .83.67 1.5 1.5 1.5h.5c.83 0 1.5-.67 1.5-1.5v-.25c0-.83-.67-1.5-1.5-1.5H7zm5 0c-.83 0-1.5.67-1.5 1.5v.25c0 .83.67 1.5 1.5 1.5h.5c.83 0 1.5-.67 1.5-1.5v-.25c0-.83-.67-1.5-1.5-1.5h-.5zm5 0c-.83 0-1.5.67-1.5 1.5v.25c0 .83.67 1.5 1.5 1.5h.5c.83 0 1.5-.67 1.5-1.5v-.25c0-.83-.67-1.5-1.5-1.5h-.5z"})}),url:"https://ibek7.github.io"}];return p.jsx("section",{id:"contact",className:"section py-24 bg-[#000000]",children:p.jsxs("div",{className:"container mx-auto px-6 child-delay",children:[p.jsxs(te.div,{className:"text-center mb-16",initial:{opacity:0,y:20},whileInView:{opacity:1,y:0},viewport:{once:!0},transition:{duration:.6},children:[p.jsx("h2",{className:"text-4xl font-bold gold-accent-glow font-['Cinzel'] mb-4","data-text":"Get In Touch",children:"Get In Touch"}),p.jsx("p",{className:"text-[#FFFFF7]/70 max-w-xl mx-auto font-['Cormorant_Garamond'] text-lg italic",children:"Have a project in mind or want to discuss potential opportunities? Let's connect!"})]}),p.jsxs("div",{className:"flex flex-col lg:flex-row gap-12",children:[p.jsx(te.div,{className:"lg:w-1/2",initial:{opacity:0,x:-30},whileInView:{opacity:1,x:0},viewport:{once:!0},transition:{duration:.6},children:p.jsx("div",{className:"bg-[#FFFFF7]/5 backdrop-blur-md rounded-xl p-8 shadow-xl border border-[#FFD700]/20",children:p.jsxs("form",{onSubmit:r(a),className:"space-y-6",children:[p.jsxs("div",{children:[p.jsx("label",{htmlFor:"name",className:u,children:"Your Name"}),p.jsx("input",{id:"name",className:`${l} ${o.name?"border-red-500 focus:border-red-500 focus:ring-red-500":""}`,placeholder:"John Smith",...i("name")}),o.name&&p.jsx("p",{className:c,children:o.name.message})]}),p.jsxs("div",{children:[p.jsx("label",{htmlFor:"email",className:u,children:"Email Address"}),p.jsx("input",{id:"email",className:`${l} ${o.email?"border-red-500 focus:border-red-500 focus:ring-red-500":""}`,placeholder:"your@email.com",...i("email")}),o.email&&p.jsx("p",{className:c,children:o.email.message})]}),p.jsxs("div",{children:[p.jsx("label",{htmlFor:"subject",className:u,children:"Subject"}),p.jsx("input",{id:"subject",className:`${l} ${o.subject?"border-red-500 focus:border-red-500 focus:ring-red-500":""}`,placeholder:"Project Inquiry",...i("subject")}),o.subject&&p.jsx("p",{className:c,children:o.subject.message})]}),p.jsxs("div",{children:[p.jsx("label",{htmlFor:"message",className:u,children:"Your Message"}),p.jsx("textarea",{id:"message",rows:5,className:`${l} resize-none ${o.message?"border-red-500 focus:border-red-500 focus:ring-red-500":""}`,placeholder:"Tell me about your project, timeline, and budget...",...i("message")}),o.message&&p.jsx("p",{className:c,children:o.message.message})]}),p.jsx(te.button,{type:"submit",disabled:t,className:"w-full bg-black text-[#FFD700] font-medium py-3 px-6 rounded-lg border border-[#FFD700]/30 hover:bg-[#FFD700]/10 transition-all focus:outline-none focus:ring-2 focus:ring-[#FFD700]/50 focus:ring-offset-2 disabled:opacity-70 disabled:cursor-not-allowed font-['Cinzel']",whileHover:{scale:1.02},whileTap:{scale:.98},children:t?"Sending...":"Send Message"})]})})}),p.jsxs(te.div,{className:"lg:w-1/2 flex flex-col justify-between",initial:{opacity:0,x:30},whileInView:{opacity:1,x:0},viewport:{once:!0},transition:{duration:.6},children:[p.jsx("div",{className:"space-y-8",children:d.map((h,v)=>p.jsxs("div",{className:"flex items-start space-x-4",children:[p.jsx("div",{className:"w-12 h-12 bg-black border border-[#FFD700]/30 rounded-full flex items-center justify-center text-[#FFD700] shadow-[0_0_10px_rgba(255,215,0,0.2)]",children:h.icon}),p.jsxs("div",{children:[p.jsx("h3",{className:"text-xl font-bold text-[#FFD700] font-['Cinzel'] mb-2",children:h.title}),p.jsx("p",{className:"text-[#FFFFF7]/80 font-['Cormorant_Garamond'] text-lg",children:h.content})]})]},v))}),p.jsxs("div",{className:"mt-12",children:[p.jsx("h3",{className:"text-xl font-bold text-[#FFD700] font-['Cinzel'] mb-4",children:"Connect With Me"}),p.jsx("div",{className:"flex space-x-4",children:f.map((h,v)=>p.jsx(te.a,{href:h.url,target:"_blank",rel:"noopener noreferrer",className:"w-12 h-12 bg-black border border-[#FFD700]/30 rounded-full flex items-center justify-center text-[#FFD700] hover:bg-[#FFD700]/10 hover:border-[#FFD700]/50 transition-all shadow-[0_0_10px_rgba(255,215,0,0.1)]",whileHover:{scale:1.1,boxShadow:"0 0 15px rgba(255,215,0,0.3)"},whileTap:{scale:.9},children:h.icon},v))})]})]})]})]})})},S6=({sectionIds:t,offset:e=0})=>{const[n,i]=S.useState(t[0]);return S.useEffect(()=>{const r=()=>{const s=window.scrollY;let o=t[0];for(const a of t){const l=document.getElementById(a);if(l){const u=l.offsetTop-e,c=u+l.offsetHeight;if(s>=u&&s<c){o=a;break}}}o!==n&&i(o)};return window.addEventListener("scroll",r),r(),()=>{window.removeEventListener("scroll",r)}},[t,e,n]),n},_6=()=>{const t=S6({sectionIds:["home","projects","skills","experience","blog","contact"],offset:200});return p.jsxs(p.Fragment,{children:[p.jsx(FL,{}),p.jsx(AL,{activeSection:t}),p.jsxs("main",{children:[p.jsx(IL,{}),p.jsx(WL,{}),p.jsx(qL,{}),p.jsx(GL,{}),p.jsx(QL,{}),p.jsx(b6,{})]}),p.jsx(RL,{})]})};function k6(){return p.jsx(up,{base:"/PortfolioShowcase-2",children:p.jsxs(kD,{children:[p.jsx(Ng,{path:"/",component:_6}),p.jsx(Ng,{component:aI})]})})}function C6(){return p.jsxs(QD,{client:XD,children:[p.jsx(nI,{}),p.jsx(k6,{}),p.jsx(jA,{})]})}const T6=()=>{const[,t]=t_(),e=S.useRef(!1);return S.useEffect(()=>{if(!e.current){const n=sessionStorage.getItem("redirect");if(n){sessionStorage.removeItem("redirect");const i=n.startsWith("/PortfolioShowcase-2")?n.substring(20):n;t(i||"/",{replace:!0}),e.current=!0}}},[t]),null},P6=()=>p.jsxs(up,{base:"/PortfolioShowcase-2",hook:t_,children:[p.jsx(T6,{}),p.jsx(C6,{})]});HS(document.getElementById("root")).render(p.jsx(Me.StrictMode,{children:p.jsx(P6,{})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
